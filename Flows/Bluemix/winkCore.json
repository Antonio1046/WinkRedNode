[
  {
    "id": "b25b93a7.4da47",
    "type": "websocket-listener",
    "path": "/ws/winkStat",
    "wholemsg": "false"
  },
  {
    "id": "acfa619b.5305a",
    "type": "function",
    "name": "DefineGlobalObjects",
    "func": "//use this function to initialize global variables that can be used in any flow or function\n//and will keep their values while application is running\nif (typeof context.global.ifttt === 'undefined')\n{\n    context.global.ifttt=false;\n}\n\nif (typeof (context.global.PresenceHistory) === 'undefined') context.global.PresenceHistory=[];\n\nif (typeof(context.global.Presence) === 'undefined')\n{\n    context.global.Presence = {};  \n}\n\nif (typeof context.global.ignoreMotion === 'undefined')\n{\n    context.global.ignoreMotion=false;\n}\nif (typeof context.global.mediaPlaying==='undefined')\n{\n    context.global.mediaPlaying=false;\n}\nif (typeof context.global.Weather === 'undefined')\n{\n    context.global.Weather= {};\n}\nif (typeof context.global.winkState==='undefined' )\n{\n context.global.winkState = {};\n}\n\nif (typeof context.global.winkDevCap==='undefined' )\n{\n    context.global.winkDevCap = {};\n}\n\ncontext.global.checkPresence = function() {\n    var i=0;\n    if (typeof(context.global.Presence) ==='undefined') return false;\n    for (var key in context.global.Presence){\n        if (context.global.Presence[key].home==='yes' || context.global.Presence[key].home===true) i++;\n    }\n    return (i>0 ? true : false);\n};\n\ncontext.global.isHomeOccupied = function() {\n    if (typeof context.global.winkState.groups['.sensors'].motion!=='undefined'){ motionSensors = context.global.winkState.groups['.sensors'].motion.or; } else { motionSensors = false; }\n    if (typeof context.global.winkState.groups['.sensors'].occupied!=='undefined'){ occupancySensors = context.global.winkState.groups['.sensors'].occupied.or; } else { occupancySensors = false; }\n    return ((motionSensors || occupancySensors || context.global.checkPresence()) ? true : false);\n};\n\ncontext.global.getWinkState = function (body) {\n    var results, updateP;\n\n    updateP = !body.data;\n    results = updateP ? [body] : body.data;\n\n    results.forEach(function (result) {\n        var key, len, prop, readings, type,reading_aggregations, agg_prop, capabilities, capb, outlets, outl;\n        //node.warn(result.object_type+\" \"+ result.object_id+\" \"+result.name) //for debugging\n        type = result.object_type;\n        if (type) {\n        key = result.name;\n        if (type==\"binary_switch\") type=\"binary_switches\";\n        else type=type+\"s\";\n        }\n        else {\n            if (!result.linked_service_id || result._msgid) return;\n            type = 'linked_services';\n            key = result.service;\n            result.object_id = result.linked_service_id;\n        }\n        if (!context.global.winkState[type]) context.global.winkState[type] = {};\n\n        if ((!!context.global.winkState[type][key]) && (context.global.winkState[type][key].object_id != result.object_id)) {\n            key += ' (#' + result.object_id + ')';\n        }\n\n        if (!(key in context.global.winkState[type])) context.global.winkState[type][key] ={};\n        context.global.winkState[type][key].name=result.name || key;\n        context.global.winkState[type][key].object_type=type;\n        context.global.winkState[type][key].object_id=result.object_id;\n        context.global.winkState[type][key].device_manufacturer=result.device_manufacturer;\n        context.global.winkState[type][key].freeboard=0;\n        if (result.savings_goal){\n         context.global.winkState[type][key].savings_goal=result.savings_goal ;\n         context.global.winkState[type][key].nose_color=result.nose_color;\n        }\n        if (result.lat_lng) {\n            if ((result.lat_lng[0] === 0) && (result.lat_lng[1] === 0)) result.lat_lng = [null, null];\n            context.global.winkState[type][key].coordinates = result.lat_lng;\n        }\n        \n        // Add group membership\n        if (type==\"groups\" && result.name.substring(0,1)!==\".\" && result.name.substring(0,1)!==\"@\")\n        {\n            if (result.members && result.members.length>0) {\n                context.global.winkState[type][key].members = {};\n                for (i=0; i<result.members.length; i++) {\n                    var light_type= (result.members[i].object_type == 'binary_switch' ? 'binary_switches' : result.members[i].object_type+'s');\n                    for (var name in context.global.winkState[light_type])\n                    {\n                        if (context.global.winkState[light_type][name].object_id == result.members[i].object_id) \n                        {\n                            context.global.winkState[type][key].members[name] = { \n                                    name:name,\n                                    object_id:result.members[i].object_id,\n                                    object_type:light_type\n                                };\n                            }\n                        }\n                    }\n                }\n                \n        }\n\n        if (type=='cameras'){\n//        if (typeof(context.global.winkState[type][key].activities)==='undefined') context.global.winkState[type][key].activities=[]\n        context.global.winkState[type][key].manufacturer_device_model = result.manufacturer_device_model\n        context.global.winkState[type][key].url = context.global.BlueMixUrlBase+\"/freeboard/camera?token=\"+context.global.FREEBOARD_TOKEN+\"&id=\"+context.global.winkState.cameras[key].object_id+\"&model=\"+context.global.winkState.cameras[key].manufacturer_device_model\n        context.global.winkState[type][key].snap_url = context.global.BlueMixUrlBase+\"/freeboard/camera?token=\"+context.global.FREEBOARD_TOKEN+\"&id=\"+context.global.winkState.cameras[key].object_id+\"&model=\"+context.global.winkState.cameras[key].manufacturer_device_model\n        context.global.winkState[type][key].history_url = context.global.BlueMixUrlBase+\"/freeboard/cameraSnapshots?token=\"+context.global.FREEBOARD_TOKEN+\"&camera_name=\"+key,\n        context.global.winkState[type][key].refresh_time=30\n        }\n\n        readings = result.last_reading;\n        for (prop in readings) {\n            len = prop.length;\n            if ((prop.indexOf('desired_') === -1) && (prop.lastIndexOf('_at') !== (len - 3))) {\n                context.global.winkState[type][key][prop] = readings[prop];\n            }\n        }\n        \n        reading_aggregations = result.reading_aggregation;\n        for (agg_prop in reading_aggregations) {\n            context.global.winkState[type][key][agg_prop]=reading_aggregations[agg_prop];\n        }\n        \n        capabilities = result.capabilities;\n        for (capb in capabilities) {\n            if(!context.global.winkDevCap[key]) context.global.winkDevCap[key]={};\n            if(!context.global.winkDevCap[key][capb]) context.global.winkDevCap[key][capb]={};\n          context.global.winkDevCap[key][capb]=capabilities[capb];\n        }\n        \n        outlets = result.outlets;\n        for (outl in outlets) {\n         if (!context.global.winkState[type][outlets[outl].name]) context.global.winkState[type][outlets[outl].name] = {};\n        context.global.winkState[type][outlets[outl].name]=outlets[outl];\n        }\n        \n        \n        if (!!result.linked_service_id) context.global.winkState[type][key].connection = !result.invalidated_at;\n\n        if (!updateP) return;\n        if (!context.global.winkState.lastUpdates) context.global.winkState.lastUpdates = [];\n        if (type!=='groups'){\n        context.global.winkState[type][key].timestamp = new Date();\n        context.global.winkState.lastUpdates.splice(0, 0, context.global.winkState[type][key]);\n        if (context.global.winkState.lastUpdates.length > 15) context.global.winkState.lastUpdates.pop();\n        }\n        //addind special array for motion sensors to check how often they occur\n        if (type == \"sensor_pods\" && typeof (context.global.winkState[type][key].motion) !== 'undefined') {\n        context.global.winkState[type][key].timestamp= new Date();\n        if (!context.global.winkState.motionUpdates) context.global.winkState.motionUpdates=[];\n        context.global.winkState.motionUpdates.splice(0, 0, context.global.winkState[type][key]);\n        if (context.global.winkState.motionUpdates.length > 30) context.global.winkState.motionUpdates.pop();\n        }\n        \n    });\n};\n\n//global function to generate wink cmd message for various objects\n\ncontext.global.executeWinkCMD = function (winkName,type,cmd,level) {\nvar WinkCMDmsg;\n//node.warn(winkName+' '+type+' '+cmd)\nswitch (type.toLowerCase()) {\n\ncase 'lock':\nvar request=(cmd.toLowerCase() ==\"lock\" ? true:false);\nif (winkName in context.global.winkState.locks)\n{\n   WinkCMDmsg ={\n    \"url\":\"https://winkapi.quirky.com/locks/\"+context.global.winkState.locks[winkName].object_id,\n    \"method\": \"PUT\",\n    headers: {\n        \"Authorization\":\"Bearer \"+context.global.WinkToken,\n        \"Content-Type\":\"application/json\"\n    },\n    payload: {\n        \"desired_state\": {\n            \"locked\":(cmd.toLowerCase() ==\"lock\" ? true:false)\n        }\n    }\n};\n}\nbreak;\ncase 'light':\nif (winkName in context.global.winkState.light_bulbs){\n    if(context.global.winkState.light_bulbs[winkName].device_manufacturer==\"lifx\")\n    {\n        WinkCMDmsg ={\n            \"url\":\"https://api.lifx.com/v1/lights/id:\"+context.global.winkState.light_bulbs[winkName].object_id+\"/state\",\n            \"method\": \"PUT\",\n            headers: {\n                \"Authorization\": \"Bearer \"+context.global.LIFX_TOKEN,\n                \"Content-Type\":\"application/json\"\n            },\n            payload: {\n                power:(cmd.toLowerCase()==\"on\" ? \"on\":\"off\"),\n                brightness: level/100,\n                \"duration\": 1\n            }\n        }\n    }\n    else {\n WinkCMDmsg ={\n    \"url\":\"https://winkapi.quirky.com/light_bulbs/\"+context.global.winkState.light_bulbs[winkName].object_id,\n    \"method\": \"PUT\",\n    headers: {\n        \"Authorization\":\"Bearer \"+context.global.WinkToken,\n        \"Content-Type\":\"application/json\"\n    },\n    payload: {\n        \"desired_state\": {\n            \"powered\":(cmd.toLowerCase() ==\"on\" ? true:false),\n            \"brightness\": level/100\n        }\n    }\n };\n}   \n} else if(winkName in context.global.winkState.binary_switches){\n WinkCMDmsg ={\n    \"url\":\"https://winkapi.quirky.com/binary_switches/\"+context.global.winkState.binary_switches[winkName].object_id,\n    \"method\": \"PUT\",\n    headers: {\n        \"Authorization\":\"Bearer \"+context.global.WinkToken,\n        \"Content-Type\":\"application/json\"\n    },\n    payload: {\n        \"desired_state\": {\n            \"powered\":(cmd.toLowerCase() ==\"on\" ? true:false)\n        }\n    }\n};\n} else if(winkName in context.global.winkState.powerstrips && context.global.winkState.powerstrips[winkName].object_type==='outlet'){\n WinkCMDmsg ={\n    \"url\":\"https://winkapi.quirky.com/outlets/\"+context.global.winkState.powerstrips[winkName].object_id,\n    \"method\": \"PUT\",\n    headers: {\n        \"Authorization\":\"Bearer \"+context.global.WinkToken,\n        \"Content-Type\":\"application/json\"\n    },\n    payload: {\n        \"desired_state\": {\n            \"powered\":(cmd.toLowerCase() ==\"on\" ? true:false)\n        }\n    }\n};\n}\nbreak;\ncase 'group':\nif (winkName in context.global.winkState.groups){\nnode.warn(context.global.winkState.groups[winkName]);\n WinkCMDmsg ={\n    \"url\":\"https://winkapi.quirky.com/groups/\"+context.global.winkState.groups[winkName].object_id+\"/activate\",\n    \"method\": \"POST\",\n    headers: {\n        \"Authorization\":\"Bearer \"+context.global.WinkToken,\n        \"Content-Type\":\"application/json\"\n    },\n    payload: {\n        \"desired_state\": {\n            \"powered\":(cmd.toLowerCase() ==\"on\" ? true:false),\n            \"brightness\": level/100\n        }\n    }\n  };\n }\nbreak;\ncase 'shortcut':\nif (winkName in context.global.winkState.scenes){\n WinkCMDmsg ={\n    \"url\":\"https://winkapi.quirky.com/scenes/\"+context.global.winkState.scenes[winkName].object_id+\"/activate\",\n    \"method\": \"POST\",\n    headers: {\n        \"Authorization\":\"Bearer \"+context.global.WinkToken,\n        \"Content-Type\":\"application/json\"\n    }\n  };\n }\nbreak;\ndefault:\nWinkCMDmsg={url:'not defined'};\n}\n//node.warn(WinkCMDmsg.url);\nreturn WinkCMDmsg;\n};\n\n\ncontext.global.algorithm = 'aes-256-ctr',\n\ncontext.global.encrypt=function(text){\n  var cipher = context.global.CRYPTO.createCipher(context.global.algorithm,context.global.FREEBOARD_TOKEN);\n  var crypted = cipher.update(text,'utf8','hex');\n  crypted += cipher.final('hex');\n  return crypted;\n};\n \ncontext.global.decrypt=function(text){\n  var decipher = context.global.CRYPTO.createDecipher(context.global.algorithm,context.global.FREEBOARD_TOKEN);\n  var dec = decipher.update(text,'hex','utf8');\n  dec += decipher.final('utf8');\n  return dec;\n};\n\ncontext.global.getCookie=function(cname,req_cookies) {\n    var name = cname + \"=\";\n    var ca = req_cookies.split(';');\n    for(var i=0; i<ca.length; i++) {\n        var c = ca[i];\n        while (c.charAt(0)==' ') c = c.substring(1);\n        if (c.indexOf(name) === 0) return c.substring(name.length,c.length);\n    }\n};\n\n",
    "outputs": 1,
    "noerr": 0,
    "x": 415.5,
    "y": 141,
    "z": "3cc9f29d.c3360e",
    "wires": [
      []
    ]
  },
  {
    "id": "c0285d1b.3fd7a",
    "type": "function",
    "name": "",
    "func": "delete context.global.winkState;\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 316,
    "y": 664,
    "z": "3cc9f29d.c3360e",
    "wires": [
      []
    ]
  },
  {
    "id": "b0c69722.4f3968",
    "type": "inject",
    "name": "",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "repeat": "",
    "crontab": "",
    "once": false,
    "x": 155,
    "y": 664,
    "z": "3cc9f29d.c3360e",
    "wires": [
      [
        "c0285d1b.3fd7a"
      ]
    ]
  },
  {
    "id": "4df15177.b20eb",
    "type": "inject",
    "name": "",
    "topic": "",
    "payload": "",
    "payloadType": "none",
    "repeat": "82800",
    "crontab": "",
    "once": true,
    "x": 654.5,
    "y": 339,
    "z": "3cc9f29d.c3360e",
    "wires": [
      [
        "e45ee480.1ba118"
      ]
    ]
  },
  {
    "id": "9430af10.6bcf5",
    "type": "http request",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 583.5,
    "y": 80,
    "z": "3cc9f29d.c3360e",
    "wires": [
      [
        "2ded6e65.d21292"
      ]
    ]
  },
  {
    "id": "e211fb84.1dee08",
    "type": "inject",
    "name": "",
    "topic": "",
    "payload": "",
    "payloadType": "none",
    "repeat": "86400",
    "crontab": "",
    "once": true,
    "x": 106.5,
    "y": 85,
    "z": "3cc9f29d.c3360e",
    "wires": [
      [
        "acfa619b.5305a",
        "19d5c47.fe62a3c"
      ]
    ]
  },
  {
    "id": "f212cbe4.0ded38",
    "type": "function",
    "name": "Get OAuth Tocken",
    "func": "var uid=context.global.WinkUser.uid;\nvar pwd=context.global.WinkUser.pwd;\nvar newMsg ={\n    \"url\":\"https://winkapi.quirky.com/oauth2/token\",\n    \"method\": \"POST\",\n    headers: {\n        \"Content-Type\":\"application/json\"\n    },\n    payload: {\n        \"client_id\": \"7243d8212e040d75dada47ce68a04c24\",\n        \"client_secret\": \"7d597e496afd6196db8d8738829f5a09\",\n        \"username\": uid,\n        \"password\": pwd,\n        \"grant_type\": \"password\"\n    }\n}\nreturn newMsg;",
    "outputs": 1,
    "noerr": 0,
    "x": 412.5,
    "y": 96,
    "z": "3cc9f29d.c3360e",
    "wires": [
      [
        "9430af10.6bcf5"
      ]
    ]
  },
  {
    "id": "2ded6e65.d21292",
    "type": "function",
    "name": "DefineGlobalTocken",
    "func": "// sample function that stores wink token in a global variable so other api calls\n//can use that\ncontext.global.WinkToken=msg.payload.data.access_token;\nnode.log(context.global.WinkToken);\nvar msg ={ \"payload\":\"Done\"}\nreturn msg;",
    "outputs": 1,
    "x": 774.5,
    "y": 86,
    "z": "3cc9f29d.c3360e",
    "wires": [
      [
        "cc6f8a71.339078"
      ]
    ]
  },
  {
    "id": "cc6f8a71.339078",
    "type": "function",
    "name": "Prepare HTTPS requests by device type",
    "func": "var newMsg1 ={\n    \"url\":\"https://winkapi.quirky.com/users/me/wink_devices\",\n    \"method\": \"GET\",\n    headers: {\n        \"Authorization\":\"Bearer \"+context.global.WinkToken,\n        \"User-Agent\":\"Manufacturer/Darwin node/0.10.30 Wink/999.99.9\"\n    }\n}\nvar newMsg2 ={\n    \"url\":\"https://winkapi.quirky.com/users/me/linked_services\",\n    \"method\": \"GET\",\n    headers: {\n        \"Authorization\":\"Bearer \"+context.global.WinkToken\n       // \"User-Agent\":\"Manufacturer/Darwin node/0.10.30 Wink/3.1.0\"\n }\n\n}\n\nvar newMsg3 ={\n    \"url\":\"https://winkapi.quirky.com/users/me/groups\",\n    \"method\": \"GET\",\n    headers: {\n        \"Authorization\":\"Bearer \"+context.global.WinkToken,\n        \"User-Agent\":\"Manufacturer/Darwin node/0.10.30 Wink/999.99.9\"\n }\n\n}\n\nvar newMsg4 ={\n    \"url\":\"https://winkapi.quirky.com/users/me/scenes\",\n    \"method\": \"GET\",\n    headers: {\n        \"Authorization\":\"Bearer \"+context.global.WinkToken,\n        \"User-Agent\":\"Manufacturer/Darwin node/0.10.30 Wink/999.99.9\"\n  }\n}\n\nreturn [newMsg1,newMsg2,newMsg3,newMsg4];\n//return [newMsg1,newMsg2,newMsg3,newMsg4,newMsg5,newMsg6,newMsg7,newMsg8,newMsg9,newMsg10,newMsg11];\n",
    "outputs": "4",
    "noerr": 0,
    "x": 1040.5,
    "y": 93,
    "z": "3cc9f29d.c3360e",
    "wires": [
      [
        "3e54969f.c1ab6a"
      ],
      [
        "4b565cad.b4a9a4"
      ],
      [
        "7ab4dcc3.854b24"
      ],
      [
        "2ce46ae1.d31b96"
      ]
    ]
  },
  {
    "id": "3e54969f.c1ab6a",
    "type": "http request",
    "name": "GetWDevices",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 1362.5,
    "y": 45,
    "z": "3cc9f29d.c3360e",
    "wires": [
      [
        "ed3b1437.12c4e8"
      ]
    ]
  },
  {
    "id": "f856854f.07a978",
    "type": "http in",
    "name": "",
    "url": "/red/getGlobalDataJSon",
    "method": "get",
    "x": 134,
    "y": 225,
    "z": "3cc9f29d.c3360e",
    "wires": [
      [
        "4a19725e.b5e68c"
      ]
    ]
  },
  {
    "id": "4a19725e.b5e68c",
    "type": "function",
    "name": "Throw Wink Data",
    "func": "if(msg.req.headers.authorization && msg.req.headers.authorization==\"Bearer \"+context.global.FREEBOARD_TOKEN){\nmsg.payload.WinkData=context.global.winkState;\nmsg.payload.WinkCapbs=context.global.winkDevCap;\nmsg.payload.WeatherData=context.global.Weather;\nmsg.payload.Weather=context.global.Weather;\n//msg.payload.WinkSubscriptions=context.global.WinkSubscriptions;\nmsg.payload.Presence=context.global.checkPresence();\nmsg.payload.PresenceDetail=context.global.Presence;\nmsg.payload.PresenceHistory=context.global.PresenceHistory;\n//msg.payload.foscamP=context.global.FosCam;\n//msg.payload.SamsungP=context.global.SamsungCam;\n//msg.payload.DlinkCam=context.global.DlinkCam;\n//msg.payload.VCAP_SERVICES=context.global.VCAP_SERVICES\n//msg.payload.ImageArchive=context.global.ImageArchive\n//msg.payload.camera_motion=context.global.camera_motion\nmsg.res.statusCode=\"200\";\nvar Etag=\"\";\nif ('CRYPTO' in context.global){\n    Etag=context.global.CRYPTO.createHash(\"md5\").update(JSON.stringify(msg.payload),\"utf8\").digest(\"hex\");\n    msg.res.set({\n       'ETag': Etag,\n       'Content-Type': 'application/json'\n    });\n}\nreturn msg;\n}\nelse\n{\n    //msg.payload=\"Not Authorized\";\n   msg.res.send(\"403\",\"Forbidden\");\n  return;\n}\n",
    "outputs": 1,
    "noerr": 0,
    "x": 411.4999694824219,
    "y": 226,
    "z": "3cc9f29d.c3360e",
    "wires": [
      [
        "f11013c1.0eeff"
      ]
    ]
  },
  {
    "id": "f11013c1.0eeff",
    "type": "http response",
    "name": "",
    "x": 636.5,
    "y": 227,
    "z": "3cc9f29d.c3360e",
    "wires": []
  },
  {
    "id": "942eaad.f6bd158",
    "type": "http in",
    "name": "",
    "url": "/red/wink/subscribtions",
    "method": "get",
    "x": 144.5,
    "y": 369,
    "z": "3cc9f29d.c3360e",
    "wires": [
      [
        "48ae9c19.b75164"
      ]
    ]
  },
  {
    "id": "48ae9c19.b75164",
    "type": "function",
    "name": "Wink Subscription resonse",
    "func": "if (msg.payload[\"hub.mode\"]==\"subscribe\")\n{\n    msg.res.send(200,msg.payload[\"hub.challenge\"]);\n}\nelse\n{\n    msg.res.send(400,\"Bad Request darling\");\n}\nreturn msg;",
    "outputs": 1,
    "x": 441.49998474121094,
    "y": 370,
    "z": "3cc9f29d.c3360e",
    "wires": [
      []
    ]
  },
  {
    "id": "d1509aa2.2eaf68",
    "type": "http in",
    "name": "",
    "url": "/red/wink/subscribtions",
    "method": "post",
    "x": 146.5,
    "y": 451.00006103515625,
    "z": "3cc9f29d.c3360e",
    "wires": [
      [
        "f4caa803.0b3558",
        "5021d9.ffafde28"
      ]
    ]
  },
  {
    "id": "e45ee480.1ba118",
    "type": "delay",
    "name": "",
    "pauseType": "delay",
    "timeout": "30",
    "timeoutUnits": "seconds",
    "rate": "1",
    "rateUnits": "second",
    "randomFirst": "1",
    "randomLast": "5",
    "randomUnits": "seconds",
    "drop": false,
    "x": 810.5,
    "y": 338,
    "z": "3cc9f29d.c3360e",
    "wires": [
      [
        "df90fba.f206f08"
      ]
    ]
  },
  {
    "id": "df90fba.f206f08",
    "type": "function",
    "name": "Prepare Wink devices subscription request",
    "func": "var baseUrl = \"https://winkapi.quirky.com/\";\nvar callbackUrl=context.global.BlueMixUrlBase+\"/red/wink/subscribtions\";\n   for (var winkDevice in context.global.winkState)\n    {\n        if (winkDevice!=\"linked_services\")\n        {\n            var deviceUrl=baseUrl+winkDevice;\n            for (var winkDeviceName in context.global.winkState[winkDevice])\n            {\n                deviceId=context.global.winkState[winkDevice][winkDeviceName].object_id;\n                node.warn(winkDeviceName+\" \"+deviceId);\n                var newMsg ={\n                    \"url\":baseUrl+\"/\"+winkDevice+\"/\"+deviceId+\"/subscriptions\",\n                    \"method\": \"POST\",\n                    headers: {\n                        \"Authorization\":\"Bearer \"+context.global.WinkToken,\n                        \"User-Agent\":\"Manufacturer/Darwin node/0.10.30 Wink/999.99.9\",\n                        \"Content-Type\":\"application/json\"\n                    },\n                    payload: {\n                        \"callback\": callbackUrl\n                    }\n                };\n                node.send(newMsg);\n            }\n        }\n    }\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 1067.5001678466797,
    "y": 338,
    "z": "3cc9f29d.c3360e",
    "wires": [
      [
        "55d29430.aa2d6c"
      ]
    ]
  },
  {
    "id": "55d29430.aa2d6c",
    "type": "http request",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 1335.5000457763672,
    "y": 337,
    "z": "3cc9f29d.c3360e",
    "wires": [
      [
        "5014d08f.afeb3"
      ]
    ]
  },
  {
    "id": "5014d08f.afeb3",
    "type": "function",
    "name": "CheckResposeCode",
    "func": "if (typeof context.global.WinkSubscriptions === 'undefined')\n{\n    context.global.WinkSubscriptions = {};\n}\nif (msg.statusCode==202)\n{\n    node.warn(\"Subscription ID: \"+msg.payload.data.subscription_id);\n    context.global.WinkSubscriptions[msg.payload.data.subscription_id]={\n        \"subscription_id\": msg.payload.data.subscription_id,\n        \"url_base\":msg.payload.data.topic,\n        \"callback\":msg.payload.data.callback\n    }\n}\nelse\n{\n    node.warn(\"Subscription issue. Status: \"+msg.statusCode);\n}\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 1493.5000457763672,
    "y": 425.0000305175781,
    "z": "3cc9f29d.c3360e",
    "wires": [
      []
    ]
  },
  {
    "id": "f8344e3e.07cbb",
    "type": "comment",
    "name": "Section for status  subscription---------------------------------------------------------------------------------------------------------------------------------",
    "info": "",
    "x": 447.5,
    "y": 302,
    "z": "3cc9f29d.c3360e",
    "wires": []
  },
  {
    "id": "f45f6d14.0ba09",
    "type": "comment",
    "name": "Initialize section-----------------------------------------------------------------------------------------------------------",
    "info": "",
    "x": 359.5,
    "y": 20,
    "z": "3cc9f29d.c3360e",
    "wires": []
  },
  {
    "id": "3f1a2957.c0e5d6",
    "type": "comment",
    "name": "Weather-------------------------------------------------------------------------------------------------------------------------------",
    "info": "",
    "x": 375.5,
    "y": 878.0000610351562,
    "z": "3cc9f29d.c3360e",
    "wires": []
  },
  {
    "id": "7c672237.8398dc",
    "type": "debug",
    "name": "",
    "active": false,
    "console": "false",
    "complete": "false",
    "x": 1064.5,
    "y": 967.0001220703125,
    "z": "3cc9f29d.c3360e",
    "wires": []
  },
  {
    "id": "af9e0fe1.5061f",
    "type": "http request",
    "name": "Get Weather",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 441.5,
    "y": 965,
    "z": "3cc9f29d.c3360e",
    "wires": [
      [
        "447328b9.bb8cd8"
      ]
    ]
  },
  {
    "id": "cc1d2696.33e2d8",
    "type": "inject",
    "name": "",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "repeat": "600",
    "crontab": "",
    "once": true,
    "x": 100.5,
    "y": 921,
    "z": "3cc9f29d.c3360e",
    "wires": [
      [
        "d2c63c7b.2d39c"
      ]
    ]
  },
  {
    "id": "d2c63c7b.2d39c",
    "type": "function",
    "name": "",
    "func": "var newMsg ={\n        \"url\":\"https://api.forecast.io/forecast/\"+context.global.forecastIoApiKey+\"/\"+context.global.HomeLocation.lat+\",\"+context.global.HomeLocation.lon,\n        \"method\": \"GET\"\n}\nreturn newMsg;",
    "outputs": 1,
    "noerr": 0,
    "x": 256.5,
    "y": 965,
    "z": "3cc9f29d.c3360e",
    "wires": [
      [
        "af9e0fe1.5061f"
      ]
    ]
  },
  {
    "id": "ed3b1437.12c4e8",
    "type": "function",
    "name": "GetDevices",
    "func": "context.global.getWinkState(msg.payload);\ndelete context.global.winkState._msgid;\nif (\"cameras\" in context.global.winkState){\n    for (var key in context.global.winkState.cameras){\n        if (context.global.winkState.cameras[key].manufacturer_device_model =='dropcam' || context.global.winkState.cameras[key].manufacturer_device_model =='dropcam_pro'){\n            var newMsg1 ={\n                \"url\":context.global.BlueMixUrlBase+'/red/retrieve_activities?camera_name='+key,\n                \"method\": \"GET\",\n                headers: {\n                    \"Authorization\":\"Bearer \"+context.global.FREEBOARD_TOKEN\n                }\n            }\n            node.send(newMsg1);\n        }\n    }\n}\nnode.warn(\"Device import completed\");\nreturn;\n",
    "outputs": 1,
    "noerr": 0,
    "x": 1577.5000457763672,
    "y": 39.5,
    "z": "3cc9f29d.c3360e",
    "wires": [
      [
        "d91eb0aa.26e15"
      ]
    ]
  },
  {
    "id": "4b565cad.b4a9a4",
    "type": "http request",
    "name": "GetWServices",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 1366.5,
    "y": 86.5,
    "z": "3cc9f29d.c3360e",
    "wires": [
      [
        "24385e5c.dbc7a2"
      ]
    ]
  },
  {
    "id": "24385e5c.dbc7a2",
    "type": "function",
    "name": "GetServices",
    "func": "context.global.getWinkState(msg.payload);\ndelete context.global.winkState._msgid;\nreturn;\n",
    "outputs": 1,
    "x": 1578.5,
    "y": 85.5,
    "z": "3cc9f29d.c3360e",
    "wires": [
      []
    ]
  },
  {
    "id": "f4caa803.0b3558",
    "type": "function",
    "name": "UpdateDevices",
    "func": "context.global.getWinkState(msg.payload);\ndelete context.global.winkState._msgid;\nmsg.res.statusCode=\"200\";\nreturn msg;\n",
    "outputs": 1,
    "noerr": 0,
    "x": 399.5,
    "y": 452.5,
    "z": "3cc9f29d.c3360e",
    "wires": [
      [
        "d96d9303.26927",
        "f83901f9.07c7",
        "6d762b11.9289d4",
        "5fff8a82.a00074",
        "17af079d.e850f8",
        "882280a3.77dd8",
        "9d90e57a.626f18",
        "e1b7399c.1e48c8"
      ]
    ]
  },
  {
    "id": "74c2ce75.8b3d3",
    "type": "comment",
    "name": "Section for web services---------------------------------------------------------------------------------------------------------------------------------",
    "info": "",
    "x": 434,
    "y": 182.5,
    "z": "3cc9f29d.c3360e",
    "wires": []
  },
  {
    "id": "7ab4dcc3.854b24",
    "type": "http request",
    "name": "GetWGroups",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 1359.5,
    "y": 128.5,
    "z": "3cc9f29d.c3360e",
    "wires": [
      [
        "1177b071.ee885"
      ]
    ]
  },
  {
    "id": "1177b071.ee885",
    "type": "function",
    "name": "GetGroups",
    "func": "context.global.getWinkState(msg.payload);\ndelete context.global.winkState._msgid;\nreturn;\n",
    "outputs": 1,
    "x": 1571.5000457763672,
    "y": 128.5,
    "z": "3cc9f29d.c3360e",
    "wires": [
      []
    ]
  },
  {
    "id": "2ce46ae1.d31b96",
    "type": "http request",
    "name": "GetWScenes",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 1357.5,
    "y": 171.5,
    "z": "3cc9f29d.c3360e",
    "wires": [
      [
        "a6c6c9d1.593938"
      ]
    ]
  },
  {
    "id": "a6c6c9d1.593938",
    "type": "function",
    "name": "GetScenes",
    "func": "context.global.getWinkState(msg.payload);\ndelete context.global.winkState._msgid;\nreturn;\n",
    "outputs": 1,
    "x": 1566.5000457763672,
    "y": 170.5,
    "z": "3cc9f29d.c3360e",
    "wires": [
      []
    ]
  },
  {
    "id": "d96d9303.26927",
    "type": "function",
    "name": "Send message to IFTTT",
    "func": "if (context.global.ifttt){\nvar WinkEvent=\"WinkEvent\"\nvar extra_param=\"\"\nvar Event_desc=\"\"\nif (msg.payload.model_name==\"Motion Sensor\") \n{\n    Event_desc= (msg.payload.last_reading.motion ? \"motion detected\":\"no motion\")\n}\nif (msg.payload.model_name==\"Tripper\") \n{\n    Event_desc= (msg.payload.last_reading.opened ? \"Opened\":\"Closed\")\n}\n\nif ('last_reading' in msg.payload && 'locked' in msg.payload.last_reading) \n{ \n    Event_desc= (msg.payload.last_reading.locked ? \"Locked\":\"Unlocked\")\n}\n\nif (msg.payload.object_type==\"binary_switch\" && (!('powered' in msg.payload.desired_state) || msg.payload.desired_state.powered===false) )\n{\n    Event_desc= (msg.payload.last_reading.powered ? \"On\":\"Off\")\n}\n\nif (msg.payload.object_type==\"garage_doors\")\n{\n    Event_desc= (msg.payload.last_reading.garage_doors==\"0\" ? \"Closed\":\"Opened\")\n}\n\nif (msg.payload.object_type==\"light_bulb\" && !('powered' in msg.payload.desired_state))\n{\n    Event_desc= (msg.payload.last_reading.powered ? \"On\":\"Off\")\n    extra_param=(msg.payload.last_reading.powered ? msg.payload.last_reading.brightness*100 : 0)\n}\nif ('liquid_detected' in msg.payload)\n{\n    Event_desc= (msg.payload.last_reading.liquid_detected ? \"Water detected\":\"No water detected\")\n}\n\nif (msg.payload.object_type ==\"propane_tanks\")\n{\n    Event_desc= (\"Propane level - \"+msg.payload.last_reading.remaining)\n}\n\nif (msg.payload.object_type ==\"powerstrips\")\n{\n    Event_Desc = msg.payload.outlets[0].name+\" \"+ (msg.payload.outlets[0].powered ? \"On, \":\"Off, \")+msg.payload.outlets[0].name+\" \"+(msg.payload.outlets[1].powered ? \"On\":\"Off\")\n}\n\nif (Event_desc!==\"\")\n{\n var newMsg ={\n                    \"url\":\"https://maker.ifttt.com/trigger/\"+WinkEvent+\"/with/key/\"+context.global.IFTTT_TOKEN,\n                    \"method\": \"POST\",\n                    headers: \n                    {\n                        \"Content-Type\":\"application/json\"\n                    },\n                    payload: \n                    {\"value1\":msg.payload.name,\"value2\":Event_desc,\"value3\":extra_param}\n            }\nnode.send(newMsg);\n}\n}\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 730.4999847412109,
    "y": 534.4999694824219,
    "z": "3cc9f29d.c3360e",
    "wires": [
      [
        "68b76e13.97489"
      ]
    ]
  },
  {
    "id": "68b76e13.97489",
    "type": "http request",
    "name": "",
    "method": "use",
    "ret": "txt",
    "url": "",
    "x": 940.5,
    "y": 534.5,
    "z": "3cc9f29d.c3360e",
    "wires": [
      []
    ]
  },
  {
    "id": "447328b9.bb8cd8",
    "type": "function",
    "name": "Get current weather",
    "func": "var pct = function(value) {\n    return ((value > 1.0 ? value : value * 100).toFixed(0) + '%')\n}\nvar dual_temp = function (value) {\n    return (typeof value === 'number' ? (value.toFixed(1) + 'F / ' + ((value -32) / 1.8).toFixed(1) + 'C') : '')\n}\n\nvar month = [];\nmonth[0] = \"January\";\nmonth[1] = \"February\";\nmonth[2] = \"March\";\nmonth[3] = \"April\";\nmonth[4] = \"May\";\nmonth[5] = \"June\";\nmonth[6] = \"July\";\nmonth[7] = \"August\";\nmonth[8] = \"September\";\nmonth[9] = \"October\";\nmonth[10] = \"November\";\nmonth[11] = \"December\";\n\nvar weekday = [];\nweekday[0]=  \"Sunday\";\nweekday[1] = \"Monday\";\nweekday[2] = \"Tuesday\";\nweekday[3] = \"Wednesday\";\nweekday[4] = \"Thursday\";\nweekday[5] = \"Friday\";\nweekday[6] = \"Saturday\";\n\nvar currDate= new Date();\nvar currHours=currDate.getHours();\nvar currMins=currDate.getMinutes();\nvar currOffset=currDate.getTimezoneOffset()*-1/60;\nif(msg.payload.currently)\n{\ncontext.global.Weather.Offset = (currOffset!=msg.payload.offset ? msg.payload.offset : 0);\ncontext.global.Weather.CloudCover=Math.round(msg.payload.currently.cloudCover*100);\ncontext.global.Weather.WeatherSummary=msg.payload.currently.summary;\n\nvar lDate=new Date(Date.now()+context.global.Weather.Offset*3600000);\nvar Month = month[lDate.getMonth()];\nvar weekDay = weekday[lDate.getDay()];\nvar monthDay = lDate.getDate();\n\nvar date = new Date(msg.payload.currently.time*1000);\nvar hours = date.getHours();\nvar minutes = date.getMinutes();\n//if (currHours==hours){context.global.Weather.Offset=0}\nvar date = new Date(msg.payload.daily.data[0].sunsetTime*1000);\nvar hours = date.getHours();\nvar minutes =date.getMinutes();\ncontext.global.Weather.SunsetHour=hours+context.global.Weather.Offset;\nif (context.global.Weather.SunsetHour<0)\n {\n     context.global.Weather.SunsetHour=24+context.global.Weather.SunsetHour;\n }\ncontext.global.Weather.SunsetMin=minutes;\ncontext.global.Weather.SunsetMinW=(minutes < 10 ? '0'+minutes : minutes);\nvar date = new Date(msg.payload.daily.data[0].sunriseTime*1000);\nvar hours = date.getHours();\nvar minutes =date.getMinutes();\ncontext.global.Weather.SunriseHour=hours+context.global.Weather.Offset;\ncontext.global.Weather.SunriseMin=minutes;\ncontext.global.Weather.SunriseMinW=(minutes < 10 ? '0'+minutes : minutes);\ncontext.global.Weather.outsideTemp=msg.payload.currently.temperature;\ncontext.global.Weather.PrecipationPbb=msg.payload.currently.precipProbability;\ncontext.global.Weather.HumidityOutside=msg.payload.currently.humidity;\ncontext.global.Weather.DateName=' '+weekDay+', '+Month+' '+monthDay;\n\n\ncurrHours=currHours+context.global.Weather.Offset;\nif (currHours<0)\n {\n     currHours=24+currHours;\n }\n //node.warn(\"time \"+currHours+\":\"+currMins);\nif ((currHours > context.global.Weather.SunriseHour && currHours < context.global.Weather.SunsetHour) || (currHours==context.global.Weather.SunsetHour && currMins <context.global.Weather.SunsetMin))\n{\n    var timeFrame=\"DAY\";\n}\nelse {\n    var timeFrame=\"NIGHT\";\n}\ncontext.global.Weather.currently=msg.payload.currently;\ncontext.global.Weather.timeframe=timeFrame;\ncontext.global.Weather.currently.dual_temp=dual_temp(context.global.Weather.currently.temperature);\ncontext.global.Weather.currently.humidity_pct=pct(context.global.Weather.currently.humidity);\ncontext.global.Weather.currently.clouds_pct=pct(context.global.Weather.currently.cloudCover);\ncontext.global.Weather.sun_data='Sunrise - Sunset: '+context.global.Weather.SunriseHour+':'+context.global.Weather.SunriseMinW+' - '+context.global.Weather.SunsetHour+':'+context.global.Weather.SunsetMinW\nvar icon=context.global.Weather.currently.icon;\nif(icon == 'clear-day') { context.global.Weather.currently.web_icon=\"wi-day-sunny\" }\nif(icon == 'clear-night') { context.global.Weather.currently.web_icon=\"wi-night-clear\" }\nif(icon == 'rain') { context.global.Weather.currently.web_icon=\"wi-rain\" }\nif(icon == 'snow') { context.global.Weather.currently.web_icon=\"wi-snow\" }\nif(icon == 'sleet') { context.global.Weather.currently.web_icon=\"wi-day-sleet\" }\nif(icon == 'wind') { context.global.Weather.currently.web_icon=\"wi-day-windy\" }\nif(icon == 'fog') { context.global.Weather.currently.web_icon=\"wi-fog\" }\nif(icon == 'cloudy') { context.global.Weather.currently.web_icon=\"wi-cloudy\" }\nif(icon == 'partly-cloudy-day') { context.global.Weather.currently.web_icon=\"wi-day-cloudy\" }\nif(icon == 'partly-cloudy-night') { context.global.Weather.currently.web_icon=\"wi-night-cloudy\" }\nif(icon == 'hail') { context.global.Weather.currently.web_icon=\"wi-hail\" }\nif(icon == 'thunderstorm') { context.global.Weather.currently.web_icon=\"wi-thunderstorm\" }\nif(icon == 'tornado') { context.global.Weather.currently.web_icon=\"wi-meteor\" }    \n}\nnewMsg = {\n    payload: {\n     weather:context.global.Weather\n    }\n};\nreturn newMsg;",
    "outputs": 1,
    "noerr": 0,
    "x": 852.5,
    "y": 968.5,
    "z": "3cc9f29d.c3360e",
    "wires": [
      [
        "7c672237.8398dc",
        "947b7e47.6b848"
      ]
    ]
  },
  {
    "id": "f83901f9.07c7",
    "type": "function",
    "name": "Switch t-stat back to home mode if motion is detected",
    "func": "var canControl = (typeof(context.global.motionAdjustTstat)!=='undefined' ? context.global.motionAdjustTstat : 'true');\nif (msg.payload.object_type =='thermostat' && ((\"users_away\" in msg.payload.last_reading) && typeof(msg.payload.last_reading.users_away)!=='undefined' && msg.payload.last_reading.users_away) && canControl){\n    if (context.global.winkState.groups['.sensors'].motion.or || context.global.checkPresence()){\n    var newMsg ={\n    \"url\":\"https://winkapi.quirky.com/thermostats/\"+msg.payload.object_id,\n    \"method\": \"PUT\",\n    headers: {\n        \"Authorization\":\"Bearer \"+context.global.WinkToken,\n        \"Content-Type\":\"application/json\"\n    },\n    payload: {\n        \"desired_state\": {\n            \"powered\":true,\n            \"users_away\":false\n                }\n            }\n        };\n    node.send(newMsg);\n    }\n}\nif ((\"last_reading\" in msg.payload) && (\"motion\" in msg.payload.last_reading) && typeof(msg.payload.last_reading.motion!=='undefined') && msg.payload.last_reading.motion && canControl){\n    for (var key in context.global.winkState.thermostats){\n        if ((\"users_away\" in context.global.winkState.thermostats[key]) && typeof(context.global.winkState.thermostats[key].users_away)!=='undefined' && context.global.winkState.thermostats[key].users_away){\n               var newMsg ={\n                \"url\":\"https://winkapi.quirky.com/thermostats/\"+context.global.winkState.thermostats[key].object_id,\n                \"method\": \"PUT\",\n                headers: {\n                    \"Authorization\":\"Bearer \"+context.global.WinkToken,\n                    \"Content-Type\":\"application/json\"\n                },\n                payload: {\n                    \"desired_state\": {\n                     \"powered\":true,\n                    \"users_away\":false\n                }\n            }\n        };\n    node.send(newMsg); \n    }\n  }\n}\n\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 815.8958129882812,
    "y": 580.111083984375,
    "z": "3cc9f29d.c3360e",
    "wires": [
      [
        "5152f61a.aead08"
      ]
    ]
  },
  {
    "id": "5152f61a.aead08",
    "type": "http request",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 1126.8959350585938,
    "y": 580.111083984375,
    "z": "3cc9f29d.c3360e",
    "wires": [
      []
    ]
  },
  {
    "id": "a18691c6.5e797",
    "type": "function",
    "name": "",
    "func": "if (typeof context.global.InitialStateKey !=='undefined'){\ncontext.global.InitialStateBucket=\"WinkDataISN\"\nvar newMsg={\n  method: 'POST',\n  url: 'https://groker.initialstate.com/api/buckets',\n  headers: {\n    'Content-Type': 'application/json',\n    'X-IS-AccessKey': context.global.InitialStateKey,\n    'Accept-Version': '~0'\n  },\n    payload: \n    {\n    \"bucketKey\": context.global.InitialStateBucket,\n    \"bucketName\": \"Wink Data Node Red\"\n}\n}\nnode.send(newMsg);\n}\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 324.89581298828125,
    "y": 1085.3333740234375,
    "z": "3cc9f29d.c3360e",
    "wires": [
      [
        "34daa2ec.cb255e"
      ]
    ]
  },
  {
    "id": "21f3b509.de0c4a",
    "type": "inject",
    "name": "",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "repeat": "",
    "crontab": "",
    "once": true,
    "x": 125.89579772949219,
    "y": 1086.3333740234375,
    "z": "3cc9f29d.c3360e",
    "wires": [
      [
        "a18691c6.5e797"
      ]
    ]
  },
  {
    "id": "34daa2ec.cb255e",
    "type": "http request",
    "name": "",
    "method": "use",
    "ret": "txt",
    "url": "",
    "x": 523,
    "y": 1086.4444580078125,
    "z": "3cc9f29d.c3360e",
    "wires": [
      [
        "5b03f8eb.a4fc08"
      ]
    ]
  },
  {
    "id": "5b03f8eb.a4fc08",
    "type": "debug",
    "name": "",
    "active": false,
    "console": "false",
    "complete": "true",
    "x": 708,
    "y": 1085.4444885253906,
    "z": "3cc9f29d.c3360e",
    "wires": []
  },
  {
    "id": "fbd4a44a.042b58",
    "type": "comment",
    "name": "IS State bucket initialization -------------------------------------------------------------------------------------------------------------------------------",
    "info": "modfy bluemix-settings.json and add following line:\n\ncontext.global.InitialStateKey=\"<your initial state api key>\"",
    "x": 460.5,
    "y": 1034,
    "z": "3cc9f29d.c3360e",
    "wires": []
  },
  {
    "id": "46218ec4.b9de7",
    "type": "http request",
    "name": "",
    "method": "use",
    "ret": "txt",
    "url": "",
    "x": 934.8957977294922,
    "y": 485.888916015625,
    "z": "3cc9f29d.c3360e",
    "wires": [
      []
    ]
  },
  {
    "id": "6d762b11.9289d4",
    "type": "function",
    "name": "Is State",
    "func": "if (typeof context.global.InitialStateKey !=='undefined'){\nvar keyName;\nvar keyValue;\nvar winkObjectType=(msg.payload.object_type=='binary_switch' ? msg.payload.object_type+'es' : msg.payload.object_type+'s')\nvar pct = function(value) {\n    return ((value > 1.0 ? value : value * 100).toFixed(0) + '%')\n}\nvar dual_temp = function (value) {\n    return (typeof value === 'number' ? (value.toFixed(1) + 'C / ' + ((value * 1.8) + 32).toFixed(1) + 'F') : '')\n}\n\nvar dollars = function (value) {\n    return (typeof value === 'number' ? (value / 100).toFixed(2) : '')\n}\n\nvar GenValueText = function (property,value){\n    text =  { co_detected     : (value ? 'CO DETECTED'     : '')\n            , fault           : (value ? 'FAULT DETECTED'  : '')\n            , liquid_detected : (value ? 'LEAK DETECTED'   : '')\n            , locked          : (value ? 'LOCKED'          : 'UNLOCKED')\n            , loudness        : (value ? 'LOUD'            : '')\n            , noise           : (value ? 'NOISY'           : '')\n            , motion          : (value ? 'MOTION'          : '')\n            , opened          : (value ? 'OPEN'            : 'CLOSED')\n            , presence        : (value ? 'PRESENCE'        : '')\n            , smoke_detected  : (value ? 'SMOKE DETECTED'  : '')\n            , tamper_detected : (value ? 'TAMPER DETECTED' : '')\n            , vibration       : (value ? 'VIBRATION'       : '')\n\n            , battery         : pct(value)\n            , brightness      : pct(value)\n            , co_severity     : pct(value)\n            , humidity        : pct(value)\n            , smoke_severity  : pct(value)\n\n            , remaining       : pct(value)\n            , temperature     : value\n            }[property]\n    if (text === '') text = 'OK'\n    return text;\n}\n\nvar sendMsg = function(key,value){\n    var newMsg={\n  method: 'POST',\n  url: 'https://groker.initialstate.com/api/events',\n  headers: {\n    \"Content-Type\": \"application/json\",\n    \"X-IS-AccessKey\": context.global.InitialStateKey,\n    \"X-IS-BucketKey\": context.global.InitialStateBucket,\n    \"Accept-Version\": '~0'\n  },\n    payload: \n    {\n    \"key\": key,\n    \"value\":value\n}\n}\nnode.send(newMsg);\n}\n//node.warn(winkObjectType)\n//node.warn(msg.payload.name)\nswitch (winkObjectType){\n    case 'binary_switches':\n        if((!('powered' in msg.payload.desired_state) || msg.payload.desired_state.powered===false)){\n        keyName=msg.payload.name+' Brightness';\n        keyValue=(msg.payload.last_reading.powered ? 100: 0);\n        sendMsg(keyName,keyValue);\n        }\n        break;\n    case 'light_bulbs':\n        if(!('powered' in msg.payload.desired_state)){\n        keyName=msg.payload.name+' Brightness';\n        keyValue=(msg.payload.last_reading.powered ? pct(msg.payload.last_reading.brightness) : 0);\n        sendMsg(keyName,keyValue);\n        }\n        break;\n    case 'locks':\n        keyName=msg.payload.name+' Status';\n        keyValue= GenValueText('locked',msg.payload.last_reading.locked);\n        sendMsg(keyName,keyValue);\n        break;\n    case 'thermostats':\n        keyName=msg.payload.name+' Temperature';\n        keyValue=msg.payload.last_reading.temperature;\n        sendMsg(keyName,keyValue);\n        break;\n case 'sensor_pods':\n        for (var i=0; i< context.global.winkDevCap[msg.payload.name].sensor_types.length; i++){\n        sensor_type=context.global.winkDevCap[msg.payload.name].sensor_types[i].field;\n        keyName=msg.payload.name+' '+context.global.winkDevCap[msg.payload.name].sensor_types[i].field.replace(\"_\",\" \");\n        keyValue=GenValueText(context.global.winkDevCap[msg.payload.name].sensor_types[i].field,context.global.winkState.sensor_pods[msg.payload.name][sensor_type]);\n        sendMsg(keyName,keyValue);\n        }\n        break;\n    case 'propane_tanks':\n        keyName=msg.payload.name+' Propane';\n        keyValue= GenValueText('remaining',msg.payload.last_reading.remaining);\n        sendMsg(keyName,keyValue);\n        break;\n        \n    case 'cameras':\n        node.warn('camera subscription event '+msg.payload.last_reading.motion)\n        keyName=msg.payload.name+' Motion';\n        keyValue= GenValueText('motion',msg.payload.last_reading.motion);\n        sendMsg(keyName,keyValue);\n        break;    \n}\n\n}\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 675.7916107177734,
    "y": 486.7778015136719,
    "z": "3cc9f29d.c3360e",
    "wires": [
      [
        "46218ec4.b9de7"
      ]
    ]
  },
  {
    "id": "5fff8a82.a00074",
    "type": "http response",
    "name": "",
    "x": 658.8958129882812,
    "y": 382.8888854980469,
    "z": "3cc9f29d.c3360e",
    "wires": []
  },
  {
    "id": "17af079d.e850f8",
    "type": "function",
    "name": "Snapshots",
    "func": "if(context.global.CloudantBkUP && (msg.payload.object_type=='camera' || msg.payload.object_type=='sensor_pod') && ('motion' in msg.payload.last_reading && msg.payload.last_reading.motion===true) && msg.payload.name in context.global.camera_motion)\n{\n    var newMsg1 ={\n    \"url\":context.global.BlueMixUrlBase+'/red/save_images?cam_list='+context.global.camera_motion[msg.payload.name]+'&object_name='+msg.payload.name,\n    \"method\": \"GET\",\n    headers: {\n        \"Authorization\":\"Bearer \"+context.global.FREEBOARD_TOKEN\n    }\n    }\n    node.send(newMsg1);\n}\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 684.8957977294922,
    "y": 636.1111145019531,
    "z": "3cc9f29d.c3360e",
    "wires": [
      [
        "219bbd87.de6442"
      ]
    ]
  },
  {
    "id": "219bbd87.de6442",
    "type": "http request",
    "name": "",
    "method": "use",
    "ret": "txt",
    "url": "",
    "x": 872.8957977294922,
    "y": 634.888916015625,
    "z": "3cc9f29d.c3360e",
    "wires": [
      []
    ]
  },
  {
    "id": "d91eb0aa.26e15",
    "type": "http request",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 1740.5625,
    "y": 40.888885498046875,
    "z": "3cc9f29d.c3360e",
    "wires": [
      []
    ]
  },
  {
    "id": "882280a3.77dd8",
    "type": "function",
    "name": "SendNamedBasedIfttt",
    "func": "if ('IFTTT_TOKEN' in context.global && context.global.IFTTT_TOKEN!=='undefined'){\nif (msg.payload.object_type=='remote' || (msg.payload.object_type=='sensor_pod' && ('motion' in msg.payload.last_reading || 'opened' in msg.payload.last_reading)) ){\n    var winkEvent=''\n    var lr=msg.payload.last_reading;\n    var oName=msg.payload.name;\n    var oType=msg.payload.object_type\n\n if (oType=='remote') winkEvent = (lr.button_on_pressed ? 'button_on_pressed' : lr.button_off_pressed ? 'button_off_pressed' : lr.button_up_pressed ? 'button_up_pressed' : lr.button_down_pressed ? 'button_down_pressed' :  '')\n else {\n if ('motion' in lr)  winkEvent = (lr.motion ? 'motion_started' : 'motion_ended')\n if ('opened' in lr) winkEvent =  (lr.opened ? 'opened' : 'closed')\n }\n \n if (winkEvent!==''){\n var WinkEvent=oName.replace(' ','_')+'_'+winkEvent;\n var newMsg ={\n                    \"url\":\"https://maker.ifttt.com/trigger/\"+WinkEvent+\"/with/key/\"+context.global.IFTTT_TOKEN,\n                    \"method\": \"POST\",\n                    headers: \n                    {\n                        \"Content-Type\":\"application/json\"\n                    }\n            }\nnode.send(newMsg);\n}\n\n}\n\n}\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 710.8957977294922,
    "y": 687.1110534667969,
    "z": "3cc9f29d.c3360e",
    "wires": [
      [
        "657d683.f9a8298"
      ]
    ]
  },
  {
    "id": "657d683.f9a8298",
    "type": "http request",
    "name": "",
    "method": "use",
    "ret": "txt",
    "url": "",
    "x": 917.8957977294922,
    "y": 688.8889465332031,
    "z": "3cc9f29d.c3360e",
    "wires": [
      [
        "a8d6f44b.572908"
      ]
    ]
  },
  {
    "id": "a8d6f44b.572908",
    "type": "debug",
    "name": "",
    "active": false,
    "console": "false",
    "complete": "false",
    "x": 1095,
    "y": 688,
    "z": "3cc9f29d.c3360e",
    "wires": []
  },
  {
    "id": "11b2dbc4.ee4d24",
    "type": "catch",
    "name": "",
    "x": 81,
    "y": 1153,
    "z": "3cc9f29d.c3360e",
    "wires": [
      [
        "74efed32.8b1014"
      ]
    ]
  },
  {
    "id": "74efed32.8b1014",
    "type": "debug",
    "name": "",
    "active": true,
    "console": "false",
    "complete": "error",
    "x": 281,
    "y": 1153,
    "z": "3cc9f29d.c3360e",
    "wires": []
  },
  {
    "id": "9d90e57a.626f18",
    "type": "switch",
    "name": "WS switch",
    "property": "payload.object_type",
    "rules": [
      {
        "t": "eq",
        "v": "light_bulb"
      },
      {
        "t": "eq",
        "v": "binary_switch"
      },
      {
        "t": "eq",
        "v": "powerstrip"
      },
      {
        "t": "eq",
        "v": "lock"
      },
      {
        "t": "eq",
        "v": "group"
      }
    ],
    "checkall": "true",
    "outputs": 5,
    "x": 634,
    "y": 757,
    "z": "3cc9f29d.c3360e",
    "wires": [
      [
        "340b44d7.cbf4bc"
      ],
      [
        "8a13ada2.75ec5"
      ],
      [
        "94d61d11.6b29e"
      ],
      [
        "a0cdc335.5f324"
      ],
      [
        "ef8c3ecc.1073c"
      ]
    ]
  },
  {
    "id": "340b44d7.cbf4bc",
    "type": "function",
    "name": "",
    "func": "var bulbMsg={}\nvar bulb=context.global.winkState.light_bulbs[msg.payload.name];\nif (!('powered' in msg.payload.desired_state)){\nbulbMsg.payload={\n name:bulb.name,\n            object_id:bulb.object_id,\n            powered:bulb.powered,\n            brightness:Math.round(bulb.brightness*100)\n}\n//bulbMsg.payload=context.global.encrypt(JSON.stringify(Message));\nreturn bulbMsg;\n}",
    "outputs": 1,
    "noerr": 0,
    "x": 893,
    "y": 726,
    "z": "3cc9f29d.c3360e",
    "wires": [
      [
        "947b7e47.6b848"
      ]
    ]
  },
  {
    "id": "8a13ada2.75ec5",
    "type": "function",
    "name": "",
    "func": "var binSMsg={}\nvar bulb=context.global.winkState.binary_switches[msg.payload.name];\nif (!('powered' in msg.payload.desired_state) || msg.payload.desired_state.powered===false){\nbinSMsg.payload={\n            name:bulb.name,\n            object_id:bulb.object_id,\n            powered:bulb.powered,\n            brightness:(bulb.powered ? 100:0)\n        }\nreturn binSMsg;\n}",
    "outputs": 1,
    "noerr": 0,
    "x": 895,
    "y": 762,
    "z": "3cc9f29d.c3360e",
    "wires": [
      [
        "947b7e47.6b848"
      ]
    ]
  },
  {
    "id": "947b7e47.6b848",
    "type": "websocket out",
    "name": "",
    "server": "b25b93a7.4da47",
    "client": "",
    "x": 1108,
    "y": 758,
    "z": "3cc9f29d.c3360e",
    "wires": []
  },
  {
    "id": "94d61d11.6b29e",
    "type": "function",
    "name": "",
    "func": "for (var i=0;i<msg.payload.outlets.length;i++){\nvar binSMsg={}    \nvar bulb=context.global.winkState.powerstrips[msg.payload.outlets[i].name];\nif (!('powered' in bulb.desired_state) || bulb.desired_state.powered===false){\nbinSMsg.payload={\n            name:bulb.name,\n            object_id:bulb.object_id,\n            powered:bulb.powered,\n            brightness:(bulb.powered ? 100:0)\n        }\nnode.send(binSMsg);\n}\n}",
    "outputs": 1,
    "noerr": 0,
    "x": 895,
    "y": 800,
    "z": "3cc9f29d.c3360e",
    "wires": [
      [
        "947b7e47.6b848"
      ]
    ]
  },
  {
    "id": "a0cdc335.5f324",
    "type": "function",
    "name": "",
    "func": "var lockMsg={}\nvar lock=context.global.winkState.locks[msg.payload.name];\nif (!('locked' in msg.payload.desired_state)){\nlockMsg.payload={\n            name:lock.name,\n            object_id:lock.object_id,\n            locked:lock.locked\n    }\n//bulbMsg.payload=context.global.encrypt(JSON.stringify(Message));\nreturn lockMsg;\n}",
    "outputs": 1,
    "noerr": 0,
    "x": 890,
    "y": 835,
    "z": "3cc9f29d.c3360e",
    "wires": [
      [
        "947b7e47.6b848"
      ]
    ]
  },
  {
    "id": "5021d9.ffafde28",
    "type": "function",
    "name": "Check if robots are there",
    "func": "if ('useRobots' in context.global && context.global.useRobots) {\n    var newMsg={\n    url:context.global.BlueMixUrlBase+'/red/robots',\n    \"method\": \"POST\",\n    headers: {\n        \"Authorization\":\"Bearer \"+context.global.FREEBOARD_TOKEN\n    },\n    payload:msg.payload\n    }\n    return newMsg;\n}",
    "outputs": 1,
    "noerr": 0,
    "x": 349,
    "y": 519,
    "z": "3cc9f29d.c3360e",
    "wires": [
      [
        "40ccf9f6.bf3308"
      ]
    ]
  },
  {
    "id": "40ccf9f6.bf3308",
    "type": "http request",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 440,
    "y": 611,
    "z": "3cc9f29d.c3360e",
    "wires": [
      []
    ]
  },
  {
    "id": "19d5c47.fe62a3c",
    "type": "delay",
    "name": "",
    "pauseType": "delay",
    "timeout": "5",
    "timeoutUnits": "seconds",
    "rate": "1",
    "rateUnits": "second",
    "randomFirst": "1",
    "randomLast": "5",
    "randomUnits": "seconds",
    "drop": false,
    "x": 248,
    "y": 67,
    "z": "3cc9f29d.c3360e",
    "wires": [
      [
        "f212cbe4.0ded38"
      ]
    ]
  },
  {
    "id": "e1b7399c.1e48c8",
    "type": "function",
    "name": "UI Notifications",
    "func": "var pct = function(value) {\n    return ((value > 1.0 ? value : value * 100).toFixed(0) + '%');\n}\nfunction send_ui_note(n_type,n_timeout,n_message){\n    var newMsg={\n        url:context.global.BlueMixUrlBase+'/red/notifications',\n        \"method\": \"POST\",\n        headers: {\n            \"Authorization\":\"Bearer \"+context.global.FREEBOARD_TOKEN\n        },\n        payload:{\n            \"type\":n_type,\n            \"message\":n_message,\n            \"timeout\":n_timeout\n            }\n        };\n        node.send(newMsg);\n}\nif ('last_reading' in msg.payload){\n    var Obj_name=msg.payload.name\n    var lr = msg.payload.last_reading;\n    if ('opened' in lr && lr.opened) send_ui_note('warning',30000,Obj_name+' opened');\n    if ('locked' in lr && !lr.locked) send_ui_note('warning',30000,Obj_name+' unlocked');\n    if ('motion' in lr && lr.motion)  send_ui_note('warning',30000,Obj_name+' motion detected');\n    if ('tamber_detected' in lr && lr.tamper_detected) send_ui_note('error',60000,Obj_name+' tamper detected!!!');\n    if ('battery' in lr) ((lr.battery>=0.33 && lr.battery < 0.5) ? send_ui_note('information',30000,Obj_name+' battery level '+ pct(lr.battery)) : (lr.battery>= 0.1 && lr.battery <0.33) ? send_ui_note('warning',60000,Obj_name+' battery level '+ pct(lr.battery)) : lr.battery<0.1 ? send_ui_note('error',false,Obj_name+' battery level '+ pct(lr.battery)) : null);\n    if ('remaining' in lr) ((lr.remaining>=0.33 && lr.remaining < 0.5) ? send_ui_note('information',30000,Obj_name+' propane level '+ pct(lr.remaining)) : (lr.remaining>= 0.1 && lr.remaining <0.33) ? send_ui_note('warning',60000,Obj_name+' propane level '+ pct(lr.remaining)) : lr.remaining<0.1 ? send_ui_note('error',false,Obj_name+' propane level '+ pct(lr.remaining)) : null);\n    if ('liquid_detected' in lr && lr.liquid_detected) send_ui_note('error',false,Obj_name+' liquid detected!!!');\n    if ('smoke_detected' in lr && lr.smoke_detected) send_ui_note('error',false,Obj_name+' smoke detected!!!<br>Severity: '+pct(lr.co_severity));\n    if ('co_detected' in lr && lr.smoke_detected) send_ui_note('error',false,Obj_name+' smoke detected!!!<br>Severity: '+pct(lr.co_severity));\n    }\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 686,
    "y": 433,
    "z": "3cc9f29d.c3360e",
    "wires": [
      [
        "713950a.f8ec6b"
      ]
    ]
  },
  {
    "id": "713950a.f8ec6b",
    "type": "http request",
    "name": "",
    "method": "use",
    "ret": "txt",
    "url": "",
    "x": 934,
    "y": 432,
    "z": "3cc9f29d.c3360e",
    "wires": [
      []
    ]
  },
  {
    "id": "270f9b0.fd8f064",
    "type": "inject",
    "name": "",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "repeat": "",
    "crontab": "",
    "once": false,
    "x": 106,
    "y": 135,
    "z": "3cc9f29d.c3360e",
    "wires": [
      [
        "acfa619b.5305a"
      ]
    ]
  },
  {
    "id": "9ecb6a04.613498",
    "type": "inject",
    "name": "",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "repeat": "",
    "crontab": "01 00 * * *",
    "once": false,
    "x": 96,
    "y": 973,
    "z": "3cc9f29d.c3360e",
    "wires": [
      [
        "d2c63c7b.2d39c"
      ]
    ]
  },
  {
    "id": "ef8c3ecc.1073c",
    "type": "function",
    "name": "",
    "func": "var pct = function(value) {\n    return ((value > 1.0 ? value : value * 100).toFixed(0) + '%')\n}\nvar dual_temp = function (value) {\n    return (typeof value === 'number' ? (value.toFixed(1) + 'C / ' + ((value * 1.8) + 32).toFixed(1) + 'F') : '')\n}\n\nvar all=context.global.winkState.groups['.all'];\nvar l=context.global.winkState.groups['@lights'];\n\n\nvar NewMsg={\n    payload:{\n        home_components:[]\n    }\n};\nvar grp=msg.payload.name;\n//node.warn(grp);\nif (grp==='.all') \n{ \n     if ('temperature' in context.global.winkState.groups['.all']){\n        NewMsg.payload.home_components.push(\n            {\n                type:'temperature',\n                icon:'wi wi-thermometer',\n                label:\"Temperature\",\n                value:dual_temp(all.temperature.average),\n                icon_color:(all.temperature.average<10 || all.temperature.average > 50 ? 'detail-warning' : 'detail-ok')\n            });\n    }\n    if ('humidity' in context.global.winkState.groups['.all']){\n        NewMsg.payload.home_components.push(\n            {\n                type:'humidity',\n                icon:'wi wi-humidity',\n                label:\"Humidity\",\n                value:pct(all.humidity.average),\n                icon_color:(all.humidity.average < 0.1 || all.humidity.average > 90 ? 'detail-warning' : 'detail-ok')\n            });\n    }\n    if ('smoke_detected' in context.global.winkState.groups['.all']){\n        NewMsg.payload.home_components.push(\n            {\n                type:'smoke_detected',\n                icon:'fa icon-fire',\n                label:\"Smoke\",\n                value:(all.smoke_detected.and || all.smoke_detected.or ? \"Fire\" : \"OK\"),\n                icon_color: (all.smoke_detected.and || all.smoke_detected.or ? \"detail-danger\" : \"detail-ok\")\n            });\n        NewMsg.payload.home_components.push(\n            {\n                type:'co_detected',\n                icon:'cicon-CO2',\n                label:\"CO2\",\n                value:(all.co_detected.and || all.co_detected.or ? \"CO2\" : \"OK\"),\n                icon_color:(all.co_detected.and || all.co_detected.or ? \"detail-danger\" : \"detail-ok\"),\n            });\n    }\n    if ('liquid_detected' in context.global.winkState.groups['.all']){\n        NewMsg.payload.home_components.push({\n            type:'liquid_detected',\n            icon:'fa icon-tint',\n            label:\"Leaks\",\n            value:(all.liquid_detected.and || all.liquid_detected.or ? \"Leak\" : \"OK\"),\n            icon_color:(all.liquid_detected.and || all.liquid_detected.or ?  \"detail-danger\" : \"detail-ok\")\n        });\n    }\n    if ('motion' in context.global.winkState.groups['.all']){\n        NewMsg.payload.home_components.push(\n            {\n                type:'motion',\n                icon:'fa icon-group',\n                label:\"Motion\",\n                value:(all.motion.and || all.motion.or ? \"Motion\" : \"OK\"),\n                icon_color:(all.motion.and || all.motion.or ?  'detail-warning' : 'detail-ok')\n            });\n    }\n    if ('locked' in context.global.winkState.groups['.all']){\n        NewMsg.payload.home_components.push(\n            {\n                type:'locked', \n                icon:'fa icon-lock',\n                label:\"Locks\",\n                value:(all.locked.and || all.locked.or ? \"OK\" : all.locked.false_count+\" Unlocked\"),\n                icon_color:(all.locked.and || all.locked.or ?  'detail-ok' : 'detail-warning')\n            });\n    }\n    \n    if ('opened' in context.global.winkState.groups['.all']){\n        NewMsg.payload.home_components.push(\n            {\n                type:'opened',\n                icon:'cicon-closed_door',\n                label:\"Doors\",\n                value:(all.opened.and || all.opened.or ? all.opened.true_count+\" Opened\" : \"All Closed\"),\n                icon_color:(all.opened.and || all.opened.or ?  'detail-warning' : 'detail-ok')\n            });\n    }\n    return NewMsg;\n}\nif (grp=='@lights') {\n    if ('light_bulbs' in context.global.winkState || 'binary_switches' in context.global.winkState){\n            NewMsg.payload.home_components.push(\n                {type:'lights',\n                icon:'fa fa-lightbulb-o',\n                label:\"Lights\",\n                value:(l.powered.and || l.powered.or ? l.powered.true_count+\" ON\" : l.powered.false_count+\" OFF\"),\n                icon_color:(l.powered.and || l.powered.or ? 'detail-warning' : 'detail-ok')\n                });\n    }\n    return NewMsg;\n}\n",
    "outputs": 1,
    "noerr": 0,
    "x": 894,
    "y": 879,
    "z": "3cc9f29d.c3360e",
    "wires": [
      [
        "947b7e47.6b848"
      ]
    ]
  }
]