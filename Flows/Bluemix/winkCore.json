[
  {
    "id": "d6e6e1f9.29192",
    "type": "websocket-listener",
    "z": "",
    "path": "/ws/winkStat",
    "wholemsg": "false"
  },
  {
    "id": "a63faf92.59c05",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "DefineGlobalObjects",
    "func": "//use this function to initialize global variables that can be used in any flow or function\nif (typeof context.global.ifttt === 'undefined')\n{\n    context.global.ifttt=false;\n}\n\nif (typeof (context.global.PresenceHistory) === 'undefined') context.global.PresenceHistory=[];\n\nif (typeof(context.global.Presence) === 'undefined')\n{\n    context.global.Presence = {};  \n}\n\nif (typeof(context.global.tab_ui_shortcuts) === 'undefined')\n{\n    context.global.tab_ui_shortcuts = [];  \n}\n\nif (typeof context.global.ignoreMotion === 'undefined')\n{\n    context.global.ignoreMotion=false;\n}\nif (typeof context.global.mediaPlaying==='undefined')\n{\n    context.global.mediaPlaying=false;\n}\nif (typeof context.global.Weather === 'undefined')\n{\n    context.global.Weather= {};\n}\nif (typeof context.global.winkState==='undefined' )\n{\n context.global.winkState = {};\n}\n\nif (typeof context.global.winkDevCap==='undefined' )\n{\n    context.global.winkDevCap = {};\n}\n\ncontext.global.pct = function(value) {\n    return ((value > 1.0 ? value : value * 100).toFixed(0) + '%');\n};\n\ncontext.global.send_ui_note = function(n_type,n_timeout,n_message,obj_id){\n    var obj=obj_id||null;\n    try{\n    var newMsg={\n        url:context.global.BlueMixUrlBase+'/red/notifications',\n        \"method\": \"POST\",\n        headers: {\n            \"Authorization\":\"Bearer \"+context.global.FREEBOARD_TOKEN\n        },\n        payload:{\n            \"id\":obj,\n            \"type\":n_type,\n            \"message\":n_message,\n            \"timeout\":n_timeout\n            }\n        };\n        return newMsg;\n    }\n    catch (error){\n        node.warn('send ui note: '+error.message);\n    }\n};\n\ncontext.global.checkPresence = function() {\n    var i=0;\n    if (typeof(context.global.Presence) ==='undefined') return false;\n    for (var key in context.global.Presence){\n        if (context.global.Presence[key].home==='yes' || context.global.Presence[key].home===true) i++;\n    }\n    return (i>0 ? true : false);\n};\n\ncontext.global.isHomeOccupied = function() {\n    if (typeof context.global.winkState.groups['.sensors'].motion!=='undefined'){ motionSensors = context.global.winkState.groups['.sensors'].motion.or; } else { motionSensors = false; }\n    if (typeof context.global.winkState.groups['.sensors'].occupied!=='undefined'){ occupancySensors = context.global.winkState.groups['.sensors'].occupied.or; } else { occupancySensors = false; }\n    return ((motionSensors || occupancySensors || context.global.checkPresence()) ? true : false);\n};\n\n\ncontext.global.isObject=function(val) {\n    if (val === null) { return false;}\n    if (val instanceof Array) {return false;}\n    return ( (typeof (val) === 'function') || (typeof (val) === 'object') );\n};\n\ncontext.global.cleanWinkState=function(){\n    for (var wink_obj in context.global.winkState){\n          if (context.global.isObject(context.global.winkState[wink_obj]) && wink_obj.indexOf('Updates')==-1) {\n            for (var wink_device in context.global.winkState[wink_obj]) {\n               if('eco_system' in context.global.winkState[wink_obj][wink_device] && context.global.winkState[wink_obj][wink_device].eco_system=='WINK'){\n                   node.warn('               resetting object '+wink_device);\n                   delete context.global.winkState[wink_obj][wink_device];\n               } \n            }\n            if (Object.keys(context.global.winkState[wink_obj]).length===0) delete context.global.winkState[wink_obj];\n        }\n    }\n};\n\ncontext.global.badRobot=function(robot){\n    var invalidCause=true;\n    var ifNotUser=(robot.automation_mode===null ? false : true);\n    robot.causes.forEach(function (c){\n        if (c.observed_object_id!==null) invalidCause=false;\n    });\n    return invalidCause || ifNotUser;\n};\n\ncontext.global.getWinkState = function (body) {\n    var results, updateP;\n\n    updateP = !body.data;\n    results = updateP ? [body] : body.data;\n\n    results.forEach(function (result) {\n        var key, len, prop, readings, type,reading_aggregations, agg_prop, capabilities, capb, outlets, outl;\n        //node.warn(result.object_type+\" \"+ result.object_id+\" \"+result.name) //for debugging\n        type = result.object_type;\n        if (type=='camera' && result.manufacturer_device_model=='canary' ) return;\n        if ('effects' in result && context.global.badRobot(result)) return;\n        if ('last_reading' in result && 'powering_mode' in result.last_reading && result.last_reading.powering_mode=='none') return;\n        if ('object_type' in result && result.object_type=='group' && result.members.length===0) return;\n        if (type) {\n        result.name=result.name.replace(/(\\r\\n|\\n|\\r)/gm,\"\");\n        key = result.name;\n        if (type==\"binary_switch\") type=\"binary_switches\";\n        else type=type+\"s\";\n        }\n        else {\n            if (!result.robot_id || !result.linked_service_id || result._msgid) return;\n            if(result.linked_service_id){\n                type = 'linked_services';\n                key = result.service;\n                result.object_id = result.linked_service_id;\n            }\n            if (result.robot_id){\n                type= 'robots';\n                \n            }\n        }\n        if (!context.global.winkState[type]) context.global.winkState[type] = {};\n\n        if ((!!context.global.winkState[type][key]) && type!=='groups' && (context.global.winkState[type][key].object_id != result.object_id)) {\n            key += ' (#' + result.object_id + ')';\n        }\n\n        if (!(key in context.global.winkState[type])) context.global.winkState[type][key] ={};\n        context.global.winkState[type][key].eco_system=result.eco_system || 'WINK';\n        context.global.winkState[type][key].name=result.name || key;\n        context.global.winkState[type][key].object_type=type;\n        context.global.winkState[type][key].object_id=result.object_id;\n        if (result.device_manufacturer) context.global.winkState[type][key].device_manufacturer=result.device_manufacturer;\n        context.global.winkState[type][key].freeboard=0;\n        if (result.savings_goal){\n         context.global.winkState[type][key].savings_goal=result.savings_goal ;\n         context.global.winkState[type][key].nose_color=result.nose_color;\n        }\n        if (result.lat_lng) {\n            if ((result.lat_lng[0] === 0) && (result.lat_lng[1] === 0)) result.lat_lng = [null, null];\n            context.global.winkState[type][key].coordinates = result.lat_lng;\n        }\n        if ('effects' in result && result.causes.length>0){\n           context.global.winkState[type][key].creating_actor_type=result.creating_actor_type;\n           context.global.winkState[type][key].automation_mode=result.automation_mode;\n           context.global.winkState[type][key].effects=result.effects;\n           context.global.winkState[type][key].causes=result.causes;\n           context.global.winkState[type][key].restrictions=result.restrictions;\n        }\n        \n        // Add group membership\n        if (type==\"groups\" && result.name.substring(0,1)!==\".\" && result.name.substring(0,1)!==\"@\")\n        {\n            if (result.members && result.members.length>0) {\n                context.global.winkState[type][key].members = {};\n                for (i=0; i<result.members.length; i++) {\n                    var light_type= (result.members[i].object_type == 'binary_switch' ? 'binary_switches' : result.members[i].object_type+'s');\n                    for (var name in context.global.winkState[light_type])\n                    {\n                        if (context.global.winkState[light_type][name].object_id == result.members[i].object_id) \n                        {\n                            context.global.winkState[type][key].members[name] = { \n                                    name:name,\n                                    object_id:result.members[i].object_id,\n                                    object_type:light_type\n                                };\n                            }\n                        }\n                    }\n                }\n                \n        }\n\n        if (type=='cameras' && result.manufacturer_device_model!=='canary' ){\n//        if (typeof(context.global.winkState[type][key].activities)==='undefined') context.global.winkState[type][key].activities=[]\n        context.global.winkState[type][key].manufacturer_device_model = result.manufacturer_device_model;\n        context.global.winkState[type][key].url = context.global.BlueMixUrlBase+\"/freeboard/camera?token=\"+context.global.FREEBOARD_TOKEN+\"&id=\"+context.global.winkState.cameras[key].object_id+\"&model=\"+context.global.winkState.cameras[key].manufacturer_device_model;\n        context.global.winkState[type][key].snap_url = context.global.BlueMixUrlBase+\"/freeboard/camera?token=\"+context.global.FREEBOARD_TOKEN+\"&id=\"+context.global.winkState.cameras[key].object_id+\"&model=\"+context.global.winkState.cameras[key].manufacturer_device_model;\n        context.global.winkState[type][key].history_url = context.global.BlueMixUrlBase+\"/freeboard/cameraSnapshots?token=\"+context.global.FREEBOARD_TOKEN+\"&camera_name=\"+key;\n        context.global.winkState[type][key].refresh_time=30;\n        }\n\n        readings = result.last_reading;\n        for (prop in readings) {\n            len = prop.length;\n            if ((prop.indexOf('desired_') === -1) && (prop.lastIndexOf('_at') !== (len - 3))) {\n                context.global.winkState[type][key][prop] = readings[prop];\n            }\n        }\n        if (type=='door_bells') {\n            if (!('sensor_pods' in context.global.winkState)) context.global.winkState.sensor_pods={};\n            context.global.winkState.sensor_pods[key]=context.global.winkState[type][key];\n            context.global.winkState.sensor_pods[key].object_type='sensor_pods';\n        }\n        reading_aggregations = result.reading_aggregation;\n        for (agg_prop in reading_aggregations) {\n            context.global.winkState[type][key][agg_prop]=reading_aggregations[agg_prop];\n        }\n        \n        capabilities = result.capabilities;\n        for (capb in capabilities) {\n            if(!context.global.winkDevCap[key]) context.global.winkDevCap[key]={};\n            if(!context.global.winkDevCap[key][capb]) context.global.winkDevCap[key][capb]={};\n          context.global.winkDevCap[key][capb]=capabilities[capb];\n        }\n        \n        outlets = result.outlets;\n        for (outl in outlets) {\n         if (!context.global.winkState[type][outlets[outl].name]) context.global.winkState[type][outlets[outl].name] = {};\n        context.global.winkState[type][outlets[outl].name]=outlets[outl];\n        }\n        \n        \n        if (!!result.linked_service_id) context.global.winkState[type][key].connection = !result.invalidated_at;\n\n        if (!updateP) return;\n        if (!context.global.winkState.lastUpdates) context.global.winkState.lastUpdates = [];\n        if (type!=='groups'){\n        context.global.winkState[type][key].timestamp = new Date();\n        context.global.winkState.lastUpdates.splice(0, 0, context.global.winkState[type][key]);\n        if (context.global.winkState.lastUpdates.length > 15) context.global.winkState.lastUpdates.pop();\n        }\n        //addind special array for motion sensors to check how often they occur\n        if (type == \"sensor_pods\" && typeof (context.global.winkState[type][key].motion) !== 'undefined') {\n        context.global.winkState[type][key].timestamp= new Date();\n        if (!context.global.winkState.motionUpdates) context.global.winkState.motionUpdates=[];\n        context.global.winkState.motionUpdates.splice(0, 0, context.global.winkState[type][key]);\n        if (context.global.winkState.motionUpdates.length > 30) context.global.winkState.motionUpdates.pop();\n        }\n        \n    });\n};\n\n//global functions to generate wink cmd message for various objects\n\ncontext.global.takeCameraSnapshot = function(camera,event){\n    var cameraMsg={};\n    if (camera in context.global.winkState.cameras){\n        cameraMsg ={\n        \"url\":context.global.BlueMixUrlBase+'/red/save_images?cam_list='+camera+'&object_name='+event,\n        \"method\": \"GET\",\n            headers: {\n                \"Authorization\":\"Bearer \"+context.global.FREEBOARD_TOKEN\n            }\n        };\n    }\n    return cameraMsg;\n};\n\ncontext.global.executeEffectCMD = function(effect,o_name,o_type,min,max,period,repeat,delay){\n   if ('new_version' in context.global && context.global.new_version){\n    var EffectMsg;\n    switch (effect.toLowerCase()){\n        case 'fadein':\n        case 'fadeout':\n        EffectMsg = {\n            \"url\":context.global.BlueMixUrlBase+'/red/ifttt/effects/'+effect.toLowerCase(),\n            method: \"POST\",\n            headers: {\n                \"Authorization\":\"Bearer \"+context.global.FREEBOARD_TOKEN\n            },\n            payload:{\n                \"winkName\":o_name,\n                \"type\":o_type,\n                \"min\":min,\n                \"max\":max,\n                \"period\":period\n            }\n        }\n        break;\n        case 'pulse':\n                EffectMsg = {\n            \"url\":context.global.BlueMixUrlBase+'/red/ifttt/effects/'+effect.toLowerCase(),\n            method: \"POST\",\n            headers: {\n                \"Authorization\":\"Bearer \"+context.global.FREEBOARD_TOKEN\n            },\n            payload:{\n                \"winkName\":o_name,\n                \"type\":o_type,\n                \"min\":min,\n                \"max\":max,\n                \"repeat\":repeat || 1,\n                \"delay\" : delay || period\n            }\n        }\n        break;\n    }\n    return EffectMsg;\n   } else return;\n};\ncontext.global.executeWinkCMD = function (winkName,type,cmd,level) {\nif ('new_version' in context.global && context.global.new_version){    \nvar WinkCMDmsg;\n//node.warn(winkName+' '+type+' '+cmd)\ntry {\nswitch (type.toLowerCase()) {\n/*case 'garage':\nif (winkName in context.global.winkState.garage_doors)\n{\n   WinkCMDmsg ={\n    \"url\":\"https://winkapi.quirky.com/garage_doors/\"+context.global.winkState.garage_doors[winkName].object_id,\n    \"method\": \"PUT\",\n    headers: {\n        \"Authorization\":\"Bearer \"+context.global.WinkToken,\n        \"Content-Type\":\"application/json\"\n    },\n    payload: {\n        \"desired_state\": {\n            \"position\":(cmd.toLowerCase() ==\"open\" ? 1:0)\n        }\n    }\n};\n}\nbreak;*/\ncase 'robot':\nif (winkName in context.global.winkState.robots)\n{\n   WinkCMDmsg ={\n    \"url\":\"https://winkapi.quirky.com/robots/\"+context.global.winkState.robots[winkName].object_id,\n    \"method\": \"PUT\",\n    headers: {\n        \"Authorization\":\"Bearer \"+context.global.WinkToken,\n        \"Content-Type\":\"application/json\"\n    },\n    payload: {\n        \"desired_state\": {\n            \"enabled\":(cmd.toLowerCase() ==\"enable\" ? true:false)\n        }\n    }\n};\n}\nbreak;    \ncase 'lock':\nif (winkName in context.global.winkState.locks)\n{\n   WinkCMDmsg ={\n    \"url\":\"https://winkapi.quirky.com/locks/\"+context.global.winkState.locks[winkName].object_id,\n    \"method\": \"PUT\",\n    headers: {\n        \"Authorization\":\"Bearer \"+context.global.WinkToken,\n        \"Content-Type\":\"application/json\"\n    },\n    payload: {\n        \"desired_state\": {\n            \"locked\":(cmd.toLowerCase() ==\"lock\" ? true:false)\n        }\n    }\n};\n}\nbreak;\ncase 'light':\nif ('light_bulbs' in context.global.winkState && winkName in context.global.winkState.light_bulbs){\n    if(context.global.winkState.light_bulbs[winkName].device_manufacturer==\"lifx\")\n    {\n        WinkCMDmsg ={\n            \"url\":\"https://api.lifx.com/v1/lights/id:\"+context.global.winkState.light_bulbs[winkName].object_id+\"/state\",\n            \"method\": \"PUT\",\n            headers: {\n                \"Authorization\": \"Bearer \"+context.global.LIFX_TOKEN,\n                \"Content-Type\":\"application/json\"\n            },\n            payload: {\n                power:(cmd.toLowerCase()==\"on\" ? \"on\":\"off\"),\n                brightness: level/100,\n                \"duration\": 1\n            }\n        };\n    }\n    else {\n WinkCMDmsg ={\n    \"url\":\"https://winkapi.quirky.com/light_bulbs/\"+context.global.winkState.light_bulbs[winkName].object_id,\n    \"method\": \"PUT\",\n    headers: {\n        \"Authorization\":\"Bearer \"+context.global.WinkToken,\n        \"Content-Type\":\"application/json\"\n    },\n    payload: {\n        \"desired_state\": {\n            \"powered\":(cmd.toLowerCase() ==\"on\" ? true:false),\n            \"brightness\": level/100\n        }\n    }\n };\n}   \n} else if('binary_switches' in context.global.winkState && winkName in context.global.winkState.binary_switches){\n WinkCMDmsg ={\n    \"url\":\"https://winkapi.quirky.com/binary_switches/\"+context.global.winkState.binary_switches[winkName].object_id,\n    \"method\": \"PUT\",\n    headers: {\n        \"Authorization\":\"Bearer \"+context.global.WinkToken,\n        \"Content-Type\":\"application/json\"\n    },\n    payload: {\n        \"desired_state\": {\n            \"powered\":(cmd.toLowerCase() ==\"on\" ? true:false)\n        }\n    }\n};\n} else if('powerstrips' in context.global.winkState && winkName in context.global.winkState.powerstrips && context.global.winkState.powerstrips[winkName].object_type==='outlet'){\n WinkCMDmsg ={\n    \"url\":\"https://winkapi.quirky.com/outlets/\"+context.global.winkState.powerstrips[winkName].object_id,\n    \"method\": \"PUT\",\n    headers: {\n        \"Authorization\":\"Bearer \"+context.global.WinkToken,\n        \"Content-Type\":\"application/json\"\n    },\n    payload: {\n        \"desired_state\": {\n            \"powered\":(cmd.toLowerCase() ==\"on\" ? true:false)\n        }\n    }\n};\n}\nbreak;\ncase 'group':\nif (winkName in context.global.winkState.groups){\n//node.warn(context.global.winkState.groups[winkName]);\n WinkCMDmsg ={\n    \"url\":\"https://winkapi.quirky.com/groups/\"+context.global.winkState.groups[winkName].object_id+\"/activate\",\n    \"method\": \"POST\",\n    headers: {\n        \"Authorization\":\"Bearer \"+context.global.WinkToken,\n        \"Content-Type\":\"application/json\"\n    },\n    payload: {\n        \"desired_state\": {\n            \"powered\":(cmd.toLowerCase() ==\"on\" ? true:false),\n            \"brightness\": level/100\n        }\n    }\n  };\n }\nbreak;\ncase 'shortcut':\nif (winkName in context.global.winkState.scenes){\n WinkCMDmsg ={\n    \"url\":\"https://winkapi.quirky.com/scenes/\"+context.global.winkState.scenes[winkName].object_id+\"/activate\",\n    \"method\": \"POST\",\n    headers: {\n        \"Authorization\":\"Bearer \"+context.global.WinkToken,\n        \"Content-Type\":\"application/json\"\n    }\n  };\n }\nbreak;\ndefault:\nWinkCMDmsg={url:'not defined'};\n}\n//node.warn(WinkCMDmsg.url);\nreturn WinkCMDmsg;\n}\ncatch (error){\n    node.warn('execute WINK CMD error: '+ error.message);\n}\n} else return;\n};\n\n\ncontext.global.algorithm = 'aes-256-ctr',\n\ncontext.global.encrypt=function(text){\n  var cipher = context.global.CRYPTO.createCipher(context.global.algorithm,context.global.FREEBOARD_TOKEN);\n  var crypted = cipher.update(text,'utf8','hex');\n  crypted += cipher.final('hex');\n  return crypted;\n};\n \ncontext.global.decrypt=function(text){\n  var decipher = context.global.CRYPTO.createDecipher(context.global.algorithm,context.global.FREEBOARD_TOKEN);\n  var dec = decipher.update(text,'hex','utf8');\n  dec += decipher.final('utf8');\n  return dec;\n};\n\ncontext.global.getCookie=function(cname,req_cookies) {\n    var name = cname + \"=\";\n    if (typeof(req_cookies) !=='undefined' ){\n    var ca = req_cookies.split(';');\n    for(var i=0; i<ca.length; i++) {\n        var c = ca[i];\n        while (c.charAt(0)==' ') c = c.substring(1);\n        if (c.indexOf(name) === 0) return c.substring(name.length,c.length);\n    }\n  } else return '0';\n};\n\ncontext.global.getBISession = function (req_cookies)\n {\n\tvar i,x,y,ARRcookies=document.cookie.split(\";\");\n\tfor (i=0; i<ARRcookies.length; i++ )\n\t{\n\t\tx=ARRcookies[i].substr(0,ARRcookies[i].indexOf(\"=\"));\n\t\ty=ARRcookies[i].substr(ARRcookies[i].indexOf(\"=\")+1);\n\t\tx=x.replace(/^\\s+|\\s+$/g,\"\");\n\n\t\tif (x==\"session\")\n\t\t{\n\t\t\treturn unescape(y);\n\t\t}\n\t}\n };\n\ncontext.global.render_home_components = function(grp) {\n    var pct = function(value) {\n    return ((value > 1.0 ? value : value * 100).toFixed(0) + '%');\n    };\n    var dual_temp = function (value) {\n    return (typeof value === 'number' ? (value.toFixed(1) + 'C / ' + ((value * 1.8) + 32).toFixed(1) + 'F') : '');\n    };\n    \n    var all=context.global.winkState.groups['.all'];\n    var l=context.global.winkState.groups['@lights'];\n    var doors = ('@door_sensors' in context.global.winkState.groups ? context.global.winkState.groups['@door_sensors'].opened : false);\n    var sdoors = ('@sliding_door_sensors' in context.global.winkState.groups ? context.global.winkState.groups['@sliding_door_sensors'].opened : false);\n    var cab_doors = ('@cabinet_sensors' in context.global.winkState.groups ? context.global.winkState.groups['@cabinet_sensors'].opened :false);\n    var windows = ('@window_sensors' in context.global.winkState.groups ? context.global.winkState.groups['@window_sensors'].opened : false);\n    //var g_doors = ('@garage_door_sensors' in context.global.winkState.groups ? context.global.winkState.groups['@garage_door_sensors'].opened : false);\n    if ('garage_doors' in context.global.winkState){\n        var g_doors={\n            'and':false,\n            'or': false,\n            'true_count':0,\n            'false_count':0\n        };\n        for (var gd in context.global.winkState.garage_doors){\n            if (context.global.winkState.garage_doors[gd].position>0){\n                g_doors.and=true;\n                g_doors.or=true;\n                g_doors.true_count++;\n            } else g_doors.false_count++\n        }\n    } else g_doors=false;\n    var total_doors = {\n        'and': (doors ? doors.and : false) || (sdoors ? sdoors.and : false),\n        'or': (doors ? doors.or : false) || (sdoors ? sdoors.or : false),        \n        'true_count':(doors ? doors.true_count : 0) + (sdoors ? sdoors.true_count : 0),\n        'false_count':(doors ? doors.false_count : 0) + (sdoors ? sdoors.false_count : 0)        \n    };\n    var NewMsg={\n    payload:{\n        home_components:[]\n        }\n    }\n    if (grp==='.all' || grp.indexOf('_sensors')!=-1 || grp==='garage_door') \n    { \n         if ('temperature' in context.global.winkState.groups['.all']){\n            NewMsg.payload.home_components.push(\n                {\n                    type:'temperature',\n                    icon:'wi wi-home-icon wi-thermometer',\n                    label:\"Temperature\",\n                    value:dual_temp(all.temperature.average),\n                    icon_color:(all.temperature.average<10 || all.temperature.average > 50 ? 'detail-warning' : 'detail-ok')\n                });\n        }\n        if ('humidity' in context.global.winkState.groups['.all']){\n            NewMsg.payload.home_components.push(\n                {\n                    type:'humidity',\n                    icon:'wi wi-home-icon wi-humidity',\n                    label:\"Humidity\",\n                    value:pct(all.humidity.average),\n                    icon_color:(all.humidity.average < 0.1 || all.humidity.average > 90 ? 'detail-warning' : 'detail-ok')\n                });\n        }\n        if ('smoke_detected' in context.global.winkState.groups['.all']){\n            NewMsg.payload.home_components.push(\n                {\n                    type:'smoke_detected',\n                    icon:'wi wi-home-icon cicon-fire',\n                    label:\"Smoke\",\n                    value:(all.smoke_detected.and || all.smoke_detected.or ? \"Fire!!\" : \"OK\"),\n                    icon_color: (all.smoke_detected.and || all.smoke_detected.or ? \"detail-danger\" : \"detail-ok\")\n                });\n            NewMsg.payload.home_components.push(\n                {\n                    type:'co_detected',\n                    icon:'wi wi-home-icon cicon-CO2',\n                    label:\"CO2\",\n                    value:(all.co_detected.and || all.co_detected.or ? \"CO2!!\" : \"OK\"),\n                    icon_color:(all.co_detected.and || all.co_detected.or ? \"detail-danger\" : \"detail-ok\"),\n                });\n        }\n        if ('liquid_detected' in context.global.winkState.groups['.all'])\n        {\n            NewMsg.payload.home_components.push(\n                {\n                type:'liquid_detected',\n                icon:'wi wi-home-icon cicon-droplet',\n                label:\"Leaks\",\n                value:(all.liquid_detected.and || all.liquid_detected.or ? \"Leak detected!!\" : \"No Leaks\"),\n                icon_color:(all.liquid_detected.and || all.liquid_detected.or ?  \"detail-danger\" : \"detail-ok\")\n            });\n        }\n        if ('motion' in context.global.winkState.groups['.all']){\n            NewMsg.payload.home_components.push(\n                {\n                    type:'motion',\n                    icon:'wi wi-home-icon cicon-feed',\n                    label:\"Motion\",\n                    value:(all.motion.and || all.motion.or ? \"Motion\" : \"No Motion\"),\n                    icon_color:(all.motion.and || all.motion.or ?  'detail-warning' : 'detail-ok')\n                });\n        }\n        if ('locked' in context.global.winkState.groups['.all']){\n            NewMsg.payload.home_components.push(\n                {\n                    type:'locked', \n                    icon:'wi wi-home-icon cicon-doors4',\n                    label:\"Locks\",\n                    value:(all.locked.and || all.locked.or ? all.locked.true_count+\" Locked\" : all.locked.false_count+\" Unlocked\"),\n                    icon_color:(all.locked.and || all.locked.or ?  'detail-ok' : 'detail-warning')\n                });\n        };\n        \n        if (doors || sdoors ||cab_doors){\n//      if ('opened' in context.global.winkState.groups['@sliding_door_sensors'] || 'opened' in context.global.winkState.groups['@door_sensors'] || 'opened' in context.global.winkState.groups['@cabinet_sensors']){\n            NewMsg.payload.home_components.push(\n                {\n                    type:'d_opened',\n                    icon:'wi wi-home-icon '+(total_doors.and || total_doors.or ? 'cicon-opened_door':'cicon-closed_door'),\n                    label:\"Doors\",\n                    value:(total_doors.and || total_doors.or ? total_doors.true_count+\" Opened\" : total_doors.false_count+\" Closed\"),\n                    icon_color:(total_doors.and || total_doors.or ?  'detail-warning' : 'detail-ok')\n                });\n        }        \n        if (cab_doors){\n//      if ('opened' in context.global.winkState.groups['@sliding_door_sensors'] || 'opened' in context.global.winkState.groups['@door_sensors'] || 'opened' in context.global.winkState.groups['@cabinet_sensors']){\n            NewMsg.payload.home_components.push(\n                {\n                    type:'c_opened',\n                    icon:'wi wi-home-icon '+(cab_doors.and || cab_doors.or ? 'cicon-cabinet_door':'cicon-cabinet_door'),\n                    label:\"Cabinets\",\n                    value:(cab_doors.and || cab_doors.or ? cab_doors.true_count+\" Opened\" : cab_doors.false_count+\" Closed\"),\n                    icon_color:(cab_doors.and || cab_doors.or ?  'detail-warning' : 'detail-ok')\n                });\n        }        \n        if ('@window_sensors' in context.global.winkState.groups && 'opened' in context.global.winkState.groups['@window_sensors']){\n            NewMsg.payload.home_components.push(\n                {\n                    type:'w_opened',\n                    icon:'wi wi-home-icon '+(windows.and || windows.or ? 'cicon-windows2':'cicon-windows2'),\n                    label:\"Windows\",\n                    value:(windows.and || windows.or ? windows.true_count+\" Opened\" : windows.false_count+\" Closed\"),\n                    icon_color:(windows.and || windows.or ?  'detail-warning' : 'detail-ok')\n                });\n        }\n        if (g_doors){\n//      if ('opened' in context.global.winkState.groups['@sliding_door_sensors'] || 'opened' in context.global.winkState.groups['@door_sensors'] || 'opened' in context.global.winkState.groups['@cabinet_sensors']){\n            NewMsg.payload.home_components.push(\n                {\n                    type:'g_opened',\n                    icon:'wi wi-home-icon '+(g_doors.and || g_doors.or ? 'cicon-garage_o':'cicon-garage_c'),\n                    label:\"Garages\",\n                    value:(g_doors.and || g_doors.or ? g_doors.true_count+\" Opened\" : g_doors.false_count+\" Closed\"),\n                    icon_color:(g_doors.and || g_doors.or ?  'detail-warning' : 'detail-ok')\n                });\n        }         \n        if ('light_bulbs' in context.global.winkState || 'binary_switches' in context.global.winkState){\n                NewMsg.payload.home_components.push(\n                    {\n                    type:'lights',\n                    icon:'wi wi-home-icon cicon-bulb',\n                    label:\"Lights\",\n                    value:(l.powered.and || l.powered.or ? l.powered.true_count+\" ON\" : l.powered.false_count+\" OFF\"),\n                    icon_color:(l.powered.and || l.powered.or ? 'detail-warning' : 'detail-ok')\n                    });\n        }        \n        if ('remaining' in context.global.winkState.groups['.all']){\n            //node.warn('adding trippers')\n            NewMsg.payload.home_components.push(\n                {\n                    type:'propane',\n                    icon:'wi wi-home-icon ' + (all.remaining.min <=0.50  ? 'cicon-propane_tnk_half' : 'cicon-propane_tnk_full'),\n                    label:\"Propane\",\n                    value:pct(all.remaining.min),\n                    icon_color:(all.remaining.min <0.10  ?  'detail-danger' : all.remaining.min <=0.50 ? 'detail-warning' : 'detail-ok')\n                });\n        }    \n        if ('battery' in context.global.winkState.groups['.all']){\n        //node.warn('adding trippers')\n        NewMsg.payload.home_components.push(\n            {\n                type:'battery',\n                icon:'fa wi-home-icon '+(all.battery.min <0.25  ? 'fa-battery-quarter': all.battery.min <=0.50  ? 'fa-battery-half' : 'fa-battery-full'),\n                label:\"Battery\",\n                value:(all.battery.min <0.10  ? \"Check\" : all.battery.min <=0.50  ? pct(all.battery.min) :\"OK\"),\n                icon_color:(all.battery.min <0.10  ?  'detail-danger' : all.battery.min <=0.50  ?  'detail-warning' : 'detail-ok')\n            });\n        }\n        if ('Presence' in context.global && Object.getOwnPropertyNames(context.global.Presence).length > 0){\n        NewMsg.payload.home_components.push(\n            {\n                type:'presense',\n                icon:'wi wi-home-icon '+(context.global.checkPresence()  ? 'cicon-building_full': 'cicon-building_emtpy'),\n                label:\"Presence\",\n                value:(context.global.checkPresence()  ? \"Occupied\" : \"Empty\"),\n                icon_color:(context.global.checkPresence()   ?  'detail-ok' : 'detail-warning')\n            });            \n        }\n    }        \n    if (grp=='@lights') {\n        if ('light_bulbs' in context.global.winkState || 'binary_switches' in context.global.winkState){\n                NewMsg.payload.home_components.push(\n                    {\n                    type:'lights',\n                    icon:'wi wi-home-icon cicon-bulb',\n                    label:\"Lights\",\n                    value:(l.powered.and || l.powered.or ? l.powered.true_count+\" ON\" : l.powered.false_count+\" OFF\"),\n                    icon_color:(l.powered.and || l.powered.or ? 'detail-warning' : 'detail-ok')\n                    });\n        }\n    }\n    if (grp=='Presence'){\n        if ('Presence' in context.global && Object.getOwnPropertyNames(context.global.Presence).length > 0){\n        NewMsg.payload.home_components.push(\n            {\n                type:'presense',\n                icon:'wi wi-home-icon '+(context.global.checkPresence()  ? 'cicon-building_full': 'cicon-building_emtpy'),\n                label:\"Presence\",\n                value:(context.global.checkPresence()  ? \"Occupied\" : \"Empty\"),\n                icon_color:(context.global.checkPresence()   ?  'detail-ok' : 'detail-warning')\n            });            \n        }\n    }\n    return NewMsg;\n};\n\ncontext.global.sendWithTimeout = function(node1,m,delay){\n    setTimeout(function(){node1.send(m);},delay);\n}     \n\n//context.global.CountState = function(object_list){\n//    var\n//}\n\nreturn msg;\n",
    "outputs": 1,
    "noerr": 0,
    "x": 407,
    "y": 135,
    "wires": [
      [
        "74361683.8bc9e8"
      ]
    ]
  },
  {
    "id": "c407313e.3bf8d",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "func": "context.global.cleanWinkState();\n//delete context.global.winkState;\n//delete context.global.winkState.cameras;\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 228.50001525878906,
    "y": 1081.0000610351562,
    "wires": [
      []
    ]
  },
  {
    "id": "52be7578.ad418c",
    "type": "inject",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "repeat": "",
    "crontab": "",
    "once": false,
    "x": 87.50001525878906,
    "y": 1083.0000305175781,
    "wires": [
      [
        "c407313e.3bf8d"
      ]
    ]
  },
  {
    "id": "5265ec25.ad9a14",
    "type": "http in",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "url": "/red/getGlobalDataJSon",
    "method": "get",
    "x": 135.5,
    "y": 335,
    "wires": [
      [
        "31aebafd.ce5146"
      ]
    ]
  },
  {
    "id": "31aebafd.ce5146",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "Throw Wink Data",
    "func": "if(msg.req.headers.authorization && msg.req.headers.authorization==\"Bearer \"+context.global.FREEBOARD_TOKEN){\nmsg.payload.WinkData=context.global.winkState;\nmsg.payload.WinkCapbs=context.global.winkDevCap;\nmsg.payload.WeatherData=context.global.Weather;\nmsg.payload.Weather=context.global.Weather;\n//msg.payload.WinkSubscriptions=context.global.WinkSubscriptions;\nmsg.payload.Presence=context.global.checkPresence();\nmsg.payload.PresenceDetail=context.global.Presence;\nmsg.payload.PresenceHistory=context.global.PresenceHistory;\n\n//msg.payload.foscamP=context.global.FosCam;\n//msg.payload.SamsungP=context.global.SamsungCam;\nmsg.payload.DlinkCam=context.global.DlinkCam;\n//msg.payload.VCAP_SERVICES=context.global.VCAP_SERVICES\n//msg.payload.ImageArchive=context.global.ImageArchive\n//msg.payload.camera_motion=context.global.camera_motion\n//msg.payload.netatmo=context.global.netatmo\nmsg.statusCode=\"200\";\nvar Etag=\"\";\nif ('CRYPTO' in context.global){\n    Etag=context.global.CRYPTO.createHash(\"md5\").update(JSON.stringify(msg.payload),\"utf8\").digest(\"hex\");\n    msg.headers={\n       'ETag': Etag,\n       'Content-Type': 'application/json'\n    };\n//    msg.res.set({\n//       'ETag': Etag,\n//       'Content-Type': 'application/json'\n//    });\n}\nreturn msg;\n}\nelse\n{\n    //msg.payload=\"Not Authorized\";\n   msg.statusCode=\"403\";\n   node.send(msg);\n   //res.send(\"403\",\"Forbidden\");\n  return;\n}\n",
    "outputs": 1,
    "noerr": 0,
    "x": 479.9999694824219,
    "y": 331,
    "wires": [
      [
        "36f86fa.fc9079"
      ]
    ]
  },
  {
    "id": "36f86fa.fc9079",
    "type": "http response",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "x": 705,
    "y": 332,
    "wires": []
  },
  {
    "id": "e15d6605.1ea298",
    "type": "http in",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "url": "/red/wink/subscribtions",
    "method": "get",
    "x": 131,
    "y": 436,
    "wires": [
      [
        "44e7f431.bb180c"
      ]
    ]
  },
  {
    "id": "44e7f431.bb180c",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "Wink Subscription resonse",
    "func": "if (msg.payload[\"hub.mode\"]==\"subscribe\")\n{\n//    msg.res.send(200,msg.payload[\"hub.challenge\"]);\n    msg.statusCode=200;\n    msg.payload=msg.payload[\"hub.challenge\"];\n//    node.send(msg);\n}\nelse\n{\n//    msg.res.send(400,\"Bad Request darling\");\n     msg.statusCode=200;\n}\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 431,
    "y": 432,
    "wires": [
      [
        "e19525da.1e6ad8"
      ]
    ]
  },
  {
    "id": "342f1a5.fcbd0e6",
    "type": "http in",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "url": "/red/wink/subscribtions",
    "method": "post",
    "swaggerDoc": "",
    "x": 132,
    "y": 474.0000915527344,
    "wires": [
      [
        "59bae8c1.a64518"
      ]
    ]
  },
  {
    "id": "af9d69c2.506298",
    "type": "comment",
    "z": "3cc9f29d.c3360e",
    "name": "Section for status  subscription---------------------------------------------------------------------------------------------------------------------------------",
    "info": "",
    "x": 464,
    "y": 396,
    "wires": []
  },
  {
    "id": "6966e20a.96991c",
    "type": "comment",
    "z": "3cc9f29d.c3360e",
    "name": "Initialize section-----------------------------------------------------------------------------------------------------------",
    "info": "",
    "x": 367,
    "y": 27,
    "wires": []
  },
  {
    "id": "5e2491c2.a1db7",
    "type": "comment",
    "z": "3cc9f29d.c3360e",
    "name": "Weather-------------------------------------------------------------------------------------------------------------------------------",
    "info": "",
    "x": 375,
    "y": 1133.0000610351562,
    "wires": []
  },
  {
    "id": "68776814.978898",
    "type": "debug",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "active": false,
    "console": "false",
    "complete": "false",
    "x": 1062,
    "y": 1225.0001220703125,
    "wires": []
  },
  {
    "id": "8708426d.78f7c",
    "type": "http request",
    "z": "3cc9f29d.c3360e",
    "name": "Get Weather",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 439,
    "y": 1223,
    "wires": [
      [
        "ad877988.527888"
      ]
    ]
  },
  {
    "id": "522dc96b.add238",
    "type": "inject",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "repeat": "600",
    "crontab": "",
    "once": true,
    "x": 98,
    "y": 1179,
    "wires": [
      [
        "c27cf25b.3d831"
      ]
    ]
  },
  {
    "id": "c27cf25b.3d831",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "func": "var newMsg ={\n        \"url\":\"https://api.forecast.io/forecast/\"+context.global.forecastIoApiKey+\"/\"+context.global.HomeLocation.lat+\",\"+context.global.HomeLocation.lon,\n        \"method\": \"GET\"\n}\nreturn newMsg;",
    "outputs": 1,
    "noerr": 0,
    "x": 254,
    "y": 1223,
    "wires": [
      [
        "8708426d.78f7c"
      ]
    ]
  },
  {
    "id": "f9d0dc64.062f2",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "UpdateDevices",
    "func": "//node.warn('name '+msg.payload.name+' DS '+ JSON.stringify(msg.payload.desired_state))\ncontext.global.getWinkState(msg.payload);\ndelete context.global.winkState._msgid;\nmsg.statusCode=\"200\";\nreturn msg;\n",
    "outputs": 1,
    "noerr": 0,
    "x": 553.0000305175781,
    "y": 484.5,
    "wires": [
      [
        "f9a31bf4.065ce8",
        "c04bd8e9.3fb428",
        "3b1828e.fc4e7d8",
        "200fc95a.dff036",
        "e1767f8f.1e898",
        "e7dc6b60.182398",
        "a3bddabb.5c4228",
        "4c85dc23.b37a24"
      ]
    ]
  },
  {
    "id": "6e7bc65b.918438",
    "type": "comment",
    "z": "3cc9f29d.c3360e",
    "name": "Section for web services---------------------------------------------------------------------------------------------------------------------------------",
    "info": "",
    "x": 441.5,
    "y": 297.5,
    "wires": []
  },
  {
    "id": "f9a31bf4.065ce8",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "Send message to IFTTT",
    "func": "if (context.global.ifttt){\nvar WinkEvent=\"WinkEvent\"\nvar extra_param=\"\"\nvar Event_desc=\"\"\nif (msg.payload.model_name==\"Motion Sensor\") \n{\n    Event_desc= (msg.payload.last_reading.motion ? \"motion detected\":\"no motion\")\n}\nif (msg.payload.model_name==\"Tripper\") \n{\n    Event_desc= (msg.payload.last_reading.opened ? \"Opened\":\"Closed\")\n}\n\nif ('last_reading' in msg.payload && 'locked' in msg.payload.last_reading) \n{ \n    Event_desc= (msg.payload.last_reading.locked ? \"Locked\":\"Unlocked\")\n}\n\nif (msg.payload.object_type==\"binary_switch\" && (!('powered' in msg.payload.desired_state) || msg.payload.desired_state.powered===false) )\n{\n    Event_desc= (msg.payload.last_reading.powered ? \"On\":\"Off\")\n}\n\nif (msg.payload.object_type==\"garage_doors\")\n{\n    Event_desc= (msg.payload.last_reading.garage_doors==\"0\" ? \"Closed\":\"Opened\")\n}\n\nif (msg.payload.object_type==\"light_bulb\" && !('powered' in msg.payload.desired_state))\n{\n    Event_desc= (msg.payload.last_reading.powered ? \"On\":\"Off\")\n    extra_param=(msg.payload.last_reading.powered ? msg.payload.last_reading.brightness*100 : 0)\n}\nif ('liquid_detected' in msg.payload)\n{\n    Event_desc= (msg.payload.last_reading.liquid_detected ? \"Water detected\":\"No water detected\")\n}\n\nif (msg.payload.object_type ==\"propane_tanks\")\n{\n    Event_desc= (\"Propane level - \"+msg.payload.last_reading.remaining)\n}\n\nif (msg.payload.object_type ==\"powerstrips\")\n{\n    Event_Desc = msg.payload.outlets[0].name+\" \"+ (msg.payload.outlets[0].powered ? \"On, \":\"Off, \")+msg.payload.outlets[0].name+\" \"+(msg.payload.outlets[1].powered ? \"On\":\"Off\")\n}\n\nif (Event_desc!==\"\")\n{\n var newMsg ={\n                    \"url\":\"https://maker.ifttt.com/trigger/\"+WinkEvent+\"/with/key/\"+context.global.IFTTT_TOKEN,\n                    \"method\": \"POST\",\n                    headers: \n                    {\n                        \"Content-Type\":\"application/json\"\n                    },\n                    payload: \n                    {\"value1\":msg.payload.name,\"value2\":Event_desc,\"value3\":extra_param}\n            }\nnode.send(newMsg);\n}\n}\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 820,
    "y": 614.5,
    "wires": [
      [
        "ff7be324.00842"
      ]
    ]
  },
  {
    "id": "ff7be324.00842",
    "type": "http request",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "method": "use",
    "ret": "txt",
    "url": "",
    "x": 1030.000015258789,
    "y": 614.5000305175781,
    "wires": [
      []
    ]
  },
  {
    "id": "ad877988.527888",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "Get current weather",
    "func": "var pct = function(value) {\n    return ((value > 1.0 ? value : value * 100).toFixed(0) + '%')\n}\nvar dual_temp = function (value) {\n    return (typeof value === 'number' ? (value.toFixed(1) + 'F / ' + ((value -32) / 1.8).toFixed(1) + 'C') : '')\n}\n\nvar webIcon = function(icon){\n    if(icon == 'clear-day') { return \"wi-day-sunny\" }\n    if(icon == 'clear-night') { return \"wi-night-clear\" }\n    if(icon == 'rain') { return \"wi-rain\" }\n    if(icon == 'snow') { return \"wi-snow\" }\n    if(icon == 'sleet') { return \"wi-day-sleet\" }\n    if(icon == 'wind') { return \"wi-day-windy\" }\n    if(icon == 'fog') { return \"wi-fog\" }\n    if(icon == 'cloudy') { return \"wi-cloudy\" }\n    if(icon == 'partly-cloudy-day') { return \"wi-day-cloudy\" }\n    if(icon == 'partly-cloudy-night') { return \"wi-night-cloudy\" }\n    if(icon == 'hail') { return \"wi-hail\" }\n    if(icon == 'thunderstorm') { return \"wi-thunderstorm\" }\n    if(icon == 'tornado') { return \"wi-meteor\" }  \n}\n\nvar month = [];\nmonth[0] = \"January\";\nmonth[1] = \"February\";\nmonth[2] = \"March\";\nmonth[3] = \"April\";\nmonth[4] = \"May\";\nmonth[5] = \"June\";\nmonth[6] = \"July\";\nmonth[7] = \"August\";\nmonth[8] = \"September\";\nmonth[9] = \"October\";\nmonth[10] = \"November\";\nmonth[11] = \"December\";\n\nvar weekday = [];\nweekday[0]=  \"Sunday\";\nweekday[1] = \"Monday\";\nweekday[2] = \"Tuesday\";\nweekday[3] = \"Wednesday\";\nweekday[4] = \"Thursday\";\nweekday[5] = \"Friday\";\nweekday[6] = \"Saturday\";\n\nvar currDate= new Date();\nvar currHours=currDate.getHours();\nvar currMins=currDate.getMinutes();\nvar currOffset=currDate.getTimezoneOffset()*-1/60;\n\nif(msg.payload.currently)\n{\ncontext.global.Weather.Offset = (currOffset!=msg.payload.offset ? msg.payload.offset : 0);\ncontext.global.Weather.CloudCover=Math.round(msg.payload.currently.cloudCover*100);\ncontext.global.Weather.WeatherSummary=msg.payload.currently.summary;\n\nif (!('sunTimes' in context.global)) context.global.sunTimes={}\nvar sunTimes = context.global.SunCalc.getTimes(currDate, context.global.HomeLocation.lat, context.global.HomeLocation.lon);\nfor (var t in sunTimes){\n    var tstamp=new Date(sunTimes[t]).getTime();\n    var d=new Date(tstamp+context.global.Weather.Offset*3600000);\ncontext.global.sunTimes[t] =\n    {\n        \"hour\":d.getHours(),\n        \"minute\":d.getMinutes()\n    }\n}\n\ncontext.global.sunTimes.sunset_m_1={\n    \"hour\":context.global.sunTimes.sunset.hour-1,\n    \"minute\":context.global.sunTimes.sunset.minute\n}\n\nvar lDate=new Date(Date.now()+context.global.Weather.Offset*3600000);\nvar Month = month[lDate.getMonth()];\nvar weekDay = weekday[lDate.getDay()];\nvar monthDay = lDate.getDate();\n\nvar date = new Date(msg.payload.currently.time*1000);\nvar hours = date.getHours();\nvar minutes = date.getMinutes();\n//if (currHours==hours){context.global.Weather.Offset=0}\nvar date = new Date(msg.payload.daily.data[0].sunsetTime*1000);\nvar hours = date.getHours();\nvar minutes =date.getMinutes();\ncontext.global.Weather.SunsetHour=hours+context.global.Weather.Offset;\nif (context.global.Weather.SunsetHour<0)\n {\n     context.global.Weather.SunsetHour=24+context.global.Weather.SunsetHour;\n }\ncontext.global.Weather.SunsetMin=minutes;\ncontext.global.Weather.SunsetMinW=(minutes < 10 ? '0'+minutes : minutes);\nvar date = new Date(msg.payload.daily.data[0].sunriseTime*1000);\nvar hours = date.getHours();\nvar minutes =date.getMinutes();\ncontext.global.Weather.SunriseHour=hours+context.global.Weather.Offset;\ncontext.global.Weather.SunriseMin=minutes;\ncontext.global.Weather.SunriseMinW=(minutes < 10 ? '0'+minutes : minutes);\ncontext.global.Weather.outsideTemp=msg.payload.currently.temperature;\ncontext.global.Weather.PrecipationPbb=msg.payload.currently.precipProbability;\ncontext.global.Weather.HumidityOutside=msg.payload.currently.humidity;\ncontext.global.Weather.DateName=' '+weekDay+', '+Month+' '+monthDay+'.   Wink API @'+(typeof(context.global.winkState.winkAPI)!=='undefined' ? pct(context.global.winkState.winkAPI) : 'retrieving..');\n\n\ncurrHours=currHours+context.global.Weather.Offset;\nif (currHours<0)\n {\n     currHours=24+currHours;\n }\n //node.warn(\"time \"+currHours+\":\"+currMins);\nif ((currHours > context.global.Weather.SunriseHour && currHours < context.global.Weather.SunsetHour) || (currHours==context.global.Weather.SunsetHour && currMins <context.global.Weather.SunsetMin))\n{\n    var timeFrame=\"DAY\";\n}\nelse {\n    var timeFrame=\"NIGHT\";\n}\ncontext.global.Weather.currently=msg.payload.currently;\ncontext.global.Weather.timeframe=timeFrame;\ncontext.global.Weather.currently.dual_temp=dual_temp(context.global.Weather.currently.temperature);\ncontext.global.Weather.currently.humidity_pct=pct(context.global.Weather.currently.humidity);\ncontext.global.Weather.currently.clouds_pct=pct(context.global.Weather.currently.cloudCover);\ncontext.global.Weather.sun_data='Sunrise - Sunset: '+context.global.Weather.SunriseHour+':'+context.global.Weather.SunriseMinW+' - '+context.global.Weather.SunsetHour+':'+context.global.Weather.SunsetMinW\ncontext.global.Weather.currently.web_icon=webIcon(context.global.Weather.currently.icon);\ncontext.global.Weather.sunTimes=context.global.sunTimes;\n\n}\nif (msg.payload.daily){\n context.global.Weather.daily=[];\n msg.payload.daily.data.forEach(function(wday){\n    var wDate=new Date(wday.time*1000+context.global.Weather.Offset*3600000);\n    var wMonth = month[wDate.getMonth()];\n    var wDay = weekday[wDate.getDay()];\n    var wmonthDay = wDate.getDate();\n    var icon = webIcon(wday.icon)\n    context.global.Weather.daily.push({\n        \"month\":wMonth,\n        \"weekday\":wDay,\n        \"wmonthDay\":wmonthDay,\n        \"web_icon\":icon,\n        \"summary\":wday.summary,\n        \"temperatureMin\":dual_temp(wday.temperatureMin),\n        \"temperatureMax\":dual_temp(wday.temperatureMax),\n        \"humidity\":pct(wday.humidity),\n        \"cloudCover\":pct(wday.cloudCover)\n    });\n });\n}\nnewMsg = {\n    payload: {\n     weather:context.global.Weather\n    }\n};\nreturn newMsg;",
    "outputs": 1,
    "noerr": 0,
    "x": 850,
    "y": 1226.5,
    "wires": [
      [
        "68776814.978898",
        "345d2f34.cba2d"
      ]
    ]
  },
  {
    "id": "c04bd8e9.3fb428",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "Switch t-stat back to home mode if motion is detected",
    "func": "var canControl = (typeof(context.global.motionAdjustTstat)!=='undefined' ? context.global.motionAdjustTstat : 'true');\nif (msg.payload.object_type =='thermostat' && ((\"users_away\" in msg.payload.last_reading) && typeof(msg.payload.last_reading.users_away)!=='undefined' && msg.payload.last_reading.users_away) && canControl){\n    if (context.global.winkState.groups['.sensors'].motion.or || context.global.checkPresence()){\n    var newMsg ={\n    \"url\":\"https://winkapi.quirky.com/thermostats/\"+msg.payload.object_id,\n    \"method\": \"PUT\",\n    headers: {\n        \"Authorization\":\"Bearer \"+context.global.WinkToken,\n        \"Content-Type\":\"application/json\"\n    },\n    payload: {\n        \"desired_state\": {\n            \"powered\":true,\n            \"users_away\":false\n                }\n            }\n        };\n    node.send(newMsg);\n    }\n}\nif ((\"last_reading\" in msg.payload) && (\"motion\" in msg.payload.last_reading) && typeof(msg.payload.last_reading.motion!=='undefined') && msg.payload.last_reading.motion && canControl){\n    for (var key in context.global.winkState.thermostats){\n        if ((\"users_away\" in context.global.winkState.thermostats[key]) && typeof(context.global.winkState.thermostats[key].users_away)!=='undefined' && context.global.winkState.thermostats[key].users_away){\n               var newMsg ={\n                \"url\":\"https://winkapi.quirky.com/thermostats/\"+context.global.winkState.thermostats[key].object_id,\n                \"method\": \"PUT\",\n                headers: {\n                    \"Authorization\":\"Bearer \"+context.global.WinkToken,\n                    \"Content-Type\":\"application/json\"\n                },\n                payload: {\n                    \"desired_state\": {\n                     \"powered\":true,\n                    \"users_away\":false\n                }\n            }\n        };\n    node.send(newMsg); \n    }\n  }\n}\n\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 905.3958282470703,
    "y": 660.1111145019531,
    "wires": [
      [
        "51f74c1f.ae08b4"
      ]
    ]
  },
  {
    "id": "51f74c1f.ae08b4",
    "type": "http request",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 1216.3959503173828,
    "y": 660.1111145019531,
    "wires": [
      []
    ]
  },
  {
    "id": "f7092313.08f6e",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "func": "if (typeof context.global.InitialStateKey !=='undefined' && context.global.InitialStateKey !==\"\"){\ncontext.global.InitialStateBucket=\"WinkDataISN\"\nvar newMsg={\n  method: 'POST',\n  url: 'https://groker.initialstate.com/api/buckets',\n  headers: {\n    'Content-Type': 'application/json',\n    'X-IS-AccessKey': context.global.InitialStateKey,\n    'Accept-Version': '~0'\n  },\n    payload: \n    {\n    \"bucketKey\": context.global.InitialStateBucket,\n    \"bucketName\": \"Wink Data Node Red\"\n}\n}\nnode.send(newMsg);\n}\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 322.39581298828125,
    "y": 1343.3333740234375,
    "wires": [
      [
        "e98225e5.167dd8"
      ]
    ]
  },
  {
    "id": "b26a3dbc.4d95c",
    "type": "inject",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "repeat": "",
    "crontab": "",
    "once": true,
    "x": 123.39579772949219,
    "y": 1344.3333740234375,
    "wires": [
      [
        "f7092313.08f6e"
      ]
    ]
  },
  {
    "id": "e98225e5.167dd8",
    "type": "http request",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "method": "use",
    "ret": "txt",
    "url": "",
    "x": 520.5,
    "y": 1344.4444580078125,
    "wires": [
      [
        "12f17dc0.ed0e82"
      ]
    ]
  },
  {
    "id": "12f17dc0.ed0e82",
    "type": "debug",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "active": false,
    "console": "false",
    "complete": "true",
    "x": 705.5,
    "y": 1343.4444885253906,
    "wires": []
  },
  {
    "id": "49cca920.b63358",
    "type": "comment",
    "z": "3cc9f29d.c3360e",
    "name": "IS State bucket initialization -------------------------------------------------------------------------------------------------------------------------------",
    "info": "modfy bluemix-settings.json and add following line:\n\ncontext.global.InitialStateKey=\"<your initial state api key>\"",
    "x": 458,
    "y": 1292,
    "wires": []
  },
  {
    "id": "82dea50f.7d2158",
    "type": "http request",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "method": "use",
    "ret": "txt",
    "url": "",
    "x": 1024.3958129882812,
    "y": 565.8889465332031,
    "wires": [
      []
    ]
  },
  {
    "id": "3b1828e.fc4e7d8",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "Is State",
    "func": "if (typeof context.global.InitialStateKey !=='undefined'  && context.global.InitialStateKey !==\"\"){\nvar keyName;\nvar keyValue;\nvar winkObjectType=(msg.payload.object_type=='binary_switch' ? msg.payload.object_type+'es' : msg.payload.object_type+'s')\nvar pct = function(value) {\n    return ((value > 1.0 ? value : value * 100).toFixed(0) + '%')\n}\nvar dual_temp = function (value) {\n    return (typeof value === 'number' ? (value.toFixed(1) + 'C / ' + ((value * 1.8) + 32).toFixed(1) + 'F') : '')\n}\n\nvar dollars = function (value) {\n    return (typeof value === 'number' ? (value / 100).toFixed(2) : '')\n}\n\nvar GenValueText = function (property,value){\n    text =  { co_detected     : (value ? 'CO DETECTED'     : '')\n            , fault           : (value ? 'FAULT DETECTED'  : '')\n            , liquid_detected : (value ? 'LEAK DETECTED'   : '')\n            , locked          : (value ? 'LOCKED'          : 'UNLOCKED')\n            , loudness        : (value ? 'LOUD'            : '')\n            , noise           : (value ? 'NOISY'           : '')\n            , motion          : (value ? 'MOTION'          : '')\n            , opened          : (value ? 'OPEN'            : 'CLOSED')\n            , presence        : (value ? 'PRESENCE'        : '')\n            , smoke_detected  : (value ? 'SMOKE DETECTED'  : '')\n            , tamper_detected : (value ? 'TAMPER DETECTED' : '')\n            , vibration       : (value ? 'VIBRATION'       : '')\n\n            , battery         : pct(value)\n            , brightness      : pct(value)\n            , co_severity     : pct(value)\n            , humidity        : pct(value)\n            , smoke_severity  : pct(value)\n\n            , remaining       : pct(value)\n            , temperature     : value\n            }[property]\n    if (text === '') text = 'OK'\n    return text;\n}\n\nvar sendMsg = function(key,value){\n    var newMsg={\n  method: 'POST',\n  url: 'https://groker.initialstate.com/api/events',\n  headers: {\n    \"Content-Type\": \"application/json\",\n    \"X-IS-AccessKey\": context.global.InitialStateKey,\n    \"X-IS-BucketKey\": context.global.InitialStateBucket,\n    \"Accept-Version\": '~0'\n  },\n    payload: \n    {\n    \"key\": key,\n    \"value\":value\n}\n}\nnode.send(newMsg);\n}\n//node.warn(winkObjectType)\n//node.warn(msg.payload.name)\nvar ds=msg.payload.desired_state;\nvar lr=msg.payload.last_reading;\nswitch (winkObjectType){\n    case 'binary_switches':\n        if (!('powered' in ds) || ds.powered===lr.powered){\n        keyName=msg.payload.name+' Brightness';\n        keyValue=(msg.payload.last_reading.powered ? 100: 0);\n        sendMsg(keyName,keyValue);\n        }\n        break;\n    case 'light_bulbs':\n        if (!('powered' in ds) || ('powered' in ds && ds.powered==lr.powered && ds.brightness==lr.brightness)){\n        keyName=msg.payload.name+' Brightness';\n        keyValue=(msg.payload.last_reading.powered ? pct(msg.payload.last_reading.brightness) : 0);\n        sendMsg(keyName,keyValue);\n        }\n        break;\n    case 'locks':\n        keyName=msg.payload.name+' Status';\n        keyValue= GenValueText('locked',msg.payload.last_reading.locked);\n        sendMsg(keyName,keyValue);\n        break;\n    case 'thermostats':\n        keyName=msg.payload.name+' Temperature';\n        keyValue=msg.payload.last_reading.temperature;\n        sendMsg(keyName,keyValue);\n        break;\n case 'sensor_pods':\n        for (var i=0; i< context.global.winkDevCap[msg.payload.name].fields.length; i++){\n        sensor_type=context.global.winkDevCap[msg.payload.name].fields[i].field;\n        keyName=msg.payload.name+' '+context.global.winkDevCap[msg.payload.name].fields[i].field.replace(\"_\",\" \");\n        keyValue=GenValueText(context.global.winkDevCap[msg.payload.name].fields[i].field,context.global.winkState.sensor_pods[msg.payload.name][sensor_type]);\n        sendMsg(keyName,keyValue);\n        }\n        break;\n    case 'propane_tanks':\n        keyName=msg.payload.name+' Propane';\n        keyValue= GenValueText('remaining',msg.payload.last_reading.remaining);\n        sendMsg(keyName,keyValue);\n        break;\n        \n    case 'cameras':\n        //node.warn('camera subscription event '+msg.payload.last_reading.motion)\n        keyName=msg.payload.name+' Motion';\n        keyValue= GenValueText('motion',msg.payload.last_reading.motion);\n        sendMsg(keyName,keyValue);\n        break;    \n}\n\n}\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 765.2916259765625,
    "y": 566.77783203125,
    "wires": [
      [
        "82dea50f.7d2158"
      ]
    ]
  },
  {
    "id": "200fc95a.dff036",
    "type": "http response",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "x": 769.3958129882812,
    "y": 459.8888854980469,
    "wires": []
  },
  {
    "id": "e1767f8f.1e898",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "Snapshots",
    "func": "if ('camera_motion' in context.global){\nif(context.global.CloudantBkUP && (msg.payload.object_type=='camera' || msg.payload.object_type=='sensor_pod') && ('motion' in msg.payload.last_reading && msg.payload.last_reading.motion===true) && msg.payload.name in context.global.camera_motion)\n{\n    var newMsg1 ={\n    \"url\":context.global.BlueMixUrlBase+'/red/save_images?cam_list='+context.global.camera_motion[msg.payload.name]+'&object_name='+msg.payload.name,\n    \"method\": \"GET\",\n    headers: {\n        \"Authorization\":\"Bearer \"+context.global.FREEBOARD_TOKEN\n    }\n    }\n    node.send(newMsg1);\n}\n}\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 774.3958129882812,
    "y": 716.1111450195312,
    "wires": [
      [
        "2d85333c.d27acc"
      ]
    ]
  },
  {
    "id": "2d85333c.d27acc",
    "type": "http request",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "method": "use",
    "ret": "txt",
    "url": "",
    "x": 962.3958129882812,
    "y": 714.8889465332031,
    "wires": [
      []
    ]
  },
  {
    "id": "e7dc6b60.182398",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "SendNamedBasedIfttt",
    "func": "if ('IFTTT_TOKEN' in context.global && context.global.IFTTT_TOKEN!=='undefined'){\nif (msg.payload.object_type=='remote' || (msg.payload.object_type=='sensor_pod' && ('motion' in msg.payload.last_reading || 'opened' in msg.payload.last_reading)) ){\n    var winkEvent=''\n    var lr=msg.payload.last_reading;\n    var oName=msg.payload.name;\n    var oType=msg.payload.object_type\n\n if (oType=='remote') winkEvent = (lr.button_on_pressed ? 'button_on_pressed' : lr.button_off_pressed ? 'button_off_pressed' : lr.button_up_pressed ? 'button_up_pressed' : lr.button_down_pressed ? 'button_down_pressed' :  '')\n else {\n if ('motion' in lr)  winkEvent = (lr.motion ? 'motion_started' : 'motion_ended')\n if ('opened' in lr) winkEvent =  (lr.opened ? 'opened' : 'closed')\n }\n \n if (winkEvent!==''){\n var WinkEvent=oName.replace(' ','_')+'_'+winkEvent;\n var newMsg ={\n                    \"url\":\"https://maker.ifttt.com/trigger/\"+WinkEvent+\"/with/key/\"+context.global.IFTTT_TOKEN,\n                    \"method\": \"POST\",\n                    headers: \n                    {\n                        \"Content-Type\":\"application/json\"\n                    }\n            }\nnode.send(newMsg);\n}\n\n}\n\n}\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 800.3958129882812,
    "y": 767.111083984375,
    "wires": [
      [
        "d46810e6.2b97f"
      ]
    ]
  },
  {
    "id": "d46810e6.2b97f",
    "type": "http request",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "method": "use",
    "ret": "txt",
    "url": "",
    "x": 1007.3958129882812,
    "y": 768.8889770507812,
    "wires": [
      [
        "f4798ae8.0b8678"
      ]
    ]
  },
  {
    "id": "f4798ae8.0b8678",
    "type": "debug",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "active": false,
    "console": "false",
    "complete": "false",
    "x": 1184.500015258789,
    "y": 768.0000305175781,
    "wires": []
  },
  {
    "id": "5c6d82b0.a3927c",
    "type": "catch",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "x": 78.5,
    "y": 1411,
    "wires": [
      [
        "c818e88b.37e718"
      ]
    ]
  },
  {
    "id": "c818e88b.37e718",
    "type": "debug",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "active": true,
    "console": "false",
    "complete": "error",
    "x": 258.5,
    "y": 1411,
    "wires": []
  },
  {
    "id": "a3bddabb.5c4228",
    "type": "switch",
    "z": "3cc9f29d.c3360e",
    "name": "WS switch",
    "property": "payload.object_type",
    "propertyType": "msg",
    "rules": [
      {
        "t": "eq",
        "v": "light_bulb",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "binary_switch",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "powerstrip",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "lock",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "group",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "robot",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "garage_door",
        "vt": "str"
      }
    ],
    "checkall": "true",
    "outputs": 7,
    "x": 646.5,
    "y": 923,
    "wires": [
      [
        "404269e0.bfbd98"
      ],
      [
        "d568e843.2a9718"
      ],
      [
        "28ac1f59.d753e"
      ],
      [
        "90500622.6faff8"
      ],
      [
        "f2a456a9.0d5ba8"
      ],
      [
        "fda3c524.025c38"
      ],
      [
        "a35171dd.5cae9"
      ]
    ]
  },
  {
    "id": "404269e0.bfbd98",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "func": "var bulbMsg={}\nvar bulb=context.global.winkState.light_bulbs[msg.payload.name];\nvar ds=msg.payload.desired_state;\nvar lr=msg.payload.last_reading;\nif (!('powered' in ds) || ('powered' in ds && ds.powered==lr.powered && ds.brightness==lr.brightness)){\nbulbMsg.payload={\n name:bulb.name,\n            object_id:bulb.object_id,\n            powered:bulb.powered,\n            brightness:Math.round(bulb.brightness*100)\n}\n//bulbMsg.payload=context.global.encrypt(JSON.stringify(Message));\nreturn bulbMsg;\n}",
    "outputs": 1,
    "noerr": 0,
    "x": 904.5000152587891,
    "y": 883.0000305175781,
    "wires": [
      [
        "345d2f34.cba2d"
      ]
    ]
  },
  {
    "id": "d568e843.2a9718",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "func": "var binSMsg={}\nvar bulb=context.global.winkState.binary_switches[msg.payload.name];\nvar ds=msg.payload.desired_state;\nvar lr=msg.payload.last_reading;\nif (!('powered' in ds) || ds.powered===lr.powered){\nbinSMsg.payload={\n            name:bulb.name,\n            object_id:bulb.object_id,\n            powered:bulb.powered,\n            brightness:(bulb.powered ? 100:0)\n        }\nreturn binSMsg;\n}",
    "outputs": 1,
    "noerr": 0,
    "x": 906.5000152587891,
    "y": 919.0000305175781,
    "wires": [
      [
        "345d2f34.cba2d"
      ]
    ]
  },
  {
    "id": "28ac1f59.d753e",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "func": "for (var i=0;i<msg.payload.outlets.length;i++){\nvar binSMsg={}    \nvar bulb=context.global.winkState.powerstrips[msg.payload.outlets[i].name];\nif (!('powered' in bulb.desired_state) || bulb.desired_state.powered===false){\nbinSMsg.payload={\n            name:bulb.name,\n            object_id:bulb.object_id,\n            powered:bulb.powered,\n            brightness:(bulb.powered ? 100:0)\n        }\nnode.send(binSMsg);\n}\n}",
    "outputs": 1,
    "noerr": 0,
    "x": 905.5000152587891,
    "y": 954.0000305175781,
    "wires": [
      [
        "345d2f34.cba2d"
      ]
    ]
  },
  {
    "id": "90500622.6faff8",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "func": "var lockMsg={}\nvar lock=context.global.winkState.locks[msg.payload.name];\nvar ds=msg.payload.desired_state;\nvar lr=msg.payload.last_reading;\nif (!('locked' in ds) || ds.locked===lr.locked){\nlockMsg.payload={\n            name:lock.name,\n            object_type:lock.object_type,            \n            object_id:lock.object_id,\n            locked:lock.locked\n    }\n//bulbMsg.payload=context.global.encrypt(JSON.stringify(Message));\nreturn lockMsg;\n}",
    "outputs": 1,
    "noerr": 0,
    "x": 907.5000152587891,
    "y": 994.0000305175781,
    "wires": [
      [
        "345d2f34.cba2d"
      ]
    ]
  },
  {
    "id": "ed90b5a1.126f48",
    "type": "http request",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 520.5,
    "y": 559.0000610351562,
    "wires": [
      []
    ]
  },
  {
    "id": "4c85dc23.b37a24",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "UI Notifications",
    "func": "var pct = function(value) {\n    return ((value > 1.0 ? value : value * 100).toFixed(0) + '%');\n}\nfunction send_ui_note(n_type,n_timeout,n_message,obj_id){\n    var obj=obj_id||null;\n    var newMsg={\n        url:context.global.BlueMixUrlBase+'/red/notifications',\n        \"method\": \"POST\",\n        headers: {\n            \"Authorization\":\"Bearer \"+context.global.FREEBOARD_TOKEN\n        },\n        payload:{\n            \"id\":obj,\n            \"type\":n_type,\n            \"message\":n_message,\n            \"timeout\":n_timeout\n            }\n        };\n        node.send(newMsg);\n}\nif ('last_reading' in msg.payload){\n    var Obj_name=msg.payload.name;\n    var Obj_type=msg.payload.object_type;\n    var Obj_id=msg.payload.object_id;\n    var lr = msg.payload.last_reading;\n    var ds = msg.payload.desired_state;\n    if ('position' in lr && lr.position>0) send_ui_note('warning',3600000,Obj_name+' opened',Obj_id);\n    if ('opened' in lr && lr.opened) send_ui_note('warning',3600000,Obj_name+' opened',Obj_id);\n    if ('locked' in lr && !lr.locked && !('locked' in ds)) send_ui_note('warning',3600000,Obj_name+' unlocked',Obj_id);\n    if ('occupied' in lr && lr.occupied)  send_ui_note('warning',3600000,Obj_name+' occupied',Obj_id);\n    if ('motion' in lr && lr.motion)  send_ui_note('warning',3600000,Obj_name+' motion detected',Obj_id);\n    if ('button_pressed' in lr && lr.button_pressed)  send_ui_note('warning',3600000,Obj_name+' button pressed',null);\n    if ('tamber_detected' in lr && lr.tamper_detected) send_ui_note('error',3600000,Obj_name+' tamper detected!!!');\n    if ('battery' in lr && lr.battery!==null) ((lr.battery>=0.33 && lr.battery < 0.5) ? send_ui_note('information',false,Obj_name+' battery level '+ pct(lr.battery)) : (lr.battery>= 0.1 && lr.battery <0.33) ? send_ui_note('warning',60000,Obj_name+' battery level '+ pct(lr.battery)) : lr.battery<0.1 ? send_ui_note('error',false,Obj_name+' battery level '+ pct(lr.battery)) : null);\n    if ('remaining' in lr) ((lr.remaining>=0.33 && lr.remaining < 0.5) ? send_ui_note('information',false,Obj_name+' propane level '+ pct(lr.remaining)) : (lr.remaining>= 0.1 && lr.remaining <0.33) ? send_ui_note('warning',60000,Obj_name+' propane level '+ pct(lr.remaining)) : lr.remaining<0.1 ? send_ui_note('error',false,Obj_name+' propane level '+ pct(lr.remaining)) : null);\n    if ('liquid_detected' in lr && lr.liquid_detected) send_ui_note('error',false,Obj_name+' liquid detected!!!');\n    if ('smoke_detected' in lr && lr.smoke_detected) send_ui_note('error',false,Obj_name+' smoke detected!!!<br>Severity: '+pct(lr.co_severity));\n    if ('co_detected' in lr && lr.smoke_detected) send_ui_note('error',false,Obj_name+' smoke detected!!!<br>Severity: '+pct(lr.co_severity));\n    if ('enabled' in lr) send_ui_note('information',200000,'Robot \"'+Obj_name+(lr.enabled ? '\" enabled' : '\" disabled'),Obj_id);\n    if ('fired' in lr && lr.fired) send_ui_note('warning',300000,'Robot \"'+Obj_name+'\" fired',Obj_id);\n    if ('mode' in lr && Obj_type!='thermostat') send_ui_note('warning',300000,'Canary \"'+Obj_name+'\" set to '+lr.mode+' mode',Obj_id);\n    if ('garage_doors' in lr) send_ui_note('warning',300000,Obj_name+(lr.garage_doors==\"0\" ? \" Closed\":\" Opened\"),Obj_id);    \n    if ((Obj_type=='light_bulb' || Obj_type=='binary_switch' || Obj_type=='powerstrip') && context.global.LightsNotification && !('powered' in ds)) {\n        send_ui_note('notification',\"90000\",Obj_name+(lr.powered ? \" On\":\" off\") + ('brightness' in lr && lr.powered ? ' @'+pct(lr.brightness) : ''),Obj_id);\n    }\n    \n    \n}\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 775.5000152587891,
    "y": 513.0000305175781,
    "wires": [
      [
        "69f304c9.960cfc"
      ]
    ]
  },
  {
    "id": "69f304c9.960cfc",
    "type": "http request",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "method": "use",
    "ret": "txt",
    "url": "",
    "x": 1023.5000152587891,
    "y": 512.0000305175781,
    "wires": [
      []
    ]
  },
  {
    "id": "d77829f.f2887d8",
    "type": "inject",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "repeat": "",
    "crontab": "",
    "once": true,
    "x": 89.5,
    "y": 135,
    "wires": [
      [
        "a63faf92.59c05"
      ]
    ]
  },
  {
    "id": "704805ea.8fb7fc",
    "type": "inject",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "repeat": "",
    "crontab": "01 00 * * *",
    "once": false,
    "x": 93.5,
    "y": 1231,
    "wires": [
      [
        "c27cf25b.3d831"
      ]
    ]
  },
  {
    "id": "f2a456a9.0d5ba8",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "func": "var Wmsg = context.global.render_home_components(msg.payload.name);\nif (Wmsg.payload.home_components.length>0) return Wmsg\nelse return;",
    "outputs": 1,
    "noerr": 0,
    "x": 909.5,
    "y": 1032,
    "wires": [
      [
        "345d2f34.cba2d"
      ]
    ]
  },
  {
    "id": "395b9ea7.c6a462",
    "type": "http in",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "url": "/red/notifications",
    "method": "post",
    "swaggerDoc": "",
    "x": 617.5,
    "y": 1003.0000610351562,
    "wires": [
      [
        "c9db3361.3624d"
      ]
    ]
  },
  {
    "id": "c9db3361.3624d",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "func": "if(msg.req.headers.authorization && msg.req.headers.authorization==\"Bearer \"+context.global.FREEBOARD_TOKEN){\nvar newMsg={}    \nnewMsg.payload={\n    'id':msg.payload.id||null,\n    'alertType':msg.payload.type,\n    'timeout':msg.payload.timeout || false,\n    'message':msg.payload.message\n }\nmsg.res.statuCode=200;\nnode.send([msg, newMsg]);\n} else { \n    msg.res.statusCode=200\n    node.send([msg]);\n}",
    "outputs": "2",
    "noerr": 0,
    "x": 897.5,
    "y": 1146,
    "wires": [
      [
        "ade1fc48.521e"
      ],
      [
        "345d2f34.cba2d"
      ]
    ]
  },
  {
    "id": "ade1fc48.521e",
    "type": "http response",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "x": 1120.5,
    "y": 1106,
    "wires": []
  },
  {
    "id": "74361683.8bc9e8",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "func": "    var newMsg1 ={\n    \"url\":context.global.BlueMixUrlBase+'/red/update_app_cfg',\n    \"method\": \"POST\",\n    headers: {\n        \"Authorization\":\"Bearer \"+context.global.FREEBOARD_TOKEN\n    },\n    payload:{\n       db_mode:\"read\"\n    }\n    }\nreturn newMsg1;",
    "outputs": 1,
    "noerr": 0,
    "x": 584.5,
    "y": 130,
    "wires": [
      [
        "e30a7a0b.1cf588"
      ]
    ]
  },
  {
    "id": "e30a7a0b.1cf588",
    "type": "http request",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "method": "use",
    "ret": "txt",
    "url": "",
    "x": 748.5,
    "y": 131,
    "wires": [
      []
    ]
  },
  {
    "id": "5fc1b828.a03e48",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "func": "var pct = function(value) {\n    return ((value > 1.0 ? value : value * 100).toFixed(0) + '%')\n}\nvar dual_temp = function (value) {\n    return (typeof value === 'number' ? (value.toFixed(1) + 'C / ' + ((value * 1.8) + 32).toFixed(1) + 'F') : '')\n}\n\nvar all=context.global.winkState.groups['.all'];\nvar l=context.global.winkState.groups['@lights'];\n\n\nvar NewMsg={\n    payload:{\n        home_components:[]\n    }\n};\nvar grp=msg.payload.name;\n//node.warn(grp);\nif (grp==='.all') \n{ \n     if ('temperature' in context.global.winkState.groups['.all']){\n        NewMsg.payload.home_components.push(\n            {\n                type:'temperature',\n                icon:'wi wi-home-icon wi-thermometer',\n                label:\"Temperature\",\n                value:dual_temp(all.temperature.average),\n                icon_color:(all.temperature.average<10 || all.temperature.average > 50 ? 'detail-warning' : 'detail-ok')\n            });\n    }\n    if ('humidity' in context.global.winkState.groups['.all']){\n        NewMsg.payload.home_components.push(\n            {\n                type:'humidity',\n                icon:'wi wi-home-icon wi-humidity',\n                label:\"Humidity\",\n                value:pct(all.humidity.average),\n                icon_color:(all.humidity.average < 0.1 || all.humidity.average > 90 ? 'detail-warning' : 'detail-ok')\n            });\n    }\n    if ('smoke_detected' in context.global.winkState.groups['.all']){\n        NewMsg.payload.home_components.push(\n            {\n                type:'smoke_detected',\n                icon:'wi wi-home-icon cicon-fire',\n                label:\"Smoke\",\n                value:(all.smoke_detected.and || all.smoke_detected.or ? \"Fire!!\" : \"OK\"),\n                icon_color: (all.smoke_detected.and || all.smoke_detected.or ? \"detail-danger\" : \"detail-ok\")\n            });\n        NewMsg.payload.home_components.push(\n            {\n                type:'co_detected',\n                icon:'wi wi-home-icon cicon-CO2',\n                label:\"CO2\",\n                value:(all.co_detected.and || all.co_detected.or ? \"CO2!!\" : \"OK\"),\n                icon_color:(all.co_detected.and || all.co_detected.or ? \"detail-danger\" : \"detail-ok\"),\n            });\n    }\n    if ('liquid_detected' in context.global.winkState.groups['.all']){\n        NewMsg.payload.home_components.push(\n            {\n            type:'liquid_detected',\n            icon:'wi wi-home-icon cicon-droplet',\n            label:\"Leaks\",\n            value:(all.liquid_detected.and || all.liquid_detected.or ? \"Leak detected!!\" : \"No Leaks\"),\n            icon_color:(all.liquid_detected.and || all.liquid_detected.or ?  \"detail-danger\" : \"detail-ok\")\n        });\n    }\n    if ('motion' in context.global.winkState.groups['.all']){\n        NewMsg.payload.home_components.push(\n            {\n                type:'motion',\n                icon:'wi wi-home-icon cicon-feed',\n                label:\"Motion\",\n                value:(all.motion.and || all.motion.or ? \"Motion\" : \"No Motion\"),\n                icon_color:(all.motion.and || all.motion.or ?  'detail-warning' : 'detail-ok')\n            });\n    }\n    if ('locked' in context.global.winkState.groups['.all']){\n        NewMsg.payload.home_components.push(\n            {\n                type:'locked', \n                icon:'wi wi-home-icon cicon-doors4',\n                label:\"Locks\",\n                value:(all.locked.and || all.locked.or ? all.locked.true_count+\" Locked\" : all.locked.false_count+\" Unlocked\"),\n                icon_color:(all.locked.and || all.locked.or ?  'detail-ok' : 'detail-warning')\n            });\n    }\n    \n    if ('opened' in context.global.winkState.groups['.all']){\n        NewMsg.payload.home_components.push(\n            {\n                type:'opened',\n                icon:'wi wi-home-icon '+(all.opened.and || all.opened.or ? 'cicon-opened_door':'cicon-closed_door'),\n                label:\"Doors\",\n                value:(all.opened.and || all.opened.or ? all.opened.true_count+\" Opened\" : all.opened.false_count+\" Closed\"),\n                icon_color:(all.opened.and || all.opened.or ?  'detail-warning' : 'detail-ok')\n            });\n    }\n    \n    if ('remaining' in context.global.winkState.groups['.all']){\n        //node.warn('adding trippers')\n        NewMsg.payload.home_components.push(\n            {\n                type:'propane',\n                icon:'wi wi-home-icon ' + (all.remaining.min <=0.50  ? 'cicon-propane_tnk_half' : 'cicon-propane_tnk_full'),\n                label:\"Propane\",\n                value:pct(all.remaining.min),\n                icon_color:(all.remaining.min <0.10  ?  'detail-danger' : all.remaining.min <=0.50 ? 'detail-warning' : 'detail-ok')\n            });\n    }    \n    if ('battery' in context.global.winkState.groups['.all']){\n    //node.warn('adding trippers')\n    NewMsg.payload.home_components.push(\n        {\n            type:'battery',\n            icon:'fa wi-home-icon '+(all.battery.min <0.25  ? 'fa-battery-quarter': all.battery.min <=0.50  ? 'fa-battery-half' : 'fa-battery-full'),\n            label:\"Battery\",\n            value:(all.battery.min <0.10  ? \"Check\" : all.battery.min <=0.50  ? pct(all.battery.min) :\"OK\"),\n            icon_color:(all.battery.min <0.10  ?  'detail-danger' : all.battery.min <=0.50  ?  'detail-warning' : 'detail-ok')\n        });\n}\n    return NewMsg;\n}\nif (grp=='@lights') {\n    if ('light_bulbs' in context.global.winkState || 'binary_switches' in context.global.winkState){\n            NewMsg.payload.home_components.push(\n                {\n                type:'lights',\n                icon:'wi wi-home-icon cicon-bulb',\n                label:\"Lights\",\n                value:(l.powered.and || l.powered.or ? l.powered.true_count+\" ON\" : l.powered.false_count+\" OFF\"),\n                icon_color:(l.powered.and || l.powered.or ? 'detail-warning' : 'detail-ok')\n                });\n    }\n    return NewMsg;\n}\n",
    "outputs": 1,
    "noerr": 0,
    "x": 1137.000015258789,
    "y": 1024.0000305175781,
    "wires": [
      []
    ]
  },
  {
    "id": "86d240bc.792dc",
    "type": "http in",
    "z": "3cc9f29d.c3360e",
    "name": "wscomms",
    "url": "/red/wscomms",
    "method": "post",
    "swaggerDoc": "",
    "x": 745.0000152587891,
    "y": 845.0000305175781,
    "wires": [
      [
        "6eac013f.9154"
      ]
    ]
  },
  {
    "id": "6eac013f.9154",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "func": "if(msg.req.headers.authorization && msg.req.headers.authorization==\"Bearer \"+context.global.FREEBOARD_TOKEN){\nreturn msg;\n} else { \nreturn;\n}",
    "outputs": "1",
    "noerr": 0,
    "x": 907.0000152587891,
    "y": 844.0000305175781,
    "wires": [
      [
        "136be077.ec942",
        "345d2f34.cba2d"
      ]
    ]
  },
  {
    "id": "136be077.ec942",
    "type": "http response",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "x": 1074.000015258789,
    "y": 843.0000305175781,
    "wires": []
  },
  {
    "id": "12dd25b1.ed22da",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "Standardize the response if useRobots is true",
    "func": "context.global.timestamp=new Date();\n//context.global.useRobots=true;\nif (!('winkChanged' in context.global)) context.global.winkChanged={};\nif ('useRobots' in context.global && context.global.useRobots) {\n\n    // Filter out system groups / system devices.\n//    if (msg.payload.name.substring(0,1)!==\".\" && msg.payload.name.substring(0,1)!==\"@\") \n      if (msg.payload.object_type && msg.payload.object_type!=='group')\n        {\n        // Create variable if it doesn't exist already.\n        if (typeof context.global.winkChanged[msg.payload.name]==='undefined') { context.global.winkChanged[msg.payload.name] = {} }\n\n        // Create new_state if it doesn't exist already.\n        if (typeof context.global.winkChanged[msg.payload.name].new_state==='undefined') \n        {\n            context.global.winkChanged[msg.payload.name].new_state = {}\n        }\n        else { \n            // If new_state already exists, then just set old_state == to new_state.\n            context.global.winkChanged[msg.payload.name].old_state=context.global.winkChanged[msg.payload.name].new_state;\n        }\n        \n        if ('last_reading' in msg.payload)\n\t\t{\n\t\t\tvar lr = msg.payload.last_reading;\n\t\t\tvar ds = msg.payload.desired_state;\n\n\t\t\tif ('temperature' in lr)\n\t\t\t{\n\t\t\t\tif ('occupied' in lr)\n\t\t\t\t{\n\t\t\t\t\tcontext.global.winkChanged[msg.payload.name].new_state = {\n\t\t\t\t\t\toccupied:lr.occupied,\n\t\t\t\t\t\ttemperature:((lr.temperature)*1.8+32).toFixed(2)\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tcontext.global.winkChanged[msg.payload.name].new_state = ((lr.temperature)*1.8+32).toFixed(2);\n\t\t\t\t}\n\t\t\t}\n        \n\t\t\tif('enabled' in lr)\n\t\t\t{\n\t\t\t\tcontext.global.winkChanged[msg.payload.name].new_state = (lr.enabled ? context.global.timestamp:\"disabled\")\n\t\t\t}\n        \n\t\t\tif ('motion' in lr)\n\t\t\t{\n\t\t\t\tcontext.global.winkChanged[msg.payload.name].new_state = lr.motion\n\t\t\t}\n\n\t\t\tif ('opened' in lr) \n\t\t\t{\n\t\t\t\tcontext.global.winkChanged[msg.payload.name].new_state = (lr.opened ? \"Opened\":\"Closed\")\n\t\t\t}\n        \n\t\t\tif ('locked' in lr && !('locked' in ds)) \n\t\t\t{\n\t\t\t\tcontext.global.winkChanged[msg.payload.name].new_state = (lr.locked ? \"Locked\":\"Unlocked\")\n\t\t\t}\n        \n\t\t\tif (msg.payload.object_type==\"binary_switch\" && !('powered' in ds))\n\t\t\t{\n\t\t\t\tcontext.global.winkChanged[msg.payload.name].new_state = (lr.powered ? \"On\":\"Off\")\n\t\t\t}\n        \n/*\t\t\tif ('position' in lr)\n\t\t\t{\n\t\t\t\tcontext.global.winkChanged[msg.payload.name].new_state = (lr.position==\"0\" ? \"Closed\":\"Opened\")\n\t\t\t}*/\n        \n\t\t\tif (msg.payload.object_type==\"light_bulb\" && !('powered' in ds))\n\t\t\t{\n\t\t\t\tcontext.global.winkChanged[msg.payload.name].new_state = {\n\t\t\t\t\tpowered:(lr.powered ? \"On\":\"Off\"),\n\t\t\t\t\tbrightness:(lr.powered ? lr.brightness*100 : 0)\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif ('presence' in lr)\n\t\t\t{\n\t\t\t    context.global.winkChanged[msg.payload.name].new_state = lr.presence\n\t\t\t}\n        \n\t\t\tif ('liquid_detected' in lr)\n\t\t\t{\n\t\t\t\tcontext.global.winkChanged[msg.payload.name].new_state = lr.liquid_detected\n\t\t\t}\n        \n\t\t\tif (msg.payload.object_type ==\"propane_tank\")\n\t\t\t{\n\t\t\t\tcontext.global.winkChanged[msg.payload.name].new_state = lr.remaining\n\t\t\t}\n        \n\t\t\tif (msg.payload.object_type ==\"powerstrip\")\n\t\t\t{\n\t\t\t\tcontext.global.winkChanged[msg.payload.name].new_state = msg.payload.outlets[0].name+\" \"+ (msg.payload.outlets[0].powered ? \"On, \":\"Off, \")+msg.payload.outlets[0].name+\" \"+(msg.payload.outlets[1].powered ? \"On\":\"Off\")\n\t\t\t}\n\t\t\tif (msg.payload.object_type ==\"remote\")\n\t\t\t{\n\t\t\t    context.global.winkChanged[msg.payload.name].new_state = lr;\n\t\t\t}\n\t\t}\n/*\t\t\n        // This section echos the change to the debug pane. First, make sure something changed.\n        if (context.global.winkChanged[msg.payload.name].old_state!==context.global.winkChanged[msg.payload.name].new_state)\n        {\n            // If it's not a light bulb or switch...\n            if (typeof context.global.winkChanged[msg.payload.name].new_state.powered==='undefined')\n            {\n                // Check if it's an occupancy sensor, in which case new_state is an object and doesn't echo to debug nicely.\n                if (typeof context.global.winkChanged[msg.payload.name].new_state.occupied!=='undefined')\n                {\n                    node.warn(msg.payload.name+\" changed to occupancy \"+context.global.winkChanged[msg.payload.name].new_state.occupied+\" and temperature \"+context.global.winkChanged[msg.payload.name].new_state.temperature+\"*F\")\n                }\n                else {\n                    // Otherwise, just output old_state to new_state\n                    node.warn(msg.payload.name+\" changed from \"+context.global.winkChanged[msg.payload.name].old_state+\" to \"+context.global.winkChanged[msg.payload.name].new_state);\n                }\n            } \n            // If it IS a light bulb or switch...\n            else \n            {\n                // Old doesn't match new states so that means we're turning the bulb or switch on/off\n                if (context.global.winkChanged[msg.payload.name].old_state.powered!==context.global.winkChanged[msg.payload.name].new_state.powered)\n                {\n                    node.warn(msg.payload.name+\" turned \"+context.global.winkChanged[msg.payload.name].new_state.powered+\" (Brightness: \"+context.global.winkChanged[msg.payload.name].new_state.brightness+\"%)\");    \n                }\n                // The bulb/switch was already on, we just changed brightness.\n                else if (context.global.winkChanged[msg.payload.name].new_state.powered==\"On\")\n                {\n                    node.warn(msg.payload.name+\" changed brightness from \"+context.global.winkChanged[msg.payload.name].old_state.brightness+\"% to \"+context.global.winkChanged[msg.payload.name].new_state.brightness+\"%\");\n                }\n            }\n        } */\n\n        // Load the standardized text into an HTTP request to send to the \"Robots\" tab.\n        var newMsg = {\n            url:context.global.BlueMixUrlBase+'/red/robots',\n            \"method\": \"POST\",\n            headers: {\n                \"Authorization\":\"Bearer \"+context.global.FREEBOARD_TOKEN\n            },\n            payload:{\n                'name':msg.payload.name,\n                'object_type':msg.payload.object_type,\n                'new_state':context.global.winkChanged[msg.payload.name].new_state,\n                'old_state':context.global.winkChanged[msg.payload.name].old_state\n            }\n        };\n        return newMsg;\n    }\n}",
    "outputs": 1,
    "noerr": 0,
    "x": 236,
    "y": 553.0000610351562,
    "wires": [
      [
        "ed90b5a1.126f48"
      ]
    ]
  },
  {
    "id": "345d2f34.cba2d",
    "type": "websocket out",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "server": "d6e6e1f9.29192",
    "client": "",
    "x": 1194.500015258789,
    "y": 907.0000305175781,
    "wires": []
  },
  {
    "id": "e19525da.1e6ad8",
    "type": "http response",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "x": 657,
    "y": 430,
    "wires": []
  },
  {
    "id": "fda3c524.025c38",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "func": "var robotMsg={}\nvar robot=context.global.winkState.robots[msg.payload.name];\nvar n=msg.payload.name;\nvar ds=msg.payload.desired_state;\nvar lr=msg.payload.last_reading;\nif (n in context.global.winkState.robots && (!('enabled' in ds) || ds.enabled===lr.enabled)){\nrobotMsg.payload={\n            name:robot.name,\n            object_id:robot.object_id,\n            enabled:robot.enabled\n    }\n//bulbMsg.payload=context.global.encrypt(JSON.stringify(Message));\nreturn robotMsg;\n}",
    "outputs": 1,
    "noerr": 0,
    "x": 908,
    "y": 1071,
    "wires": [
      [
        "345d2f34.cba2d"
      ]
    ]
  },
  {
    "id": "a35171dd.5cae9",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "func": "var Wmsg = context.global.render_home_components(msg.payload.object_type);\nvar ds=msg.payload.desired_state;\nvar lr=msg.payload.last_reading;\nif (Wmsg.payload.home_components.length>0) {\n    node.send(Wmsg);\n    var lockMsg={}\n    var lock=context.global.winkState.garage_doors[msg.payload.name];\n    if (!('position' in ds) || ds.position===lr.position){\n        lockMsg.payload={\n                name:lock.name,\n                object_id:lock.object_id,\n                object_type:lock.object_type,\n                locked:(lock.position>0 ? false:true),\n                not_locked:(lock.position>0 ? true:false)\n        }\n        node.send(lockMsg);\n    }\n}\nelse return;",
    "outputs": 1,
    "noerr": 0,
    "x": 904,
    "y": 1111,
    "wires": [
      [
        "345d2f34.cba2d"
      ]
    ]
  },
  {
    "id": "59bae8c1.a64518",
    "type": "delay",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "pauseType": "rate",
    "timeout": "5",
    "timeoutUnits": "seconds",
    "rate": "2",
    "rateUnits": "second",
    "randomFirst": "1",
    "randomLast": "5",
    "randomUnits": "seconds",
    "drop": false,
    "x": 346,
    "y": 478,
    "wires": [
      [
        "f9d0dc64.062f2",
        "12dd25b1.ed22da"
      ]
    ]
  },
  {
    "id": "415c07e7.bea3f8",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "Get OAuth Tocken",
    "func": "var uid=context.global.WinkUser.uid;\nvar pwd=context.global.WinkUser.pwd;\nvar w1=context.global.wnr.w1;\nvar w2=context.global.wnr.w2;\nvar newMsg ={\n    \"url\":\"https://winkapi.quirky.com/oauth2/token\",\n    \"method\": \"POST\",\n    headers: {\n        \"Content-Type\":\"application/json\"\n    },\n    payload: {\n        \"client_id\": w1,\n        \"client_secret\":w2,\n        \"username\": uid,\n        \"password\": pwd,\n        \"grant_type\": \"password\"\n    }\n}\nreturn newMsg;",
    "outputs": 1,
    "noerr": 0,
    "x": 403,
    "y": 90,
    "wires": [
      [
        "8d1fe489.72e018"
      ]
    ]
  },
  {
    "id": "bf8e4809.4071b8",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "CheckResposeCode",
    "func": "if (typeof context.global.WinkSubscriptions === 'undefined')\n{\n    context.global.WinkSubscriptions = {};\n}\nif (msg.statusCode==202)\n{\n    node.warn(\"Subscription ID: \"+msg.payload.data.subscription_id);\n    context.global.WinkSubscriptions[msg.payload.data.subscription_id]={\n        \"subscription_id\": msg.payload.data.subscription_id,\n        \"url_base\":msg.payload.data.topic,\n        \"callback\":msg.payload.data.callback\n    }\n}\nelse\n{\n    node.warn(\"Subscription issue. Status: \"+msg.statusCode);\n}\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 988,
    "y": 251.00003051757812,
    "wires": [
      []
    ]
  },
  {
    "id": "94ff3051.6b00d",
    "type": "http request",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 793,
    "y": 251,
    "wires": [
      [
        "bf8e4809.4071b8"
      ]
    ]
  },
  {
    "id": "f10e31fa.0ef1d",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "Prepare Wink devices subscription request",
    "func": "var baseUrl = \"https://winkapi.quirky.com/\";\nvar callbackUrl=context.global.BlueMixUrlBase+\"/red/wink/subscribtions\";\n   for (var winkDevice in context.global.winkState)\n    {\n        if (winkDevice!=\"linked_services\")\n        {\n            var deviceUrl=baseUrl+winkDevice;\n            for (var winkDeviceName in context.global.winkState[winkDevice])\n            {\n                deviceId=context.global.winkState[winkDevice][winkDeviceName].object_id;\n                node.warn(winkDeviceName+\" \"+deviceId);\n                var newMsg ={\n                    \"url\":baseUrl+\"/\"+winkDevice+\"/\"+deviceId+\"/subscriptions\",\n                    \"method\": \"POST\",\n                    headers: {\n                        \"Authorization\":\"Bearer \"+context.global.WinkToken,\n                        \"User-Agent\":\"Manufacturer/Darwin node/0.10.30 Wink/999.99.9\",\n                        \"Content-Type\":\"application/json\"\n                    },\n                    payload: {\n                        \"callback\": callbackUrl\n                    }\n                };\n                node.send(newMsg);\n            }\n        }\n    }\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 525.0001220703125,
    "y": 252,
    "wires": [
      [
        "94ff3051.6b00d"
      ]
    ]
  },
  {
    "id": "56989573.a9676c",
    "type": "delay",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "pauseType": "delay",
    "timeout": "45",
    "timeoutUnits": "seconds",
    "rate": "1",
    "rateUnits": "second",
    "randomFirst": "1",
    "randomLast": "5",
    "randomUnits": "seconds",
    "drop": false,
    "x": 238.9999542236328,
    "y": 252,
    "wires": [
      [
        "f10e31fa.0ef1d"
      ]
    ]
  },
  {
    "id": "8d383861.72c7c8",
    "type": "inject",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "topic": "",
    "payload": "",
    "payloadType": "str",
    "repeat": "82800",
    "crontab": "",
    "once": true,
    "x": 76.99995422363281,
    "y": 252,
    "wires": [
      [
        "56989573.a9676c"
      ]
    ]
  },
  {
    "id": "d1522a1.f2eadd8",
    "type": "inject",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "topic": "",
    "payload": "",
    "payloadType": "str",
    "repeat": "86400",
    "crontab": "",
    "once": true,
    "x": 75,
    "y": 95,
    "wires": [
      [
        "6976c734.968938"
      ]
    ]
  },
  {
    "id": "6976c734.968938",
    "type": "delay",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "pauseType": "delay",
    "timeout": "15",
    "timeoutUnits": "seconds",
    "rate": "1",
    "rateUnits": "second",
    "randomFirst": "1",
    "randomLast": "5",
    "randomUnits": "seconds",
    "drop": false,
    "x": 217.5,
    "y": 71,
    "wires": [
      [
        "415c07e7.bea3f8"
      ]
    ]
  },
  {
    "id": "8d1fe489.72e018",
    "type": "http request",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 587,
    "y": 90,
    "wires": [
      [
        "5d8cc2ca.a2733c"
      ]
    ]
  },
  {
    "id": "5d8cc2ca.a2733c",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "DefineGlobalTocken",
    "func": "// sample function that stores wink token in a global variable so other api calls\n//can use that\ncontext.global.WinkToken=msg.payload.data.access_token;\nnode.log(context.global.WinkToken);\nvar msg ={ \"payload\":\"Done\"}\nreturn msg;",
    "outputs": 1,
    "x": 778,
    "y": 91,
    "wires": [
      [
        "5296d1cb.ad693"
      ]
    ]
  },
  {
    "id": "5296d1cb.ad693",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "Prepare HTTPS requests by device type",
    "func": "context.global.cleanWinkState();\nvar newMsg1 ={\n    \"url\":\"https://winkapi.quirky.com/users/me/wink_devices\",\n    \"method\": \"GET\",\n    headers: {\n        \"Authorization\":\"Bearer \"+context.global.WinkToken,\n        \"User-Agent\":\"Manufacturer/Darwin node/0.10.30 Wink/999.99.9\"\n    }\n}\nvar newMsg2 ={\n    \"url\":\"https://winkapi.quirky.com/users/me/linked_services\",\n    \"method\": \"GET\",\n    headers: {\n        \"Authorization\":\"Bearer \"+context.global.WinkToken\n       // \"User-Agent\":\"Manufacturer/Darwin node/0.10.30 Wink/3.1.0\"\n }\n\n}\n\nvar newMsg3 ={\n    \"url\":\"https://winkapi.quirky.com/users/me/groups\",\n    \"method\": \"GET\",\n    headers: {\n        \"Authorization\":\"Bearer \"+context.global.WinkToken,\n        \"User-Agent\":\"Manufacturer/Darwin node/0.10.30 Wink/999.99.9\"\n }\n\n}\n\nvar newMsg4 ={\n    \"url\":\"https://winkapi.quirky.com/users/me/scenes\",\n    \"method\": \"GET\",\n    headers: {\n        \"Authorization\":\"Bearer \"+context.global.WinkToken,\n        \"User-Agent\":\"Manufacturer/Darwin node/0.10.30 Wink/999.99.9\"\n  }\n}\n\nvar newMsg5 ={\n    \"url\":\"https://winkapi.quirky.com/users/me/robots\",\n    \"method\": \"GET\",\n    headers: {\n        \"Authorization\":\"Bearer \"+context.global.WinkToken,\n        \"User-Agent\":\"Manufacturer/Darwin node/0.10.30 Wink/999.99.9\"\n  }\n}\n\nreturn [newMsg1,newMsg2,newMsg3,newMsg4,newMsg5];\n//return [newMsg1,newMsg2,newMsg3,newMsg4,newMsg5,newMsg6,newMsg7,newMsg8,newMsg9,newMsg10,newMsg11];\n",
    "outputs": "5",
    "noerr": 0,
    "x": 1070,
    "y": 95,
    "wires": [
      [
        "5d67b2af.a2984c"
      ],
      [
        "1d63f731.e29c09"
      ],
      [
        "18413543.e7becb"
      ],
      [
        "62d1b49d.9d2e4c"
      ],
      [
        "8e7f082c.7180f8"
      ]
    ]
  },
  {
    "id": "5d67b2af.a2984c",
    "type": "http request",
    "z": "3cc9f29d.c3360e",
    "name": "GetWDevices",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 1408,
    "y": 54,
    "wires": [
      [
        "f558852b.0aa778"
      ]
    ]
  },
  {
    "id": "1d63f731.e29c09",
    "type": "http request",
    "z": "3cc9f29d.c3360e",
    "name": "GetWServices",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 1387,
    "y": 95.5,
    "wires": [
      [
        "8303f4f1.7cfc08"
      ]
    ]
  },
  {
    "id": "18413543.e7becb",
    "type": "delay",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "pauseType": "delay",
    "timeout": "15",
    "timeoutUnits": "seconds",
    "rate": "1",
    "rateUnits": "second",
    "randomFirst": "1",
    "randomLast": "5",
    "randomUnits": "seconds",
    "drop": false,
    "x": 1369.5,
    "y": 139,
    "wires": [
      [
        "60c9a2ca.9f365c"
      ]
    ]
  },
  {
    "id": "62d1b49d.9d2e4c",
    "type": "http request",
    "z": "3cc9f29d.c3360e",
    "name": "GetWScenes",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 1383,
    "y": 179.5,
    "wires": [
      [
        "8a738f2.f758c7"
      ]
    ]
  },
  {
    "id": "8e7f082c.7180f8",
    "type": "http request",
    "z": "3cc9f29d.c3360e",
    "name": "GetWRobots",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 1377.4999542236328,
    "y": 222,
    "wires": [
      [
        "8cf8388a.7307c8"
      ]
    ]
  },
  {
    "id": "f558852b.0aa778",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "GetDevices",
    "func": "context.global.getWinkState(msg.payload);\ndelete context.global.winkState._msgid;\nif (\"cameras\" in context.global.winkState){\n    for (var key in context.global.winkState.cameras){\n        if (context.global.winkState.cameras[key].manufacturer_device_model.indexOf(\"dropcam\")!=-1){\n            var newMsg1 ={\n                \"url\":context.global.BlueMixUrlBase+'/red/retrieve_activities?camera_name='+key,\n                \"method\": \"GET\",\n                headers: {\n                    \"Authorization\":\"Bearer \"+context.global.FREEBOARD_TOKEN\n                }\n            }\n            node.send(newMsg1);\n        }\n    }\n}\nnode.warn(\"Device import completed\");\nreturn;\n",
    "outputs": 1,
    "noerr": 0,
    "x": 1708.0000457763672,
    "y": 45.5,
    "wires": [
      [
        "717fa828.8e8058"
      ]
    ]
  },
  {
    "id": "8303f4f1.7cfc08",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "GetServices",
    "func": "context.global.getWinkState(msg.payload);\ndelete context.global.winkState._msgid;\nreturn;\n",
    "outputs": 1,
    "x": 1582,
    "y": 95.5,
    "wires": [
      []
    ]
  },
  {
    "id": "60c9a2ca.9f365c",
    "type": "http request",
    "z": "3cc9f29d.c3360e",
    "name": "GetWGroups",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 1545,
    "y": 134.5,
    "wires": [
      [
        "79372153.86c8e"
      ]
    ]
  },
  {
    "id": "79372153.86c8e",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "GetGroups",
    "func": "context.global.getWinkState(msg.payload);\ndelete context.global.winkState._msgid;\nreturn;\n",
    "outputs": 1,
    "x": 1770,
    "y": 133.5,
    "wires": [
      []
    ]
  },
  {
    "id": "8a738f2.f758c7",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "GetScenes",
    "func": "context.global.getWinkState(msg.payload);\ndelete context.global.winkState._msgid;\nreturn;\n",
    "outputs": 1,
    "x": 1570.0000457763672,
    "y": 180.5,
    "wires": [
      []
    ]
  },
  {
    "id": "717fa828.8e8058",
    "type": "http request",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 1871.0625,
    "y": 46.888885498046875,
    "wires": [
      []
    ]
  },
  {
    "id": "8cf8388a.7307c8",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "GetRobots",
    "func": "context.global.getWinkState(msg.payload);\ndelete context.global.winkState._msgid;\nreturn;\n",
    "outputs": 1,
    "noerr": 0,
    "x": 1564.5,
    "y": 223,
    "wires": [
      []
    ]
  },
  {
    "id": "702e2850.8fd1d8",
    "type": "http in",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "url": "/red/wink_query",
    "method": "post",
    "swaggerDoc": "",
    "x": 105,
    "y": 179,
    "wires": [
      [
        "b423379c.4bdcc8"
      ]
    ]
  },
  {
    "id": "b423379c.4bdcc8",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "func": "if (msg.payload.token ==context.global.FREEBOARD_TOKEN || context.global.getCookie('exchange_token',msg.req.headers.cookie)==context.global.FREEBOARD_TOKEN){\n    msg.statusCode=200;\n    msg.payload=\"aaa\";\n    node.send(msg);\n}\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 330,
    "y": 184,
    "wires": [
      [
        "415c07e7.bea3f8",
        "4d5fc8bb.b2a038",
        "664b5781.99b4a8",
        "56989573.a9676c"
      ]
    ]
  },
  {
    "id": "664b5781.99b4a8",
    "type": "http response",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "x": 548,
    "y": 168,
    "wires": []
  },
  {
    "id": "4d5fc8bb.b2a038",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "func": "msg.payload={}\nmsg.payload.token=context.global.FREEBOARD_TOKEN\nmsg.url=context.global.BlueMixUrlBase+\"/red/blueiris\"\nmsg.method=\"POST\"\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 539,
    "y": 203,
    "wires": [
      [
        "ef5fc04e.10a04"
      ]
    ]
  },
  {
    "id": "ef5fc04e.10a04",
    "type": "http request",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "method": "use",
    "ret": "txt",
    "url": "",
    "x": 758,
    "y": 199,
    "wires": [
      []
    ]
  }
]
