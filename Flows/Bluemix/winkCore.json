[
  {
    "id": "628aa159.9d756",
    "type": "websocket-listener",
    "path": "/ws/winkStat",
    "wholemsg": "false"
  },
  {
    "id": "38c892d4.c7376e",
    "type": "function",
    "name": "DefineGlobalObjects",
    "func": "//use this function to initialize global variables that can be used in any flow or function\n//and will keep their values while application is running\nif (typeof context.global.ifttt === 'undefined')\n{\n    context.global.ifttt=false;\n}\n\nif (typeof (context.global.PresenceHistory) === 'undefined') context.global.PresenceHistory=[]\n\nif (typeof(context.global.Presence) === 'undefined')\n{\n    context.global.Presence = {}  \n}\n\nif (typeof context.global.ignoreMotion === 'undefined')\n{\n    context.global.ignoreMotion=false;\n}\nif (typeof context.global.mediaPlaying==='undefined')\n{\n    context.global.mediaPlaying=false;\n}\nif (typeof context.global.Weather === 'undefined')\n{\n    context.global.Weather= {};\n}\nif (typeof context.global.winkState==='undefined' )\n{\n context.global.winkState = {};\n}\n\nif (typeof context.global.winkDevCap==='undefined' )\n{\n    context.global.winkDevCap = {};\n}\n\ncontext.global.checkPresence = function() {\n    var i=0;\n    if (typeof(context.global.Presence) ==='undefined') return false;\n    for (var key in context.global.Presence){\n        if (context.global.Presence[key].home==='yes' || context.global.Presence[key].home===true) i++;\n    }\n    return (i>0 ? true : false);\n};\n\ncontext.global.isHomeOccupied = function() {\n    if (typeof context.global.winkState.groups['.sensors'].motion!=='undefined'){ motionSensors = context.global.winkState.groups['.sensors'].motion.or; } else { motionSensors = false; }\n    if (typeof context.global.winkState.groups['.sensors'].occupied!=='undefined'){ occupancySensors = context.global.winkState.groups['.sensors'].occupied.or; } else { occupancySensors = false; }\n    return ((motionSensors || occupancySensors || context.global.checkPresence()) ? true : false)\n}\n\n//context.global.getCameraActivities = function(name,body){\n//    var results;\n//    results=body.data;\n//    if (!('activities' in context.global.winkState.cameras[name])) context.global.winkState.cameras[name].activities=[]\n//    results.forEach(function (result){\n//    if (result.category=='cuepoint'){\n//    var act_rec={\n//    \"id\": result.activity_id,\n//    \"category\":result.category,\n//    \"object_id\":result.object.objext_id,\n//    \"name\":result.object.object_name,\n//    \"cuepoint_id\":result.context.cuepoint_id,\n//    \"media_url\":result.context.media_url\n //   }\n//    node.warn(act_rec)\n//    context.global.winkState.cameras[name].activities.push(act_rec);\n //   }\n //   });\n//}\n\ncontext.global.getWinkState = function (body) {\n    var results, updateP;\n\n    updateP = !body.data;\n    results = updateP ? [body] : body.data;\n\n    results.forEach(function (result) {\n        var key, len, prop, readings, type,reading_aggregations, agg_prop, capabilities, capb, outlets, outl;\n        //node.warn(result.object_type+\" \"+ result.object_id+\" \"+result.name) //for debugging\n        type = result.object_type;\n        if (type) {\n        key = result.name;\n        if (type==\"binary_switch\") type=\"binary_switches\";\n        else type=type+\"s\";\n        }\n        else {\n            if (!result.linked_service_id || result._msgid) return;\n            type = 'linked_services';\n            key = result.service;\n            result.object_id = result.linked_service_id;\n        }\n        if (!context.global.winkState[type]) context.global.winkState[type] = {};\n\n        if ((!!context.global.winkState[type][key]) && (context.global.winkState[type][key].object_id != result.object_id)) {\n            key += ' (#' + result.object_id + ')';\n        }\n\n        if (!(key in context.global.winkState[type])) context.global.winkState[type][key] ={}\n        context.global.winkState[type][key].name=result.name || key\n        context.global.winkState[type][key].object_type=type\n        context.global.winkState[type][key].object_id=result.object_id\n        context.global.winkState[type][key].device_manufacturer=result.device_manufacturer\n        context.global.winkState[type][key].freeboard=0\n        if (result.savings_goal){\n         context.global.winkState[type][key].savings_goal=result.savings_goal ;\n         context.global.winkState[type][key].nose_color=result.nose_color;\n        }\n        if (result.lat_lng) {\n            if ((result.lat_lng[0] === 0) && (result.lat_lng[1] === 0)) result.lat_lng = [null, null];\n            context.global.winkState[type][key].coordinates = result.lat_lng;\n        }\n        \n        // Add group membership\n        if (type==\"groups\" && result.name.substring(0,1)!==\".\" && result.name.substring(0,1)!==\"@\")\n        {\n            if (result.members && result.members.length>0) {\n                context.global.winkState[type][key].members = {};\n                for (i=0; i<result.members.length; i++) {\n                    var light_type= (result.members[i].object_type == 'binary_switch' ? 'binary_switches' : result.members[i].object_type+'s');\n                    for (var name in context.global.winkState[light_type])\n                    {\n                        if (context.global.winkState[light_type][name].object_id == result.members[i].object_id) \n                        {\n                            context.global.winkState[type][key].members[name] = { \n                                    name:name,\n                                    object_id:result.members[i].object_id,\n                                    object_type:light_type\n                                };\n                            }\n                        }\n                    }\n                }\n                \n        }\n\n        if (type=='cameras'){\n//        if (typeof(context.global.winkState[type][key].activities)==='undefined') context.global.winkState[type][key].activities=[]\n        context.global.winkState[type][key].manufacturer_device_model = result.manufacturer_device_model\n        context.global.winkState[type][key].url = context.global.BlueMixUrlBase+\"/freeboard/camera?token=\"+context.global.FREEBOARD_TOKEN+\"&id=\"+context.global.winkState.cameras[key].object_id+\"&model=\"+context.global.winkState.cameras[key].manufacturer_device_model\n        context.global.winkState[type][key].snap_url = context.global.BlueMixUrlBase+\"/freeboard/camera?token=\"+context.global.FREEBOARD_TOKEN+\"&id=\"+context.global.winkState.cameras[key].object_id+\"&model=\"+context.global.winkState.cameras[key].manufacturer_device_model\n        context.global.winkState[type][key].history_url = context.global.BlueMixUrlBase+\"/freeboard/cameraSnapshots?token=\"+context.global.FREEBOARD_TOKEN+\"&camera_name=\"+key,\n        context.global.winkState[type][key].refresh_time=30\n        }\n\n        readings = result.last_reading;\n        for (prop in readings) {\n            len = prop.length;\n            if ((prop.indexOf('desired_') === -1) && (prop.lastIndexOf('_at') !== (len - 3))) {\n                context.global.winkState[type][key][prop] = readings[prop];\n            }\n        }\n        \n        reading_aggregations = result.reading_aggregation;\n        for (agg_prop in reading_aggregations) {\n            context.global.winkState[type][key][agg_prop]=reading_aggregations[agg_prop];\n        }\n        \n        capabilities = result.capabilities;\n        for (capb in capabilities) {\n            if(!context.global.winkDevCap[key]) context.global.winkDevCap[key]={};\n            if(!context.global.winkDevCap[key][capb]) context.global.winkDevCap[key][capb]={};\n          context.global.winkDevCap[key][capb]=capabilities[capb];\n        }\n        \n        outlets = result.outlets;\n        for (outl in outlets) {\n         if (!context.global.winkState[type][outlets[outl].name]) context.global.winkState[type][outlets[outl].name] = {};\n        context.global.winkState[type][outlets[outl].name]=outlets[outl];\n        }\n        \n        \n        if (!!result.linked_service_id) context.global.winkState[type][key].connection = !result.invalidated_at;\n\n        if (!updateP) return;\n        if (!context.global.winkState.lastUpdates) context.global.winkState.lastUpdates = [];\n        if (type!=='groups'){\n        context.global.winkState[type][key].timestamp = new Date();\n        context.global.winkState.lastUpdates.splice(0, 0, context.global.winkState[type][key]);\n        if (context.global.winkState.lastUpdates.length > 15) context.global.winkState.lastUpdates.pop();\n        }\n        //addind special array for motion sensors to check how often they occur\n        if (type == \"sensor_pods\" && typeof (context.global.winkState[type][key].motion) !== 'undefined') {\n        context.global.winkState[type][key].timestamp= new Date();\n        if (!context.global.winkState.motionUpdates) context.global.winkState.motionUpdates=[];\n        context.global.winkState.motionUpdates.splice(0, 0, context.global.winkState[type][key]);\n        if (context.global.winkState.motionUpdates.length > 30) context.global.winkState.motionUpdates.pop();\n        }\n        \n    });\n};\n\n//global function to generate wink cmd message for various objects\n\ncontext.global.executeWinkCMD = function (winkName,type,cmd,level) {\nvar WinkCMDmsg;\n//node.warn(winkName+' '+type+' '+cmd)\nswitch (type.toLowerCase()) {\n\ncase 'lock':\nvar request=(cmd.toLowerCase() ==\"lock\" ? true:false);\nif (winkName in context.global.winkState.locks)\n{\n   WinkCMDmsg ={\n    \"url\":\"https://winkapi.quirky.com/locks/\"+context.global.winkState.locks[winkName].object_id,\n    \"method\": \"PUT\",\n    headers: {\n        \"Authorization\":\"Bearer \"+context.global.WinkToken,\n        \"Content-Type\":\"application/json\"\n    },\n    payload: {\n        \"desired_state\": {\n            \"locked\":(cmd.toLowerCase() ==\"lock\" ? true:false)\n        }\n    }\n};\n}\nbreak;\ncase 'light':\nif (winkName in context.global.winkState.light_bulbs){\n    if(context.global.winkState.light_bulbs[winkName].device_manufacturer==\"lifx\")\n    {\n        WinkCMDmsg ={\n            \"url\":\"https://api.lifx.com/v1/lights/id:\"+context.global.winkState.light_bulbs[winkName].object_id+\"/state\",\n            \"method\": \"PUT\",\n            headers: {\n                \"Authorization\": \"Bearer \"+context.global.LIFX_TOKEN,\n                \"Content-Type\":\"application/json\"\n            },\n            payload: {\n                power:(cmd.toLowerCase()==\"on\" ? \"on\":\"off\"),\n                brightness: level/100,\n                \"duration\": 1\n            }\n        }\n    }\n    else {\n WinkCMDmsg ={\n    \"url\":\"https://winkapi.quirky.com/light_bulbs/\"+context.global.winkState.light_bulbs[winkName].object_id,\n    \"method\": \"PUT\",\n    headers: {\n        \"Authorization\":\"Bearer \"+context.global.WinkToken,\n        \"Content-Type\":\"application/json\"\n    },\n    payload: {\n        \"desired_state\": {\n            \"powered\":(cmd.toLowerCase() ==\"on\" ? true:false),\n            \"brightness\": level/100\n        }\n    }\n }\n}   \n} else if(winkName in context.global.winkState.binary_switches){\n WinkCMDmsg ={\n    \"url\":\"https://winkapi.quirky.com/binary_switches/\"+context.global.winkState.binary_switches[winkName].object_id,\n    \"method\": \"PUT\",\n    headers: {\n        \"Authorization\":\"Bearer \"+context.global.WinkToken,\n        \"Content-Type\":\"application/json\"\n    },\n    payload: {\n        \"desired_state\": {\n            \"powered\":(cmd.toLowerCase() ==\"on\" ? true:false)\n        }\n    }\n};\n} else if(winkName in context.global.winkState.powerstrips && context.global.winkState.powerstrips[winkName].object_type==='outlet'){\n WinkCMDmsg ={\n    \"url\":\"https://winkapi.quirky.com/outlets/\"+context.global.winkState.powerstrips[winkName].object_id,\n    \"method\": \"PUT\",\n    headers: {\n        \"Authorization\":\"Bearer \"+context.global.WinkToken,\n        \"Content-Type\":\"application/json\"\n    },\n    payload: {\n        \"desired_state\": {\n            \"powered\":(cmd.toLowerCase() ==\"on\" ? true:false)\n        }\n    }\n};\n}\nbreak;\ncase 'group':\nif (winkName in context.global.winkState.groups){\nnode.warn(context.global.winkState.groups[winkName]);\n WinkCMDmsg ={\n    \"url\":\"https://winkapi.quirky.com/groups/\"+context.global.winkState.groups[winkName].object_id+\"/activate\",\n    \"method\": \"POST\",\n    headers: {\n        \"Authorization\":\"Bearer \"+context.global.WinkToken,\n        \"Content-Type\":\"application/json\"\n    },\n    payload: {\n        \"desired_state\": {\n            \"powered\":(cmd.toLowerCase() ==\"on\" ? true:false),\n            \"brightness\": level/100\n        }\n    }\n  };\n }\nbreak;\ncase 'shortcut':\nif (winkName in context.global.winkState.scenes){\n WinkCMDmsg ={\n    \"url\":\"https://winkapi.quirky.com/scenes/\"+context.global.winkState.scenes[winkName].object_id+\"/activate\",\n    \"method\": \"POST\",\n    headers: {\n        \"Authorization\":\"Bearer \"+context.global.WinkToken,\n        \"Content-Type\":\"application/json\"\n    }\n  };\n }\nbreak;\ndefault:\nWinkCMDmsg={url:'not defined'};\n}\n//node.warn(WinkCMDmsg.url);\nreturn WinkCMDmsg;\n};\n\n\ncontext.global.algorithm = 'aes-256-ctr',\n\ncontext.global.encrypt=function(text){\n  var cipher = context.global.CRYPTO.createCipher(context.global.algorithm,context.global.FREEBOARD_TOKEN)\n  var crypted = cipher.update(text,'utf8','hex')\n  crypted += cipher.final('hex');\n  return crypted;\n}\n \ncontext.global.decrypt=function(text){\n  var decipher = context.global.CRYPTO.createDecipher(context.global.algorithm,context.global.FREEBOARD_TOKEN)\n  var dec = decipher.update(text,'hex','utf8')\n  dec += decipher.final('utf8');\n  return dec;\n}\n\n",
    "outputs": 1,
    "noerr": 0,
    "x": 305.5,
    "y": 130,
    "z": "6f62cc19.909d34",
    "wires": [
      []
    ]
  },
  {
    "id": "310cd3f8.cef32c",
    "type": "function",
    "name": "",
    "func": "delete context.global.winkState;\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 316,
    "y": 664,
    "z": "6f62cc19.909d34",
    "wires": [
      []
    ]
  },
  {
    "id": "6ac7c38b.95383c",
    "type": "inject",
    "name": "",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "repeat": "",
    "crontab": "",
    "once": false,
    "x": 155,
    "y": 664,
    "z": "6f62cc19.909d34",
    "wires": [
      [
        "310cd3f8.cef32c"
      ]
    ]
  },
  {
    "id": "5900db95.a6ff24",
    "type": "inject",
    "name": "",
    "topic": "",
    "payload": "",
    "payloadType": "none",
    "repeat": "",
    "crontab": "",
    "once": false,
    "x": 654.5,
    "y": 339,
    "z": "6f62cc19.909d34",
    "wires": [
      [
        "50472103.afb8e"
      ]
    ]
  },
  {
    "id": "5b604e6b.a49fb",
    "type": "http request",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 549.5,
    "y": 81,
    "z": "6f62cc19.909d34",
    "wires": [
      [
        "cbd21a01.342de8"
      ]
    ]
  },
  {
    "id": "9bbcd5c1.644328",
    "type": "inject",
    "name": "",
    "topic": "",
    "payload": "",
    "payloadType": "none",
    "repeat": "86400",
    "crontab": "",
    "once": true,
    "x": 106.5,
    "y": 85,
    "z": "6f62cc19.909d34",
    "wires": [
      [
        "38c892d4.c7376e",
        "6beb6865.941498"
      ]
    ]
  },
  {
    "id": "6beb6865.941498",
    "type": "function",
    "name": "Get OAuth Tocken",
    "func": "var uid=context.global.WinkUser.uid;\nvar pwd=context.global.WinkUser.pwd;\nvar newMsg ={\n    \"url\":\"https://winkapi.quirky.com/oauth2/token\",\n    \"method\": \"POST\",\n    headers: {\n        \"Content-Type\":\"application/json\"\n    },\n    payload: {\n        \"client_id\": \"7243d8212e040d75dada47ce68a04c24\",\n        \"client_secret\": \"7d597e496afd6196db8d8738829f5a09\",\n        \"username\": uid,\n        \"password\": pwd,\n        \"grant_type\": \"password\"\n    }\n}\nreturn newMsg;",
    "outputs": 1,
    "noerr": 0,
    "x": 305.49998474121094,
    "y": 82,
    "z": "6f62cc19.909d34",
    "wires": [
      [
        "5b604e6b.a49fb"
      ]
    ]
  },
  {
    "id": "cbd21a01.342de8",
    "type": "function",
    "name": "DefineGlobalTocken",
    "func": "// sample function that stores wink token in a global variable so other api calls\n//can use that\ncontext.global.WinkToken=msg.payload.data.access_token;\nnode.log(context.global.WinkToken);\nvar msg ={ \"payload\":\"Done\"}\nreturn msg;",
    "outputs": 1,
    "x": 750.5,
    "y": 86,
    "z": "6f62cc19.909d34",
    "wires": [
      [
        "1dec754d.e2138b"
      ]
    ]
  },
  {
    "id": "1dec754d.e2138b",
    "type": "function",
    "name": "Prepare HTTPS requests by device type",
    "func": "var newMsg1 ={\n    \"url\":\"https://winkapi.quirky.com/users/me/wink_devices\",\n    \"method\": \"GET\",\n    headers: {\n        \"Authorization\":\"Bearer \"+context.global.WinkToken,\n        \"User-Agent\":\"Manufacturer/Darwin node/0.10.30 Wink/999.99.9\"\n    }\n}\nvar newMsg2 ={\n    \"url\":\"https://winkapi.quirky.com/users/me/linked_services\",\n    \"method\": \"GET\",\n    headers: {\n        \"Authorization\":\"Bearer \"+context.global.WinkToken\n       // \"User-Agent\":\"Manufacturer/Darwin node/0.10.30 Wink/3.1.0\"\n }\n\n}\n\nvar newMsg3 ={\n    \"url\":\"https://winkapi.quirky.com/users/me/groups\",\n    \"method\": \"GET\",\n    headers: {\n        \"Authorization\":\"Bearer \"+context.global.WinkToken,\n        \"User-Agent\":\"Manufacturer/Darwin node/0.10.30 Wink/999.99.9\"\n }\n\n}\n\nvar newMsg4 ={\n    \"url\":\"https://winkapi.quirky.com/users/me/scenes\",\n    \"method\": \"GET\",\n    headers: {\n        \"Authorization\":\"Bearer \"+context.global.WinkToken,\n        \"User-Agent\":\"Manufacturer/Darwin node/0.10.30 Wink/999.99.9\"\n  }\n}\n\nreturn [newMsg1,newMsg2,newMsg3,newMsg4];\n//return [newMsg1,newMsg2,newMsg3,newMsg4,newMsg5,newMsg6,newMsg7,newMsg8,newMsg9,newMsg10,newMsg11];\n",
    "outputs": "4",
    "noerr": 0,
    "x": 1040.5,
    "y": 93,
    "z": "6f62cc19.909d34",
    "wires": [
      [
        "9b7b7b40.648488"
      ],
      [
        "c3100c86.3ceff"
      ],
      [
        "2c4d72be.d3b28e"
      ],
      [
        "13a81ca.fec57e3"
      ]
    ]
  },
  {
    "id": "9b7b7b40.648488",
    "type": "http request",
    "name": "GetWDevices",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 1362.5,
    "y": 45,
    "z": "6f62cc19.909d34",
    "wires": [
      [
        "1506d39e.eaf92c"
      ]
    ]
  },
  {
    "id": "7915cf6b.86ea3",
    "type": "http in",
    "name": "",
    "url": "/red/getGlobalDataJSon",
    "method": "get",
    "x": 134,
    "y": 225,
    "z": "6f62cc19.909d34",
    "wires": [
      [
        "efcc8869.103378"
      ]
    ]
  },
  {
    "id": "efcc8869.103378",
    "type": "function",
    "name": "Throw Wink Data",
    "func": "if(msg.req.headers.authorization && msg.req.headers.authorization==\"Bearer \"+context.global.FREEBOARD_TOKEN){\nmsg.payload.WinkData=context.global.winkState;\nmsg.payload.WinkCapbs=context.global.winkDevCap;\nmsg.payload.WeatherData=context.global.Weather;\nmsg.payload.Weather=context.global.Weather;\n//msg.payload.WinkSubscriptions=context.global.WinkSubscriptions;\nmsg.payload.Presence=context.global.checkPresence();\nmsg.payload.PresenceDetail=context.global.Presence;\nmsg.payload.PresenceHistory=context.global.PresenceHistory;\n//msg.payload.foscamP=context.global.FosCam;\n//msg.payload.SamsungP=context.global.SamsungCam;\n//msg.payload.DlinkCam=context.global.DlinkCam;\n//msg.payload.VCAP_SERVICES=context.global.VCAP_SERVICES\n//msg.payload.ImageArchive=context.global.ImageArchive\n//msg.payload.camera_motion=context.global.camera_motion\nmsg.res.statusCode=\"200\";\nvar Etag=\"\";\nif ('CRYPTO' in context.global){\n    Etag=context.global.CRYPTO.createHash(\"md5\").update(JSON.stringify(msg.payload),\"utf8\").digest(\"hex\");\n    msg.res.set({\n       'ETag': Etag,\n       'Content-Type': 'application/json'\n    });\n}\nreturn msg;\n}\nelse\n{\n    //msg.payload=\"Not Authorized\";\n   msg.res.send(\"403\",\"Forbidden\");\n  return;\n}\n",
    "outputs": 1,
    "noerr": 0,
    "x": 411.4999694824219,
    "y": 226,
    "z": "6f62cc19.909d34",
    "wires": [
      [
        "f2f77812.0d0888"
      ]
    ]
  },
  {
    "id": "f2f77812.0d0888",
    "type": "http response",
    "name": "",
    "x": 636.5,
    "y": 227,
    "z": "6f62cc19.909d34",
    "wires": []
  },
  {
    "id": "321aac55.cde554",
    "type": "http in",
    "name": "",
    "url": "/red/wink/subscribtions",
    "method": "get",
    "x": 144.5,
    "y": 369,
    "z": "6f62cc19.909d34",
    "wires": [
      [
        "e604c298.19fb4"
      ]
    ]
  },
  {
    "id": "e604c298.19fb4",
    "type": "function",
    "name": "Wink Subscription resonse",
    "func": "if (msg.payload[\"hub.mode\"]==\"subscribe\")\n{\n    msg.res.send(200,msg.payload[\"hub.challenge\"]);\n}\nelse\n{\n    msg.res.send(400,\"Bad Request darling\");\n}\nreturn msg;",
    "outputs": 1,
    "x": 441.49998474121094,
    "y": 370,
    "z": "6f62cc19.909d34",
    "wires": [
      []
    ]
  },
  {
    "id": "fb80b18e.047f5",
    "type": "http in",
    "name": "",
    "url": "/red/wink/subscribtions",
    "method": "post",
    "x": 146.5,
    "y": 451.00006103515625,
    "z": "6f62cc19.909d34",
    "wires": [
      [
        "a1da1456.5e25e8",
        "1f09444f.e0f6bc"
      ]
    ]
  },
  {
    "id": "50472103.afb8e",
    "type": "delay",
    "name": "",
    "pauseType": "delay",
    "timeout": "30",
    "timeoutUnits": "seconds",
    "rate": "1",
    "rateUnits": "second",
    "randomFirst": "1",
    "randomLast": "5",
    "randomUnits": "seconds",
    "drop": false,
    "x": 810.5,
    "y": 338,
    "z": "6f62cc19.909d34",
    "wires": [
      [
        "2db39e64.d24c62"
      ]
    ]
  },
  {
    "id": "2db39e64.d24c62",
    "type": "function",
    "name": "Prepare Wink devices subscription request",
    "func": "var baseUrl = \"https://winkapi.quirky.com/\";\nvar callbackUrl=context.global.BlueMixUrlBase+\"/red/wink/subscribtions\";\n   for (var winkDevice in context.global.winkState)\n    {\n        if (winkDevice!=\"linked_services\")\n        {\n            var deviceUrl=baseUrl+winkDevice;\n            for (var winkDeviceName in context.global.winkState[winkDevice])\n            {\n                deviceId=context.global.winkState[winkDevice][winkDeviceName].object_id;\n                node.warn(winkDeviceName+\" \"+deviceId);\n                var newMsg ={\n                    \"url\":baseUrl+\"/\"+winkDevice+\"/\"+deviceId+\"/subscriptions\",\n                    \"method\": \"POST\",\n                    headers: {\n                        \"Authorization\":\"Bearer \"+context.global.WinkToken,\n                        \"User-Agent\":\"Manufacturer/Darwin node/0.10.30 Wink/999.99.9\",\n                        \"Content-Type\":\"application/json\"\n                    },\n                    payload: {\n                        \"callback\": callbackUrl\n                    }\n                };\n                node.send(newMsg);\n            }\n        }\n    }\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 1067.5001678466797,
    "y": 338,
    "z": "6f62cc19.909d34",
    "wires": [
      [
        "ab0049a3.54ffb8"
      ]
    ]
  },
  {
    "id": "ab0049a3.54ffb8",
    "type": "http request",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 1335.5000457763672,
    "y": 337,
    "z": "6f62cc19.909d34",
    "wires": [
      [
        "86923d34.796dc"
      ]
    ]
  },
  {
    "id": "86923d34.796dc",
    "type": "function",
    "name": "CheckResposeCode",
    "func": "if (typeof context.global.WinkSubscriptions === 'undefined')\n{\n    context.global.WinkSubscriptions = {};\n}\nif (msg.statusCode==202)\n{\n    node.warn(\"Subscription ID: \"+msg.payload.data.subscription_id);\n    context.global.WinkSubscriptions[msg.payload.data.subscription_id]={\n        \"subscription_id\": msg.payload.data.subscription_id,\n        \"url_base\":msg.payload.data.topic,\n        \"callback\":msg.payload.data.callback\n    }\n}\nelse\n{\n    node.warn(\"Subscription issue. Status: \"+msg.statusCode);\n}\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 1493.5000457763672,
    "y": 425.0000305175781,
    "z": "6f62cc19.909d34",
    "wires": [
      []
    ]
  },
  {
    "id": "edc783de.12388",
    "type": "comment",
    "name": "Section for status  subscription---------------------------------------------------------------------------------------------------------------------------------",
    "info": "",
    "x": 447.5,
    "y": 302,
    "z": "6f62cc19.909d34",
    "wires": []
  },
  {
    "id": "ba871894.4578e8",
    "type": "comment",
    "name": "Initialize section-----------------------------------------------------------------------------------------------------------",
    "info": "",
    "x": 359.5,
    "y": 20,
    "z": "6f62cc19.909d34",
    "wires": []
  },
  {
    "id": "516c9f17.ae936",
    "type": "comment",
    "name": "Weather-------------------------------------------------------------------------------------------------------------------------------",
    "info": "",
    "x": 378.5,
    "y": 918.0000610351562,
    "z": "6f62cc19.909d34",
    "wires": []
  },
  {
    "id": "b7b93e4c.4846c",
    "type": "debug",
    "name": "",
    "active": false,
    "console": "false",
    "complete": "false",
    "x": 954.4999847412109,
    "y": 966.0001220703125,
    "z": "6f62cc19.909d34",
    "wires": []
  },
  {
    "id": "9de4a6ea.621b58",
    "type": "http request",
    "name": "Get Weather",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 441.5,
    "y": 965,
    "z": "6f62cc19.909d34",
    "wires": [
      [
        "d12bd041.2ed43"
      ]
    ]
  },
  {
    "id": "6283391e.9d7cc8",
    "type": "inject",
    "name": "",
    "topic": "",
    "payload": "",
    "payloadType": "none",
    "repeat": "600",
    "crontab": "",
    "once": true,
    "x": 92.5,
    "y": 964,
    "z": "6f62cc19.909d34",
    "wires": [
      [
        "51baab76.ae4554"
      ]
    ]
  },
  {
    "id": "51baab76.ae4554",
    "type": "function",
    "name": "",
    "func": "var newMsg ={\n        \"url\":\"https://api.forecast.io/forecast/\"+context.global.forecastIoApiKey+\"/\"+context.global.HomeLocation.lat+\",\"+context.global.HomeLocation.lon,\n        \"method\": \"GET\"\n}\nreturn newMsg;",
    "outputs": 1,
    "noerr": 0,
    "x": 256.5,
    "y": 965,
    "z": "6f62cc19.909d34",
    "wires": [
      [
        "9de4a6ea.621b58"
      ]
    ]
  },
  {
    "id": "1506d39e.eaf92c",
    "type": "function",
    "name": "GetDevices",
    "func": "context.global.getWinkState(msg.payload);\ndelete context.global.winkState._msgid;\nif (\"cameras\" in context.global.winkState){\n    for (var key in context.global.winkState.cameras){\n        if (context.global.winkState.cameras[key].manufacturer_device_model =='dropcam' || context.global.winkState.cameras[key].manufacturer_device_model =='dropcam_pro'){\n            var newMsg1 ={\n                \"url\":context.global.BlueMixUrlBase+'/red/retrieve_activities?camera_name='+key,\n                \"method\": \"GET\",\n                headers: {\n                    \"Authorization\":\"Bearer \"+context.global.FREEBOARD_TOKEN\n                }\n            }\n            node.send(newMsg1);\n        }\n    }\n}\nnode.warn(\"Device import completed\");\nreturn;\n",
    "outputs": 1,
    "noerr": 0,
    "x": 1577.5000457763672,
    "y": 39.5,
    "z": "6f62cc19.909d34",
    "wires": [
      [
        "45832ac8.ba7cd4"
      ]
    ]
  },
  {
    "id": "c3100c86.3ceff",
    "type": "http request",
    "name": "GetWServices",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 1366.5,
    "y": 86.5,
    "z": "6f62cc19.909d34",
    "wires": [
      [
        "36a8fa56.c95706"
      ]
    ]
  },
  {
    "id": "36a8fa56.c95706",
    "type": "function",
    "name": "GetServices",
    "func": "context.global.getWinkState(msg.payload);\ndelete context.global.winkState._msgid;\nreturn;\n",
    "outputs": 1,
    "x": 1578.5,
    "y": 85.5,
    "z": "6f62cc19.909d34",
    "wires": [
      []
    ]
  },
  {
    "id": "a1da1456.5e25e8",
    "type": "function",
    "name": "UpdateDevices",
    "func": "context.global.getWinkState(msg.payload);\ndelete context.global.winkState._msgid;\nmsg.res.statusCode=\"200\";\nreturn msg;\n",
    "outputs": 1,
    "noerr": 0,
    "x": 400.49998474121094,
    "y": 478.5,
    "z": "6f62cc19.909d34",
    "wires": [
      [
        "ffe2edea.001d1",
        "df55628d.20aaa",
        "95c96bdf.6a3698",
        "67542cdd.98abd4",
        "874df37f.78b21",
        "c59d46ec.3a62b8",
        "7f825c7c.807da4"
      ]
    ]
  },
  {
    "id": "36b5447d.c94abc",
    "type": "comment",
    "name": "Section for web services---------------------------------------------------------------------------------------------------------------------------------",
    "info": "",
    "x": 434,
    "y": 182.5,
    "z": "6f62cc19.909d34",
    "wires": []
  },
  {
    "id": "2c4d72be.d3b28e",
    "type": "http request",
    "name": "GetWGroups",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 1359.5,
    "y": 128.5,
    "z": "6f62cc19.909d34",
    "wires": [
      [
        "26231690.d9dcea"
      ]
    ]
  },
  {
    "id": "26231690.d9dcea",
    "type": "function",
    "name": "GetGroups",
    "func": "context.global.getWinkState(msg.payload);\ndelete context.global.winkState._msgid;\nreturn;\n",
    "outputs": 1,
    "x": 1571.5000457763672,
    "y": 128.5,
    "z": "6f62cc19.909d34",
    "wires": [
      []
    ]
  },
  {
    "id": "13a81ca.fec57e3",
    "type": "http request",
    "name": "GetWScenes",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 1357.5,
    "y": 171.5,
    "z": "6f62cc19.909d34",
    "wires": [
      [
        "6d6ae894.929518"
      ]
    ]
  },
  {
    "id": "6d6ae894.929518",
    "type": "function",
    "name": "GetScenes",
    "func": "context.global.getWinkState(msg.payload);\ndelete context.global.winkState._msgid;\nreturn;\n",
    "outputs": 1,
    "x": 1566.5000457763672,
    "y": 170.5,
    "z": "6f62cc19.909d34",
    "wires": [
      []
    ]
  },
  {
    "id": "ffe2edea.001d1",
    "type": "function",
    "name": "Send message to IFTTT",
    "func": "if (context.global.ifttt){\nvar WinkEvent=\"WinkEvent\"\nvar extra_param=\"\"\nvar Event_desc=\"\"\nif (msg.payload.model_name==\"Motion Sensor\") \n{\n    Event_desc= (msg.payload.last_reading.motion ? \"motion detected\":\"no motion\")\n}\nif (msg.payload.model_name==\"Tripper\") \n{\n    Event_desc= (msg.payload.last_reading.opened ? \"Opened\":\"Closed\")\n}\n\nif ('last_reading' in msg.payload && 'locked' in msg.payload.last_reading) \n{ \n    Event_desc= (msg.payload.last_reading.locked ? \"Locked\":\"Unlocked\")\n}\n\nif (msg.payload.object_type==\"binary_switch\" && (!('powered' in msg.payload.desired_state) || msg.payload.desired_state.powered===false) )\n{\n    Event_desc= (msg.payload.last_reading.powered ? \"On\":\"Off\")\n}\n\nif (msg.payload.object_type==\"garage_doors\")\n{\n    Event_desc= (msg.payload.last_reading.garage_doors==\"0\" ? \"Closed\":\"Opened\")\n}\n\nif (msg.payload.object_type==\"light_bulb\" && !('powered' in msg.payload.desired_state))\n{\n    Event_desc= (msg.payload.last_reading.powered ? \"On\":\"Off\")\n    extra_param=(msg.payload.last_reading.powered ? msg.payload.last_reading.brightness*100 : 0)\n}\nif ('liquid_detected' in msg.payload)\n{\n    Event_desc= (msg.payload.last_reading.liquid_detected ? \"Water detected\":\"No water detected\")\n}\n\nif (msg.payload.object_type ==\"propane_tanks\")\n{\n    Event_desc= (\"Propane level - \"+msg.payload.last_reading.remaining)\n}\n\nif (msg.payload.object_type ==\"powerstrips\")\n{\n    Event_Desc = msg.payload.outlets[0].name+\" \"+ (msg.payload.outlets[0].powered ? \"On, \":\"Off, \")+msg.payload.outlets[0].name+\" \"+(msg.payload.outlets[1].powered ? \"On\":\"Off\")\n}\n\nif (Event_desc!==\"\")\n{\n var newMsg ={\n                    \"url\":\"https://maker.ifttt.com/trigger/\"+WinkEvent+\"/with/key/\"+context.global.IFTTT_TOKEN,\n                    \"method\": \"POST\",\n                    headers: \n                    {\n                        \"Content-Type\":\"application/json\"\n                    },\n                    payload: \n                    {\"value1\":msg.payload.name,\"value2\":Event_desc,\"value3\":extra_param}\n            }\nnode.send(newMsg);\n}\n}\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 730.4999847412109,
    "y": 534.4999694824219,
    "z": "6f62cc19.909d34",
    "wires": [
      [
        "dd35b82c.22ca48"
      ]
    ]
  },
  {
    "id": "dd35b82c.22ca48",
    "type": "http request",
    "name": "",
    "method": "use",
    "ret": "txt",
    "url": "",
    "x": 940.5,
    "y": 534.5,
    "z": "6f62cc19.909d34",
    "wires": [
      []
    ]
  },
  {
    "id": "d12bd041.2ed43",
    "type": "function",
    "name": "Get current weather",
    "func": "var currDate= new Date();\nvar currHours=currDate.getHours();\nvar currMins=currDate.getMinutes();\nvar currOffset=currDate.getTimezoneOffset()*-1/60;\nif(msg.payload.currently)\n{\ncontext.global.Weather.Offset = (currOffset!=msg.payload.offset ? msg.payload.offset : 0);\ncontext.global.Weather.CloudCover=Math.round(msg.payload.currently.cloudCover*100);\ncontext.global.Weather.WeatherSummary=msg.payload.currently.summary;\nvar date = new Date(msg.payload.currently.time*1000);\nvar hours = date.getHours();\nvar minutes = date.getMinutes();\n//if (currHours==hours){context.global.Weather.Offset=0}\nvar date = new Date(msg.payload.daily.data[0].sunsetTime*1000);\nvar hours = date.getHours();\nvar minutes =date.getMinutes();\ncontext.global.Weather.SunsetHour=hours+context.global.Weather.Offset;\nif (context.global.Weather.SunsetHour<0)\n {\n     context.global.Weather.SunsetHour=24+context.global.Weather.SunsetHour;\n }\ncontext.global.Weather.SunsetMin=minutes;\nvar date = new Date(msg.payload.daily.data[0].sunriseTime*1000);\nvar hours = date.getHours();\nvar minutes =date.getMinutes();\ncontext.global.Weather.SunriseHour=hours+context.global.Weather.Offset;\ncontext.global.Weather.SunriseMin=minutes;\ncontext.global.Weather.outsideTemp=msg.payload.currently.temperature;\ncontext.global.Weather.PrecipationPbb=msg.payload.currently.precipProbability;\ncontext.global.Weather.HumidityOutside=msg.payload.currently.humidity;\ncurrHours=currHours+context.global.Weather.Offset;\nif (currHours<0)\n {\n     currHours=24+currHours;\n }\n //node.warn(\"time \"+currHours+\":\"+currMins);\nif ((currHours > context.global.Weather.SunriseHour && currHours < context.global.Weather.SunsetHour) || (currHours==context.global.Weather.SunsetHour && currMins <context.global.Weather.SunsetMin))\n{\n    var timeFrame=\"DAY\";\n}\nelse {\n    var timeFrame=\"NIGHT\";\n}\ncontext.global.Weather.timeframe=timeFrame;\ncontext.global.Weather.currently=msg.payload.currently;\n}\nnewMsg = {\n    payload: {\n        \"offset\":context.global.Weather.Offset,\n        \"currtime\": currHours+\":\"+currMins,\n        \"CloudCover\": context.global.Weather.CloudCover,\n        \"WeatherSummary\": context.global.Weather.WeatherSummary,\n        \"sunsetTime\": context.global.Weather.SunsetHour+\":\"+context.global.Weather.SunsetMin,\n        \"sunriseTime\": context.global.Weather.SunriseHour+\":\"+context.global.Weather.SunriseMin,\n        \"outsideTemp\": context.global.Weather.outsideTemp,\n        \"precipation\": context.global.Weather.PrecipationPbb+\" %\",\n        \"timeframe\": context.global.Weather.timeframe\n    }\n};\nreturn newMsg;",
    "outputs": 1,
    "noerr": 0,
    "x": 742.4999847412109,
    "y": 967.5,
    "z": "6f62cc19.909d34",
    "wires": [
      [
        "b7b93e4c.4846c"
      ]
    ]
  },
  {
    "id": "df55628d.20aaa",
    "type": "function",
    "name": "Switch t-stat back to home mode if motion is detected",
    "func": "var canControl = (typeof(context.global.motionAdjustTstat)!=='undefined' ? context.global.motionAdjustTstat : 'true');\nif (msg.payload.object_type =='thermostat' && ((\"users_away\" in msg.payload.last_reading) && typeof(msg.payload.last_reading.users_away)!=='undefined' && msg.payload.last_reading.users_away) && canControl){\n    if (context.global.winkState.groups['.sensors'].motion.or || context.global.checkPresence()){\n    var newMsg ={\n    \"url\":\"https://winkapi.quirky.com/thermostats/\"+msg.payload.object_id,\n    \"method\": \"PUT\",\n    headers: {\n        \"Authorization\":\"Bearer \"+context.global.WinkToken,\n        \"Content-Type\":\"application/json\"\n    },\n    payload: {\n        \"desired_state\": {\n            \"powered\":true,\n            \"users_away\":false\n                }\n            }\n        };\n    node.send(newMsg);\n    }\n}\nif ((\"last_reading\" in msg.payload) && (\"motion\" in msg.payload.last_reading) && typeof(msg.payload.last_reading.motion!=='undefined') && msg.payload.last_reading.motion && canControl){\n    for (var key in context.global.winkState.thermostats){\n        if ((\"users_away\" in context.global.winkState.thermostats[key]) && typeof(context.global.winkState.thermostats[key].users_away)!=='undefined' && context.global.winkState.thermostats[key].users_away){\n               var newMsg ={\n                \"url\":\"https://winkapi.quirky.com/thermostats/\"+context.global.winkState.thermostats[key].object_id,\n                \"method\": \"PUT\",\n                headers: {\n                    \"Authorization\":\"Bearer \"+context.global.WinkToken,\n                    \"Content-Type\":\"application/json\"\n                },\n                payload: {\n                    \"desired_state\": {\n                     \"powered\":true,\n                    \"users_away\":false\n                }\n            }\n        };\n    node.send(newMsg); \n    }\n  }\n}\n\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 815.8958129882812,
    "y": 580.111083984375,
    "z": "6f62cc19.909d34",
    "wires": [
      [
        "6e11314f.91eed"
      ]
    ]
  },
  {
    "id": "6e11314f.91eed",
    "type": "http request",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 1126.8959350585938,
    "y": 580.111083984375,
    "z": "6f62cc19.909d34",
    "wires": [
      []
    ]
  },
  {
    "id": "2ebfe0ff.d1402",
    "type": "function",
    "name": "",
    "func": "if (typeof context.global.InitialStateKey !=='undefined'){\ncontext.global.InitialStateBucket=\"WinkDataISN\"\nvar newMsg={\n  method: 'POST',\n  url: 'https://groker.initialstate.com/api/buckets',\n  headers: {\n    'Content-Type': 'application/json',\n    'X-IS-AccessKey': context.global.InitialStateKey,\n    'Accept-Version': '~0'\n  },\n    payload: \n    {\n    \"bucketKey\": context.global.InitialStateBucket,\n    \"bucketName\": \"Wink Data Node Red\"\n}\n}\nnode.send(newMsg);\n}\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 324.89581298828125,
    "y": 1085.3333740234375,
    "z": "6f62cc19.909d34",
    "wires": [
      [
        "13888d2a.ec7773"
      ]
    ]
  },
  {
    "id": "6e5ad467.91a52c",
    "type": "inject",
    "name": "",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "repeat": "",
    "crontab": "",
    "once": true,
    "x": 125.89579772949219,
    "y": 1086.3333740234375,
    "z": "6f62cc19.909d34",
    "wires": [
      [
        "2ebfe0ff.d1402"
      ]
    ]
  },
  {
    "id": "13888d2a.ec7773",
    "type": "http request",
    "name": "",
    "method": "use",
    "ret": "txt",
    "url": "",
    "x": 523,
    "y": 1086.4444580078125,
    "z": "6f62cc19.909d34",
    "wires": [
      [
        "b2ccfe0b.4d33"
      ]
    ]
  },
  {
    "id": "b2ccfe0b.4d33",
    "type": "debug",
    "name": "",
    "active": false,
    "console": "false",
    "complete": "true",
    "x": 708,
    "y": 1085.4444885253906,
    "z": "6f62cc19.909d34",
    "wires": []
  },
  {
    "id": "a107b224.5ef85",
    "type": "comment",
    "name": "IS State bucket initialization -------------------------------------------------------------------------------------------------------------------------------",
    "info": "modfy bluemix-settings.json and add following line:\n\ncontext.global.InitialStateKey=\"<your initial state api key>\"",
    "x": 460.5,
    "y": 1034,
    "z": "6f62cc19.909d34",
    "wires": []
  },
  {
    "id": "4c32e012.b3cd2",
    "type": "http request",
    "name": "",
    "method": "use",
    "ret": "txt",
    "url": "",
    "x": 934.8957977294922,
    "y": 485.888916015625,
    "z": "6f62cc19.909d34",
    "wires": [
      []
    ]
  },
  {
    "id": "95c96bdf.6a3698",
    "type": "function",
    "name": "Is State",
    "func": "if (typeof context.global.InitialStateKey !=='undefined'){\nvar keyName;\nvar keyValue;\nvar winkObjectType=(msg.payload.object_type=='binary_switch' ? msg.payload.object_type+'es' : msg.payload.object_type+'s')\nvar pct = function(value) {\n    return ((value > 1.0 ? value : value * 100).toFixed(0) + '%')\n}\nvar dual_temp = function (value) {\n    return (typeof value === 'number' ? (value.toFixed(1) + 'C / ' + ((value * 1.8) + 32).toFixed(1) + 'F') : '')\n}\n\nvar dollars = function (value) {\n    return (typeof value === 'number' ? (value / 100).toFixed(2) : '')\n}\n\nvar GenValueText = function (property,value){\n    text =  { co_detected     : (value ? 'CO DETECTED'     : '')\n            , fault           : (value ? 'FAULT DETECTED'  : '')\n            , liquid_detected : (value ? 'LEAK DETECTED'   : '')\n            , locked          : (value ? 'LOCKED'          : 'UNLOCKED')\n            , loudness        : (value ? 'LOUD'            : '')\n            , noise           : (value ? 'NOISY'           : '')\n            , motion          : (value ? 'MOTION'          : '')\n            , opened          : (value ? 'OPEN'            : 'CLOSED')\n            , presence        : (value ? 'PRESENCE'        : '')\n            , smoke_detected  : (value ? 'SMOKE DETECTED'  : '')\n            , tamper_detected : (value ? 'TAMPER DETECTED' : '')\n            , vibration       : (value ? 'VIBRATION'       : '')\n\n            , battery         : pct(value)\n            , brightness      : pct(value)\n            , co_severity     : pct(value)\n            , humidity        : pct(value)\n            , smoke_severity  : pct(value)\n\n            , remaining       : pct(value)\n            , temperature     : value\n            }[property]\n    if (text === '') text = 'OK'\n    return text;\n}\n\nvar sendMsg = function(key,value){\n    var newMsg={\n  method: 'POST',\n  url: 'https://groker.initialstate.com/api/events',\n  headers: {\n    \"Content-Type\": \"application/json\",\n    \"X-IS-AccessKey\": context.global.InitialStateKey,\n    \"X-IS-BucketKey\": context.global.InitialStateBucket,\n    \"Accept-Version\": '~0'\n  },\n    payload: \n    {\n    \"key\": key,\n    \"value\":value\n}\n}\nnode.send(newMsg);\n}\n//node.warn(winkObjectType)\n//node.warn(msg.payload.name)\nswitch (winkObjectType){\n    case 'binary_switches':\n        if((!('powered' in msg.payload.desired_state) || msg.payload.desired_state.powered===false)){\n        keyName=msg.payload.name+' Brightness';\n        keyValue=(msg.payload.last_reading.powered ? 100: 0);\n        sendMsg(keyName,keyValue);\n        }\n        break;\n    case 'light_bulbs':\n        if(!('powered' in msg.payload.desired_state)){\n        keyName=msg.payload.name+' Brightness';\n        keyValue=(msg.payload.last_reading.powered ? pct(msg.payload.last_reading.brightness) : 0);\n        sendMsg(keyName,keyValue);\n        }\n        break;\n    case 'locks':\n        keyName=msg.payload.name+' Status';\n        keyValue= GenValueText('locked',msg.payload.last_reading.locked);\n        sendMsg(keyName,keyValue);\n        break;\n    case 'thermostats':\n        keyName=msg.payload.name+' Temperature';\n        keyValue=msg.payload.last_reading.temperature;\n        sendMsg(keyName,keyValue);\n        break;\n case 'sensor_pods':\n        for (var i=0; i< context.global.winkDevCap[msg.payload.name].sensor_types.length; i++){\n        sensor_type=context.global.winkDevCap[msg.payload.name].sensor_types[i].field;\n        keyName=msg.payload.name+' '+context.global.winkDevCap[msg.payload.name].sensor_types[i].field.replace(\"_\",\" \");\n        keyValue=GenValueText(context.global.winkDevCap[msg.payload.name].sensor_types[i].field,context.global.winkState.sensor_pods[msg.payload.name][sensor_type]);\n        sendMsg(keyName,keyValue);\n        }\n        break;\n    case 'propane_tanks':\n        keyName=msg.payload.name+' Propane';\n        keyValue= GenValueText('remaining',msg.payload.last_reading.remaining);\n        sendMsg(keyName,keyValue);\n        break;\n        \n    case 'cameras':\n        node.warn('camera subscription event '+msg.payload.last_reading.motion)\n        keyName=msg.payload.name+' Motion';\n        keyValue= GenValueText('motion',msg.payload.last_reading.motion);\n        sendMsg(keyName,keyValue);\n        break;    \n}\n\n}\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 675.7916107177734,
    "y": 486.7778015136719,
    "z": "6f62cc19.909d34",
    "wires": [
      [
        "4c32e012.b3cd2"
      ]
    ]
  },
  {
    "id": "67542cdd.98abd4",
    "type": "http response",
    "name": "",
    "x": 671.8958129882812,
    "y": 447.8888854980469,
    "z": "6f62cc19.909d34",
    "wires": []
  },
  {
    "id": "874df37f.78b21",
    "type": "function",
    "name": "Snapshots",
    "func": "if(context.global.CloudantBkUP && (msg.payload.object_type=='camera' || msg.payload.object_type=='sensor_pod') && ('motion' in msg.payload.last_reading && msg.payload.last_reading.motion===true) && msg.payload.name in context.global.camera_motion)\n{\n    var newMsg1 ={\n    \"url\":context.global.BlueMixUrlBase+'/red/save_images?cam_list='+context.global.camera_motion[msg.payload.name]+'&object_name='+msg.payload.name,\n    \"method\": \"GET\",\n    headers: {\n        \"Authorization\":\"Bearer \"+context.global.FREEBOARD_TOKEN\n    }\n    }\n    node.send(newMsg1);\n}\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 684.8957977294922,
    "y": 636.1111145019531,
    "z": "6f62cc19.909d34",
    "wires": [
      [
        "4d836865.b27c98"
      ]
    ]
  },
  {
    "id": "4d836865.b27c98",
    "type": "http request",
    "name": "",
    "method": "use",
    "ret": "txt",
    "url": "",
    "x": 872.8957977294922,
    "y": 634.888916015625,
    "z": "6f62cc19.909d34",
    "wires": [
      []
    ]
  },
  {
    "id": "45832ac8.ba7cd4",
    "type": "http request",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 1740.5625,
    "y": 40.888885498046875,
    "z": "6f62cc19.909d34",
    "wires": [
      []
    ]
  },
  {
    "id": "c59d46ec.3a62b8",
    "type": "function",
    "name": "SendNamedBasedIfttt",
    "func": "if ('IFTTT_TOKEN' in context.global && context.global.IFTTT_TOKEN!=='undefined'){\nif (msg.payload.object_type=='remote' || (msg.payload.object_type=='sensor_pod' && ('motion' in msg.payload.last_reading || 'opened' in msg.payload.last_reading)) ){\n    var winkEvent=''\n    var lr=msg.payload.last_reading;\n    var oName=msg.payload.name;\n    var oType=msg.payload.object_type\n\n if (oType=='remote') winkEvent = (lr.button_on_pressed ? 'button_on_pressed' : lr.button_off_pressed ? 'button_off_pressed' : lr.button_up_pressed ? 'button_up_pressed' : lr.button_down_pressed ? 'button_down_pressed' :  '')\n else {\n if ('motion' in lr)  winkEvent = (lr.motion ? 'motion_started' : 'motion_ended')\n if ('opened' in lr) winkEvent =  (lr.opened ? 'opened' : 'closed')\n }\n \n if (winkEvent!==''){\n var WinkEvent=oName.replace(' ','_')+'_'+winkEvent;\n var newMsg ={\n                    \"url\":\"https://maker.ifttt.com/trigger/\"+WinkEvent+\"/with/key/\"+context.global.IFTTT_TOKEN,\n                    \"method\": \"POST\",\n                    headers: \n                    {\n                        \"Content-Type\":\"application/json\"\n                    }\n            }\nnode.send(newMsg);\n}\n\n}\n\n}\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 710.8957977294922,
    "y": 687.1110534667969,
    "z": "6f62cc19.909d34",
    "wires": [
      [
        "ea95eeee.156a1"
      ]
    ]
  },
  {
    "id": "ea95eeee.156a1",
    "type": "http request",
    "name": "",
    "method": "use",
    "ret": "txt",
    "url": "",
    "x": 917.8957977294922,
    "y": 688.8889465332031,
    "z": "6f62cc19.909d34",
    "wires": [
      [
        "c063079f.3f9cf8"
      ]
    ]
  },
  {
    "id": "c063079f.3f9cf8",
    "type": "debug",
    "name": "",
    "active": false,
    "console": "false",
    "complete": "false",
    "x": 1095,
    "y": 688,
    "z": "6f62cc19.909d34",
    "wires": []
  },
  {
    "id": "fd1316ff.02ece8",
    "type": "catch",
    "name": "",
    "x": 81,
    "y": 1153,
    "z": "6f62cc19.909d34",
    "wires": [
      [
        "2517e2e4.dae81e"
      ]
    ]
  },
  {
    "id": "2517e2e4.dae81e",
    "type": "debug",
    "name": "",
    "active": true,
    "console": "false",
    "complete": "error",
    "x": 281,
    "y": 1153,
    "z": "6f62cc19.909d34",
    "wires": []
  },
  {
    "id": "7f825c7c.807da4",
    "type": "switch",
    "name": "WS switch",
    "property": "payload.object_type",
    "rules": [
      {
        "t": "eq",
        "v": "light_bulb"
      },
      {
        "t": "eq",
        "v": "binary_switch"
      },
      {
        "t": "eq",
        "v": "powerstrip"
      },
      {
        "t": "eq",
        "v": "lock"
      }
    ],
    "checkall": "true",
    "outputs": 4,
    "x": 634,
    "y": 757,
    "z": "6f62cc19.909d34",
    "wires": [
      [
        "60102ed9.9fefd"
      ],
      [
        "c9f47b2d.360b88"
      ],
      [
        "f135c92d.0eca38"
      ],
      [
        "4cf05ac6.b30fa4"
      ]
    ]
  },
  {
    "id": "60102ed9.9fefd",
    "type": "function",
    "name": "",
    "func": "var bulbMsg={}\nvar bulb=context.global.winkState.light_bulbs[msg.payload.name];\nif (!('powered' in msg.payload.desired_state)){\nbulbMsg.payload={\n name:bulb.name,\n            object_id:bulb.object_id,\n            powered:bulb.powered,\n            brightness:Math.round(bulb.brightness*100)\n}\n//bulbMsg.payload=context.global.encrypt(JSON.stringify(Message));\nreturn bulbMsg;\n}",
    "outputs": 1,
    "noerr": 0,
    "x": 893,
    "y": 726,
    "z": "6f62cc19.909d34",
    "wires": [
      [
        "9945efe2.66ba1"
      ]
    ]
  },
  {
    "id": "c9f47b2d.360b88",
    "type": "function",
    "name": "",
    "func": "var binSMsg={}\nvar bulb=context.global.winkState.binary_switches[msg.payload.name];\nif (!('powered' in msg.payload.desired_state) || msg.payload.desired_state.powered===false){\nbinSMsg.payload={\n            name:bulb.name,\n            object_id:bulb.object_id,\n            powered:bulb.powered,\n            brightness:(bulb.powered ? 100:0)\n        }\nreturn binSMsg;\n}",
    "outputs": 1,
    "noerr": 0,
    "x": 895,
    "y": 762,
    "z": "6f62cc19.909d34",
    "wires": [
      [
        "9945efe2.66ba1"
      ]
    ]
  },
  {
    "id": "9945efe2.66ba1",
    "type": "websocket out",
    "name": "",
    "server": "628aa159.9d756",
    "client": "",
    "x": 1108,
    "y": 758,
    "z": "6f62cc19.909d34",
    "wires": []
  },
  {
    "id": "f135c92d.0eca38",
    "type": "function",
    "name": "",
    "func": "for (var i=0;i<msg.payload.outlets.length;i++){\nvar binSMsg={}    \nvar bulb=context.global.winkState.powerstrips[msg.payload.outlets[i].name];\nif (!('powered' in bulb.desired_state) || bulb.desired_state.powered===false){\nbinSMsg.payload={\n            name:bulb.name,\n            object_id:bulb.object_id,\n            powered:bulb.powered,\n            brightness:(bulb.powered ? 100:0)\n        }\nnode.send(binSMsg);\n}\n}",
    "outputs": 1,
    "noerr": 0,
    "x": 895,
    "y": 800,
    "z": "6f62cc19.909d34",
    "wires": [
      [
        "9945efe2.66ba1"
      ]
    ]
  },
  {
    "id": "4cf05ac6.b30fa4",
    "type": "function",
    "name": "",
    "func": "var lockMsg={}\nvar lock=context.global.winkState.locks[msg.payload.name];\nif (!('locked' in msg.payload.desired_state)){\nlockMsg.payload={\n            name:lock.name,\n            object_id:lock.object_id,\n            locked:lock.locked\n    }\n//bulbMsg.payload=context.global.encrypt(JSON.stringify(Message));\nreturn lockMsg;\n}",
    "outputs": 1,
    "noerr": 0,
    "x": 897,
    "y": 841,
    "z": "6f62cc19.909d34",
    "wires": [
      [
        "9945efe2.66ba1"
      ]
    ]
  },
  {
    "id": "1f09444f.e0f6bc",
    "type": "function",
    "name": "Standardize the response",
    "func": "if (typeof context.global.winkChanged==='undefined'){ context.global.winkChanged = new Object () }\nif (msg.payload.name.substring(0,1)!==\".\" && msg.payload.name.substring(0,1)!==\"@\")\n{\n    if (typeof context.global.winkChanged[msg.payload.name]==='undefined') { context.global.winkChanged[msg.payload.name] = new Object() }\n    \n    if (typeof context.global.winkChanged[msg.payload.name].new_state==='undefined')\n    {\n//        node.warn(msg.payload.name+\".new_state was undefined\");\n        context.global.winkChanged[msg.payload.name].new_state = new Object() \n    }\n    else { \n//        node.warn(msg.payload.name+\".new_state was not undefined\");\n        context.global.winkChanged[msg.payload.name].old_state=context.global.winkChanged[msg.payload.name].new_state;\n    }\n    \n    \n    if (msg.payload.model_name==\"Motion Sensor\")\n    {\n        context.global.winkChanged[msg.payload.name].new_state = (msg.payload.last_reading.motion ? \"motion detected\":\"no motion\")\n    }\n    \n    \n    if (msg.payload.model_name==\"Tripper\") \n    {\n        context.global.winkChanged[msg.payload.name].new_state = (msg.payload.last_reading.opened ? \"Opened\":\"Closed\")\n    }\n\n    if ('last_reading' in msg.payload && 'locked' in msg.payload.last_reading) \n    { \n        context.global.winkChanged[msg.payload.name].new_state = (msg.payload.last_reading.locked ? \"Locked\":\"Unlocked\")\n    }\n\n    if (msg.payload.object_type==\"binary_switch\" && (!('powered' in msg.payload.desired_state) || msg.payload.desired_state.powered===false) )\n    {\n        context.global.winkChanged[msg.payload.name].new_state = (msg.payload.last_reading.powered ? \"On\":\"Off\")\n    }\n\n    if (msg.payload.object_type==\"garage_doors\")\n    {\n        context.global.winkChanged[msg.payload.name].new_state = (msg.payload.last_reading.garage_doors==\"0\" ? \"Closed\":\"Opened\")\n    }\n\n    if (msg.payload.object_type==\"light_bulb\" && !('powered' in msg.payload.desired_state))\n    {\n        context.global.winkChanged[msg.payload.name].new_state = {\n                powered:(msg.payload.last_reading.powered ? \"On\":\"Off\"),\n                brightness:(msg.payload.last_reading.powered ? msg.payload.last_reading.brightness*100 : 0)\n        }\n    }\n\n    if ('liquid_detected' in msg.payload)\n    {\n        context.global.winkChanged[msg.payload.name].new_state = (msg.payload.last_reading.liquid_detected ? \"Water detected\":\"No water detected\")\n    }\n\n    if (msg.payload.object_type ==\"propane_tanks\")\n    {\n        context.global.winkChanged[msg.payload.name].new_state = msg.payload.last_reading.remaining\n    }\n\n    if (msg.payload.object_type ==\"powerstrips\")\n    {\n        context.global.winkChanged[msg.payload.name].new_state = msg.payload.outlets[0].name+\" \"+ (msg.payload.outlets[0].powered ? \"On, \":\"Off, \")+msg.payload.outlets[0].name+\" \"+(msg.payload.outlets[1].powered ? \"On\":\"Off\")\n    }\n\n//    node.warn(msg.payload.name+\" changed.\");\n    if (context.global.winkChanged[msg.payload.name].old_state!==context.global.winkChanged[msg.payload.name].new_state)\n    {\n        if (typeof context.global.winkChanged[msg.payload.name].new_state.powered==='undefined')\n        {\n            node.warn(msg.payload.name+\" changed from \"+context.global.winkChanged[msg.payload.name].old_state+\" to \"+context.global.winkChanged[msg.payload.name].new_state);\n        } \n        else \n        {\n            if (context.global.winkChanged[msg.payload.name].old_state.powered!==context.global.winkChanged[msg.payload.name].new_state.powered)\n            {\n                node.warn(msg.payload.name+\" turned \"+context.global.winkChanged[msg.payload.name].new_state.powered+\" (Brightness: \"+context.global.winkChanged[msg.payload.name].new_state.brightness+\"%)\");    \n            }\n            else if (context.global.winkChanged[msg.payload.name].new_state.powered==\"On\")\n            {\n                node.warn(msg.payload.name+\" changed brightness from \"+context.global.winkChanged[msg.payload.name].old_state.brightness+\"% to \"+context.global.winkChanged[msg.payload.name].new_state.brightness+\"%\");\n            }\n        }\n    }\n}\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 151,
    "y": 503,
    "z": "6f62cc19.909d34",
    "wires": [
      [
        "92ed7233.6d129"
      ]
    ]
  },
  {
    "id": "e15e78f3.1ea188",
    "type": "comment",
    "name": "v---- Update the \"Robots\" node to program your robots.",
    "info": "",
    "x": 230,
    "y": 536,
    "z": "6f62cc19.909d34",
    "wires": []
  },
  {
    "id": "92ed7233.6d129",
    "type": "function",
    "name": "Robots",
    "func": "var WinkCMDmsg = \"\";\n// Import global variable into a local variable for ease of use\nchanged = context.global.winkChanged[msg.payload.name];\n\n// All robots are \"if statements\"\n// Use the examples below to create your own robots -- you can have multiple conditions as seen below.\n\n// Example: If the Patio Door opens (and was previously not open), do something.\nif (msg.payload.name==\"Patio Door\" && changed.old_state!==\"Opened\" && changed.new_state==\"Opened\")\n{\n    // This command just shows a message in the debug tab.\n    node.warn(\"Blinking the LIFX lights when the patio door opens\");\n}\n\n// Example 2: If the front door opens (and was previously not open) and my wife isn't home, then do something.\nif (msg.payload.name==\"Front Door\" && changed.old_state!==\"Opened\" && changed.new_state==\"Opened\" && context.global.Presence[Angie].home==false)\n{\n    // Command shows a message in the debug tab when it's triggered:\n    node.warn(\"Front door opened!\");\n    \n    // This command sends an HTTP command to the URL specified.\n    // In this case, it sends a message through IFTTT which then notifies my wife the front door opened whiles he was gone.\n    WinkCMDmsg ={\n        \"url\":\"https://maker.ifttt.com/trigger/front_door_opened/with/key/j_kLX3ovv8-e1lVof12jicgNgNA47t4ueJwX2m3SS79\",\n        \"method\": \"PUT\",\n        payload:{}\n    }\n}\n\n// Example 3: When the garage door opens (and was previously not open), do something.\nif (msg.payload.name==\"GarageDoor\" && changed.old_state!==\"Opened\" && changed.new_state==\"Opened\")\n{\n    // Say something in the debug window.\n    node.warn(\"Garage door opened!\");\n    \n    // Send a wink Command to turn the Garage Interior group on at 100% brightness.\n    // If I wanted to change a bulb on/off, then I would use:\n    // WinkCMDmsg = context.global.executeWinkCMD(\"Light Bulb\",\"light\",\"on\",\"1\");\n    // The command above would turn a light bulb on at 1%. Obviously change on to off, 1 to a number 1 through 100.\n    WinkCMDmsg = context.global.executeWinkCMD(\"Garage Interior\",\"group\",\"on\",\"100\");\n}\n\n\n// You shouldn't have to edit anything below this line.\nif (WinkCMDmsg !== \"\"){\n    node.warn(WinkCMDmsg.url);\n    return [msg,WinkCMDmsg];\n}\nelse { \n    return [msg]; \n}",
    "outputs": "2",
    "noerr": 0,
    "x": 102,
    "y": 568,
    "z": "6f62cc19.909d34",
    "wires": [
      [],
      [
        "2dd6cb25.d22934"
      ]
    ]
  },
  {
    "id": "2dd6cb25.d22934",
    "type": "http request",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 251,
    "y": 575,
    "z": "6f62cc19.909d34",
    "wires": [
      [
        "5e606298.a19f9c"
      ]
    ]
  },
  {
    "id": "5e606298.a19f9c",
    "type": "debug",
    "name": "",
    "active": true,
    "console": "false",
    "complete": "false",
    "x": 410,
    "y": 575,
    "z": "6f62cc19.909d34",
    "wires": []
  }
]
