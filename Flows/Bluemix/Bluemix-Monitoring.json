[
  {
    "id": "4dca531a.b235ac",
    "type": "http request",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 553,
    "y": 84.5,
    "z": "254ec046.dab14",
    "wires": [
      [
        "a71b4fe5.58e4b"
      ]
    ]
  },
  {
    "id": "e61ee357.19e12",
    "type": "inject",
    "name": "",
    "topic": "",
    "payload": "",
    "payloadType": "none",
    "repeat": "86400",
    "crontab": "",
    "once": true,
    "x": 110,
    "y": 88.5,
    "z": "254ec046.dab14",
    "wires": [
      [
        "2a4a5d8f.d5b5a2",
        "13651326.ec9aed"
      ]
    ]
  },
  {
    "id": "2a4a5d8f.d5b5a2",
    "type": "function",
    "name": "Get OAuth Tocken",
    "func": "var uid=context.global.WinkUser.uid;\nvar pwd=context.global.WinkUser.pwd;\nvar newMsg ={\n    \"url\":\"https://winkapi.quirky.com/oauth2/token\",\n    \"method\": \"POST\",\n    headers: {\n        \"Content-Type\":\"application/json\"\n    },\n    payload: {\n        \"client_id\": \"7243d8212e040d75dada47ce68a04c24\",\n        \"client_secret\": \"7d597e496afd6196db8d8738829f5a09\",\n        \"username\": uid,\n        \"password\": pwd,\n        \"grant_type\": \"password\"\n    }\n}\nreturn newMsg;",
    "outputs": 1,
    "valid": true,
    "x": 304,
    "y": 88.5,
    "z": "254ec046.dab14",
    "wires": [
      [
        "4dca531a.b235ac"
      ]
    ]
  },
  {
    "id": "a71b4fe5.58e4b",
    "type": "function",
    "name": "DefineGlobalTocken",
    "func": "// sample function that stores wink token in a global variable so other api calls\n//can use that\ncontext.global.WinkToken=msg.payload.data.access_token;\nnode.log(context.global.WinkToken);\nvar msg ={ \"payload\":\"Done\"}\nreturn msg;",
    "outputs": 1,
    "valid": true,
    "x": 754,
    "y": 89.5,
    "z": "254ec046.dab14",
    "wires": [
      [
        "3b3cc9b4.c4c336"
      ]
    ]
  },
  {
    "id": "3b3cc9b4.c4c336",
    "type": "function",
    "name": "Prepare HTTPS requests by device type",
    "func": "var newMsg1 ={\n    \"url\":\"https://winkapi.quirky.com/users/me/wink_devices\",\n    \"method\": \"GET\",\n    headers: {\n        \"Authorization\":\"Bearer \"+context.global.WinkToken,\n        \"User-Agent\":\"Manufacturer/Darwin node/0.10.30 Wink/3.1.0\"\n    }\n}\nvar newMsg2 ={\n    \"url\":\"https://winkapi.quirky.com/users/me/linked_services\",\n    \"method\": \"GET\",\n    headers: {\n        \"Authorization\":\"Bearer \"+context.global.WinkToken\n     //   \"User-Agent\":\"Manufacturer/Darwin node/0.10.30 Wink/3.1.0\"\n }\n\n}\n\nvar newMsg3 ={\n    \"url\":\"https://winkapi.quirky.com/users/me/groups\",\n    \"method\": \"GET\",\n    headers: {\n        \"Authorization\":\"Bearer \"+context.global.WinkToken,\n        \"User-Agent\":\"Manufacturer/Darwin node/0.10.30 Wink/3.1.0\"\n }\n\n}\n\nvar newMsg4 ={\n    \"url\":\"https://winkapi.quirky.com/users/me/scenes\",\n    \"method\": \"GET\",\n    headers: {\n        \"Authorization\":\"Bearer \"+context.global.WinkToken,\n        \"User-Agent\":\"Manufacturer/Darwin node/0.10.30 Wink/3.1.0\"\n }\n\n}\nreturn [newMsg1,newMsg2,newMsg3,newMsg4];\n//return [newMsg1,newMsg2,newMsg3,newMsg4,newMsg5,newMsg6,newMsg7,newMsg8,newMsg9,newMsg10,newMsg11];\n",
    "outputs": "4",
    "valid": true,
    "x": 1057,
    "y": 87.5,
    "z": "254ec046.dab14",
    "wires": [
      [
        "9c127e5.f63ed8"
      ],
      [
        "21b6f9e6.de4906"
      ],
      [
        "8486c86.f7b7938"
      ],
      [
        "c531ad72.3ace5"
      ]
    ]
  },
  {
    "id": "9c127e5.f63ed8",
    "type": "http request",
    "name": "GetWDevices",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 1362,
    "y": 32.5,
    "z": "254ec046.dab14",
    "wires": [
      [
        "9eff44f6.6100b8"
      ]
    ]
  },
  {
    "id": "13651326.ec9aed",
    "type": "function",
    "name": "DefineGlobalObjects",
    "func": "//use this function to initialize global variables that can be used in any flow or function\n//and will keep their values while application is running\n\nif (typeof context.global.ignoreMotion === 'undefined')\n{\n    context.global.ignoreMotion=false;\n}\nif (typeof context.global.mediaPlaying==='undefined')\n{\n    context.global.mediaPlaying=false;\n}\nif (typeof context.global.Weather === 'undefined')\n{\n    context.global.Weather= {};\n}\nif (typeof context.global.winkState==='undefined' )\n{\n    context.global.winkState = {};\n}\ncontext.global.FreeboardAuthTocken=\"400932879e54x103321\";\n\ncontext.global.getWinkState = function (body) {\n    var results, updateP\n\n    updateP = !body.data\n    results = updateP ? [body] : body.data\n\n    results.forEach(function (result) {\n        var key, len, prop, readings, type\n        node.warn(result.object_type+\" \"+ result.object_id+\" \"+result.name) //for debugging\n        type = result.object_type\n        if (type) {\n        key = result.name\n        if (type==\"binary_switch\") type=\"binary_switches\"\n        else type=type+\"s\"\n        }\n        else {\n            if (!result.linked_service_id || result._msgid) return\n            type = 'linked_services'\n            key = result.service\n            result.object_id = result.linked_service_id\n        }\n        if (!context.global.winkState[type]) context.global.winkState[type] = {}\n\n        if ((!!context.global.winkState[type][key]) && (context.global.winkState[type][key].object_id != result.object_id)) {\n            key += ' (#' + result.object_id + ')'\n        }\n\n        context.global.winkState[type][key] =\n        {\n            name: result.name || key\n        , object_type: type\n        , object_id: result.object_id\n        }\n        if (result.lat_lng) {\n            if ((result.lat_lng[0] === 0) && (result.lat_lng[1] === 0)) result.lat_lng = [null, null]\n            context.global.winkState[type][key].coordinates = result.lat_lng\n        }\n\n        readings = result.last_reading\n        for (prop in readings) {\n            len = prop.length\n            if ((prop.indexOf('desired_') === -1) && (prop.lastIndexOf('_at') !== (len - 3))) {\n                context.global.winkState[type][key][prop] = readings[prop]\n            }\n        }\n        if (!!result.linked_service_id) context.global.winkState[type][key].connection = !result.invalidated_at\n\n        if (!updateP) return\n        if (!context.global.winkState.lastUpdates) context.global.winkState.lastUpdates = []\n        context.global.winkState[type][key].timestamp = new Date()\n        context.global.winkState.lastUpdates.splice(0, 0, context.global.winkState[type][key])\n        if (context.global.winkState.lastUpdates.length > 10) context.global.winkState.lastUpdates.pop()\n    })\n}\n\nreturn;",
    "outputs": 1,
    "valid": true,
    "x": 301,
    "y": 136.5,
    "z": "254ec046.dab14",
    "wires": [
      []
    ]
  },
  {
    "id": "699b785c.966488",
    "type": "http in",
    "name": "",
    "url": "/red/getGlobalDataJSon",
    "method": "get",
    "x": 127,
    "y": 254.5,
    "z": "254ec046.dab14",
    "wires": [
      [
        "db44624f.24bba"
      ]
    ]
  },
  {
    "id": "db44624f.24bba",
    "type": "function",
    "name": "Throw Wink Data",
    "func": "if(msg.req.headers.authorization && msg.req.headers.authorization==\"Bearer \"+context.global.FreeboardAuthTocken){\nmsg.payload.WinkData=context.global.winkState;\nmsg.payload.LocalWeather=context.global.Weather;\nmsg.payload.WinkSubscriptions=context.global.WinkSubscriptions;\nmsg.res.statusCode=\"200\";\nreturn msg;\n}\nelse\n{\n    //msg.payload=\"Not Authorized\";\n   msg.res.send(\"403\",\"Forbidden\");\n  return;\n}",
    "outputs": 1,
    "valid": true,
    "x": 358,
    "y": 240.5,
    "z": "254ec046.dab14",
    "wires": [
      [
        "ec45064c.13baf8"
      ]
    ]
  },
  {
    "id": "ec45064c.13baf8",
    "type": "http response",
    "name": "",
    "x": 574,
    "y": 241.5,
    "z": "254ec046.dab14",
    "wires": []
  },
  {
    "id": "5e36c299.a1c93c",
    "type": "http in",
    "name": "",
    "url": "/red/wink/subscribtions",
    "method": "get",
    "x": 160,
    "y": 376.5,
    "z": "254ec046.dab14",
    "wires": [
      [
        "4e840244.b17bfc",
        "14692c1.feb96d4"
      ]
    ]
  },
  {
    "id": "4e840244.b17bfc",
    "type": "function",
    "name": "Wink Subscription resonse",
    "func": "if (msg.payload[\"hub.mode\"]==\"subscribe\")\n{\n    msg.res.send(200,msg.payload[\"hub.challenge\"]);\n}\nelse\n{\n    msg.res.send(400,\"Bad Request darling\");\n}\nreturn msg;",
    "outputs": 1,
    "valid": true,
    "x": 472,
    "y": 392.5,
    "z": "254ec046.dab14",
    "wires": [
      []
    ]
  },
  {
    "id": "eea39baa.115c68",
    "type": "http in",
    "name": "",
    "url": "/red/wink/subscribtions",
    "method": "post",
    "x": 162,
    "y": 446.5,
    "z": "254ec046.dab14",
    "wires": [
      [
        "31a37a01.ce5c86",
        "36b3dfe5.c94c2"
      ]
    ]
  },
  {
    "id": "31a37a01.ce5c86",
    "type": "debug",
    "name": "",
    "active": false,
    "console": "true",
    "complete": "payload",
    "x": 463,
    "y": 472.5,
    "z": "254ec046.dab14",
    "wires": []
  },
  {
    "id": "27b1f238.d84e0e",
    "type": "inject",
    "name": "",
    "topic": "",
    "payload": "",
    "payloadType": "none",
    "repeat": "",
    "crontab": "",
    "once": false,
    "x": 658,
    "y": 461.5,
    "z": "254ec046.dab14",
    "wires": [
      [
        "81b61dca.7e49e"
      ]
    ]
  },
  {
    "id": "81b61dca.7e49e",
    "type": "delay",
    "name": "",
    "pauseType": "delay",
    "timeout": "30",
    "timeoutUnits": "seconds",
    "rate": "1",
    "rateUnits": "second",
    "randomFirst": "1",
    "randomLast": "5",
    "randomUnits": "seconds",
    "drop": false,
    "x": 843,
    "y": 482.5,
    "z": "254ec046.dab14",
    "wires": [
      [
        "8b1f607d.74e0a"
      ]
    ]
  },
  {
    "id": "8b1f607d.74e0a",
    "type": "function",
    "name": "Prepare Wink devices subscription request",
    "func": "var baseUrl = \"https://winkapi.quirky.com/\";\nvar callbackUrl=context.global.BlueMixUrlBase+\"/red/wink/subscribtions\";\n   for (var winkDevice in context.global.winkState)\n    {\n        if (winkDevice!=\"linked_services\")\n        {\n            var deviceUrl=baseUrl+winkDevice;\n            for (var winkDeviceName in context.global.winkState[winkDevice])\n            {\n                deviceId=context.global.winkState[winkDevice][winkDeviceName].object_id;\n                node.warn(winkDeviceName+\" \"+deviceId);\n                var newMsg ={\n                    \"url\":baseUrl+\"/\"+winkDevice+\"/\"+deviceId+\"/subscriptions\",\n                    \"method\": \"POST\",\n                    headers: {\n                        \"Authorization\":\"Bearer \"+context.global.WinkToken,\n                        \"User-Agent\":\"Manufacturer/Darwin node/0.10.30 Wink/3.1.0\",\n                        \"Content-Type\":\"application/json\"\n                    },\n                    payload: {\n                        \"callback\": callbackUrl\n                    }\n                };\n                node.send(newMsg);\n            }\n        }\n    }\nreturn;",
    "outputs": 1,
    "valid": true,
    "x": 927,
    "y": 376.5,
    "z": "254ec046.dab14",
    "wires": [
      [
        "442577bf.bbda88",
        "6501f413.9afe0c"
      ]
    ]
  },
  {
    "id": "6501f413.9afe0c",
    "type": "http request",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 1253,
    "y": 338.5,
    "z": "254ec046.dab14",
    "wires": [
      [
        "d2b40238.2d4c",
        "dd21f2a7.22de1"
      ]
    ]
  },
  {
    "id": "d2b40238.2d4c",
    "type": "function",
    "name": "CheckResposeCode",
    "func": "if (typeof context.global.WinkSubscriptions === 'undefined')\n{\n    context.global.WinkSubscriptions = new Object();\n}\nif (msg.statusCode==202)\n{\n    node.warn(\"Subscription ID: \"+msg.payload.data.subscription_id);\n    context.global.WinkSubscriptions[msg.payload.data.subscription_id]={\n        \"subscription_id\": msg.payload.data.subscription_id,\n        \"url_base\":msg.payload.data.topic,\n        \"callback\":msg.payload.data.callback\n    }\n}\nelse\n{\n    node.warn(\"Subscription issue. Status: \"+msg.statusCode);\n}\nreturn;",
    "outputs": 1,
    "valid": true,
    "x": 1270,
    "y": 498.5,
    "z": "254ec046.dab14",
    "wires": [
      []
    ]
  },
  {
    "id": "dd21f2a7.22de1",
    "type": "debug",
    "name": "",
    "active": true,
    "console": "false",
    "complete": "false",
    "x": 1242,
    "y": 556.5,
    "z": "254ec046.dab14",
    "wires": []
  },
  {
    "id": "442577bf.bbda88",
    "type": "debug",
    "name": "",
    "active": false,
    "console": "true",
    "complete": "true",
    "x": 1057,
    "y": 466.5,
    "z": "254ec046.dab14",
    "wires": []
  },
  {
    "id": "3da6c575.c2593a",
    "type": "comment",
    "name": "Section for status  subscription---------------------------------------------------------------------------------------------------------------------------------",
    "info": "",
    "x": 475,
    "y": 315.5,
    "z": "254ec046.dab14",
    "wires": []
  },
  {
    "id": "e686fb1c.197908",
    "type": "comment",
    "name": "Initialize section-----------------------------------------------------------------------------------------------------------",
    "info": "",
    "x": 363,
    "y": 23.5,
    "z": "254ec046.dab14",
    "wires": []
  },
  {
    "id": "679a8f1a.98657",
    "type": "comment",
    "name": "Weather-------------------------------------------------------------------------------------------------------------------------------",
    "info": "",
    "x": 415,
    "y": 623.5,
    "z": "254ec046.dab14",
    "wires": []
  },
  {
    "id": "dc0b7618.23f488",
    "type": "debug",
    "name": "",
    "active": true,
    "console": "false",
    "complete": "false",
    "x": 950,
    "y": 730.5,
    "z": "254ec046.dab14",
    "wires": []
  },
  {
    "id": "ab3a4091.54c5c",
    "type": "http request",
    "name": "Get Weather",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 439,
    "y": 735.5,
    "z": "254ec046.dab14",
    "wires": [
      [
        "d9611bdb.269ee8"
      ]
    ]
  },
  {
    "id": "ab754e17.548ab",
    "type": "inject",
    "name": "",
    "topic": "",
    "payload": "",
    "payloadType": "none",
    "repeat": "600",
    "crontab": "",
    "once": false,
    "x": 149,
    "y": 752.5,
    "z": "254ec046.dab14",
    "wires": [
      [
        "1cd9c8e0.e32637"
      ]
    ]
  },
  {
    "id": "d9611bdb.269ee8",
    "type": "function",
    "name": "Get current weather",
    "func": "var currDate= new Date();\nvar currHours=currDate.getHours();\nvar currMins=currDate.getMinutes();\nif(msg.payload.currently)\n{\ncontext.global.Weather.Offset=msg.payload.offset;\ncontext.global.Weather.CloudCover=Math.round(msg.payload.currently.cloudCover*100);\ncontext.global.Weather.WeatherSummary=msg.payload.currently.summary;\nvar date = new Date(msg.payload.daily.data[0].sunsetTime*1000);\nvar hours = date.getHours();\nvar minutes =date.getMinutes();\ncontext.global.Weather.SunsetHour=hours+context.global.Weather.Offset;\nif (context.global.Weather.SunsetHour<0)\n {\n     context.global.Weather.SunsetHour=24+context.global.Weather.SunsetHour;\n }\ncontext.global.Weather.SunsetMin=minutes;\nvar date = new Date(msg.payload.daily.data[0].sunriseTime*1000);\nvar hours = date.getHours();\nvar minutes =date.getMinutes();\ncontext.global.Weather.SunriseHour=hours+context.global.Weather.Offset;\ncontext.global.Weather.SunriseMin=minutes;\ncontext.global.Weather.outsideTemp=msg.payload.currently.temperature;\ncontext.global.Weather.PrecipationPbb=msg.payload.currently.precipProbability;\ncontext.global.Weather.HumidityOutside=msg.payload.currently.humidity;\ncurrHours=currHours+context.global.Weather.Offset;\nif (currHours<0)\n {\n     currHours=24+currHours;\n }\n node.warn(\"time \"+currHours+\":\"+currMins);\nif ((currHours > context.global.Weather.SunriseHour && currHours < context.global.Weather.SunsetHour) || (currHours==context.global.Weather.SunsetHour && currMins <context.global.Weather.SunsetMin))\n{\n    var timeFrame=\"DAY\";\n}\nelse {\n    var timeFrame=\"NIGHT\";\n}\ncontext.global.Weather.timeframe=timeFrame;\n}\nnewMsg = {\n    payload: {\n        \"offset\":context.global.Weather.Offset,\n        \"currtime\": currHours+\":\"+currMins,\n        \"CloudCover\": context.global.Weather.CloudCover,\n        \"WeatherSummary\": context.global.Weather.WeatherSummary,\n        \"sunsetTime\": context.global.Weather.SunsetHour+\":\"+context.global.Weather.SunsetMin,\n        \"sunriseTime\": context.global.Weather.SunriseHour+\":\"+context.global.Weather.SunriseMin,\n        \"outsideTemp\": context.global.Weather.outsideTemp,\n        \"precipation\": context.global.Weather.PrecipationPbb+\" %\",\n        \"timeframe\": context.global.Weather.timeframe\n    }\n};\nreturn newMsg;",
    "outputs": 1,
    "valid": true,
    "x": 674,
    "y": 744.5,
    "z": "254ec046.dab14",
    "wires": [
      [
        "dc0b7618.23f488"
      ]
    ]
  },
  {
    "id": "1cd9c8e0.e32637",
    "type": "function",
    "name": "",
    "func": "var newMsg ={\n        \"url\":\"https://api.forecast.io/forecast/\"+context.global.forecastIoApiKey+\"/\"+context.global.HomeLocation.lat+\",\"+context.global.HomeLocation.lon,\n        \"method\": \"GET\"\n}\nreturn newMsg;",
    "outputs": 1,
    "valid": true,
    "x": 275,
    "y": 748.5,
    "z": "254ec046.dab14",
    "wires": [
      [
        "ab3a4091.54c5c",
        "f70c7396.08f39"
      ]
    ]
  },
  {
    "id": "f70c7396.08f39",
    "type": "debug",
    "name": "",
    "active": false,
    "console": "false",
    "complete": "true",
    "x": 459,
    "y": 804.5,
    "z": "254ec046.dab14",
    "wires": []
  },
  {
    "id": "9eff44f6.6100b8",
    "type": "function",
    "name": "GetDevices",
    "func": "context.global.getWinkState(msg.payload);\ndelete context.global.winkState._msgid;\nreturn;\n",
    "outputs": 1,
    "valid": true,
    "x": 1591,
    "y": 31,
    "z": "254ec046.dab14",
    "wires": [
      []
    ]
  },
  {
    "id": "21b6f9e6.de4906",
    "type": "http request",
    "name": "GetWServices",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 1370,
    "y": 90,
    "z": "254ec046.dab14",
    "wires": [
      [
        "7914eeee.86eb1"
      ]
    ]
  },
  {
    "id": "7914eeee.86eb1",
    "type": "function",
    "name": "GetServices",
    "func": "context.global.getWinkState(msg.payload);\ndelete context.global.winkState._msgid;\nreturn;\n",
    "outputs": 1,
    "valid": true,
    "x": 1612,
    "y": 127,
    "z": "254ec046.dab14",
    "wires": [
      []
    ]
  },
  {
    "id": "36b3dfe5.c94c2",
    "type": "function",
    "name": "UpdateDevices",
    "func": "context.global.getWinkState(msg.payload);\ndelete context.global.winkState._msgid;\nreturn;\n",
    "outputs": 1,
    "valid": true,
    "x": 490,
    "y": 552,
    "z": "254ec046.dab14",
    "wires": [
      []
    ]
  },
  {
    "id": "984be22d.67b42",
    "type": "comment",
    "name": "Section for web services---------------------------------------------------------------------------------------------------------------------------------",
    "info": "",
    "x": 447.5,
    "y": 186,
    "z": "254ec046.dab14",
    "wires": []
  },
  {
    "id": "14692c1.feb96d4",
    "type": "debug",
    "name": "",
    "active": false,
    "console": "false",
    "complete": "true",
    "x": 392,
    "y": 352,
    "z": "254ec046.dab14",
    "wires": []
  },
  {
    "id": "8486c86.f7b7938",
    "type": "http request",
    "name": "GetWGroups",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 1368,
    "y": 155,
    "z": "254ec046.dab14",
    "wires": [
      [
        "4eb3e703.b14c18"
      ]
    ]
  },
  {
    "id": "4eb3e703.b14c18",
    "type": "function",
    "name": "GetGroups",
    "func": "context.global.getWinkState(msg.payload);\ndelete context.global.winkState._msgid;\nreturn;\n",
    "outputs": 1,
    "valid": true,
    "x": 1602,
    "y": 192,
    "z": "254ec046.dab14",
    "wires": [
      []
    ]
  },
  {
    "id": "c531ad72.3ace5",
    "type": "http request",
    "name": "GetWGroups",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 1384,
    "y": 235,
    "z": "254ec046.dab14",
    "wires": [
      [
        "36b4c612.c94b3a"
      ]
    ]
  },
  {
    "id": "36b4c612.c94b3a",
    "type": "function",
    "name": "GetScenes",
    "func": "context.global.getWinkState(msg.payload);\ndelete context.global.winkState._msgid;\nreturn;\n",
    "outputs": 1,
    "valid": true,
    "x": 1618,
    "y": 272,
    "z": "254ec046.dab14",
    "wires": [
      []
    ]
  }
]
