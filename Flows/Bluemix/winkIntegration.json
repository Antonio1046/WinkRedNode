[
  {
    "id": "32d823cc.59d5cc",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": "    function calcCrow(lat1, lon1, lat2, lon2) \n    {\n      var R = 6371; // km\n      var dLat = toRad(lat2-lat1);\n      var dLon = toRad(lon2-lon1);\n      Rlat1 = toRad(lat1);\n      Rlat2 = toRad(lat2);\n\n      var a = Math.sin(dLat/2) * Math.sin(dLat/2) +\n        Math.sin(dLon/2) * Math.sin(dLon/2) * Math.cos(Rlat1) * Math.cos(Rlat2); \n      var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); \n      var d = R * c;\n      return d;\n    }\n\n    // Converts numeric degrees to radians\n    function toRad(Value) \n    {\n        return Value * Math.PI / 180;\n    }\n\nif (context.global.OwnTracksPwd===msg.req.params.key) {\n    if('_type' in msg.payload) {\n        var waypoint,user,pos;\n        var dst_from_home=-1;    \n        var do_send=false;\n        if (msg.payload['_type']=='transition') {\n            waypoint=true;\n            do_send=true;\n            user=msg.req.params.user;\n            pos=msg.payload;\n        }\n        if (msg.payload['_type']=='location') {\n        waypoint=false;\n        do_send=true;\n        user=msg.req.params.user\n        pos=msg.payload;\n        }\n        if (do_send){\n        var event_trigger='none';\n        if ('t' in pos) event_trigger=pos.t;   \n            if ('HomeLocation' in context.global){\n                dst_from_home=Math.round(calcCrow(pos.lat,pos.lon,context.global.HomeLocation.lat,context.global.HomeLocation.lon)*1000);\n            }        \n        loc_msg={\n            url:context.global.BlueMixUrlBase+'/red/wink/subscribtions',\n            method:\"POST\",\n            payload: {\n                 capabilities: { fields: [ \n                  { field: 'lat', type: 'float' },\n                  { field: 'lon', type: 'float' },\n                  { field: 'battery', type: 'percentage' },\n                  { field: 'lastWaypoint', type: 'string' },\n                  { field: 'lastEvent', type: 'string' },\n                  { field: 'accuracy', type: 'float' },\n                  { field: 'distanceFromHome', type: 'float' },\n                  { field: 'trigger', type: 'string' },\n                  { field: 'lastUpdated', type: 'timestamp'}\n                  ] },\n              device_manufacturer: 'OwnTracks',\n              \"eco_system\" : \"NODE-RED\",\n              last_event: \n               { brightness_occurred_at: null,\n                 loudness_occurred_at: null,\n                 vibration_occurred_at: null },\n              last_reading: \n               { \n                    agent_session_id: 'FALSE',\n                    connection: true,\n                    'lat': pos.lat,\n                    'lon': pos.lon,\n                    'coordinates':  pos.lat+','+pos.lon,\n                    'battery': pos.batt,\n                    'accuracy' : pos.acc,\n                    'trigger'  : event_trigger,\n                    'lastUpdated' : pos.tst\n               },\n              manufacturer_device_model: 'owntracks_geolocation_sensor',\n              model_name: 'Geolocation Sensor',\n              name:user+'_Geo',\n              object_id:  user+'_Geo',\n              object_type: 'sensor_pod',\n              radio_type: 'wifi',\n              sensor_pod_id: user+'_Geo',\n              triggers: [],\n              units: {},\n              upc_code: user+'_Geo',\n              upc_id: user+'_Geo'\n              }\n        };\n        pos.acc=parseInt(pos.acc);\n        if(dst_from_home!=-1) loc_msg.payload.last_reading.distanceFromHome=(dst_from_home < pos.acc ? 0 : dst_from_home);\n        if (waypoint /*|| dst_from_home<=50 || (dst_from_home < pos.acc && pos.acc <100)*/) { \n//            pos.desc=(dst_from_home < pos.acc  ? 'home' : pos.desc);\n//            pos.event=(dst_from_home < pos.acc  ? 'enter' : pos.event);\n            loc_msg.payload.last_reading.lastWaypoint=(dst_from_home < pos.acc  ? 'home' : pos.desc);\n            loc_msg.payload.last_reading.lastEvent=(dst_from_home < pos.acc  ? 'enter' : pos.event);\n        }\n /*       if (!waypoint && dst_from_home >=pos.acc &&  dst_from_home>50){\n            waypoint=true;\n            pos.desc='home'\n            loc_msg.payload.last_reading.lastEvent;\n        }*/\n    node.send(loc_msg); \n    if ((waypoint  && pos.desc.toLowerCase().indexOf('home')!=-1) /*|| dst_from_home < pos.acc*/){\n        loc_msg1={\n            url:context.global.BlueMixUrlBase+'/red/presence',\n        method:\"POST\",\n        payload: {\n        \"iftttkey\":context.global.FREEBOARD_TOKEN,\"name\":user,\"home\":(pos.event=='enter' ? \"yes\" : \"no\")\n        }\n        };\n        node.send(loc_msg1);\n    }\n    }\n    }\n}",
    "outputs": 1,
    "noerr": 0,
    "x": 344,
    "y": 2266,
    "wires": [
      [
        "b5bc728b.4105f"
      ]
    ]
  },
  {
    "id": "6fcc4b13.f6eea4",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": "var avgtemp=0;\nvar avghumidity=0;\nvar numthermos=0;\nvar numhumidities=0;\nmsg.payload={\n    \"thermostats\":context.global.Ecobee.Thermostats,\n    \"sensor_pods\":context.global.Ecobee.Sensors\n};\nif (typeof context.global.winkState.thermostats=='undefined'){ context.global.winkState.thermostats = new Object(); }\nfor (var name in msg.payload.thermostats)\n{\n//    node.warn(\"Importing: \"+name+\" thermostat\");\n    context.global.winkState.thermostats[name]={\n        \"name\":name,\n        \"object_type\": msg.payload.thermostats[name].object_type,\n        \"object_id\": msg.payload.thermostats[name].object_id,\n        \"freeboard\": 0,\n        \"connection\": msg.payload.thermostats[name].connection,\n        \"min_set_point\": (msg.payload.thermostats[name].min_set_point-32)*(5/9),\n        \"max_set_point\": (msg.payload.thermostats[name].max_set_point-32)*(5/9),\n        \"mode\": msg.payload.thermostats[name].mode,\n        \"temperature\": (msg.payload.thermostats[name].temperature-32)*(5/9),\n        \"humidity\": msg.payload.thermostats[name].humidity,\n        \"users_away\":false\n    };\n    if (msg.payload.thermostats[name].temperature){ avgtemp+=(msg.payload.thermostats[name].temperature-32)*(5/9); numthermos++; }\n    if (msg.payload.thermostats[name].humidity){ avghumidity+=(msg.payload.thermostats[name].humidity); numhumidities++; }\n}\n\navgtemp=avgtemp/numthermos;\navghumidity=avghumidity/numhumidities;\n\nif (typeof context.global.winkState.groups[\".sensors\"].temperature=='undefined'){ context.global.winkState.groups[\".sensors\"].temperature = new Object(); }\nif (typeof context.global.winkState.groups[\".sensors\"].humidity=='undefined'){ context.global.winkState.groups[\".sensors\"].humidity = new Object(); }\ncontext.global.winkState.groups[\".sensors\"].temperature={\n    average:avgtemp\n};\ncontext.global.winkState.groups[\".sensors\"].humidity={\n    average:avghumidity\n};\n\n//node.warn(\"Ecobee Thermostat import finished\");\n\nfor (var name in msg.payload.sensor_pods)\n{\n//    node.warn(\"Importing: \"+name+\" sensor pod\");\n    context.global.winkState.sensor_pods[name]={\n        \"name\":name,\n        \"object_type\":msg.payload.sensor_pods[name].object_type,\n        \"object_id\":msg.payload.sensor_pods[name].object_id,\n        \"freeboard\":0,\n    }\n    if (msg.payload.sensor_pods[name].motion==\"true\"){context.global.winkState.sensor_pods[name].motion=true}\n    else if (msg.payload.sensor_pods[name].motion==\"false\"){context.global.winkState.sensor_pods[name].motion=false}\n    context.global.winkDevCap[name]={\n        \"sensor_types\":[{}]\n    }\n    context.global.winkDevCap[name].sensor_types=[{\n            \"field\":\"motion\",\n            \"type\":\"boolean\"\n        }]\n}\n\n//node.warn(\"Ecobee Remote Sensor import finished\");\nvar newMsg={\n    \"payload\":\"Ecobee Thermostat and Remote Sensor Data imported successfully\"\n};\nreturn newMsg;",
    "outputs": 1,
    "noerr": 0,
    "x": 275.5,
    "y": 868.5,
    "wires": [
      [
        "6bb5c809.5f72f8"
      ]
    ]
  },
  {
    "id": "a830643a.3af6b8",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": "if ('wnr' in context.global){\nvar WinkCMDmsg={};\nvar web_req=(context.global.getCookie('exchange_token',msg.req.headers.cookie)=='0' ? false:true);\n\nif (msg.payload.iftttkey==context.global.IFTTT_TOKEN || msg.payload.iftttkey==context.global.FREEBOARD_TOKEN) web_req=true;\nif (web_req)\n{\n    if ('ifttt' in  msg.payload)\n    {\n      context.global.ifttt=(msg.payload.ifttt.toLowerCase()==\"on\" ? true:false)\n      msg.res.StatusCode=200;\n      return [msg];\n    }\n    if ('winkName' in msg.payload)\n    {\n//    node.warn('Name '+msg.payload.winkName)\n    if ('cmd' in msg.payload)\n    {\n        cmd=msg.payload.cmd\n    } else cmd='on' \n    if ('level' in msg.payload)\n    {\n        level=msg.payload.level\n    }  else level= (cmd.toLowerCase() =='on' ? 100 : 0)\n//    node.warn(level)\n    WinkCMDmsg = context.global.executeWinkCMD(msg.payload.winkName,msg.payload.type,msg.payload.cmd,level);\n    msg.statusCode=200;\n//    node.warn('Message '+ JSON.stringify(WinkCMDmsg))\n    }\n    if ('nodeRedVar' in msg.payload) {\n        if ('value' in msg.payload) value=msg.payload.value \n        else value = true;\n    context.global[msg.payload.nodeRedVar]=value;\n    WinkCMDmsg=context.global.send_ui_note('information',30000,'Variable '+msg.payload.nodeRedVar+' set to: '+context.global[msg.payload.nodeRedVar],null);\n    WinkCMDmsg.topic=msg.payload.nodeRedVar;\n    WinkCMDmsg.var_val=value;    \n    }\n}\nelse {\n    node.warn(\"ifttt messages bad request\")\n     msg.statusCode=403;\n     return [msg,null];\n}\nif (WinkCMDmsg!==\"\")\n{\n    return [msg,WinkCMDmsg];\n}\nelse\n{\nreturn [msg,null];\n}\n} else return [msg,null];",
    "outputs": "2",
    "noerr": 0,
    "x": 632.5,
    "y": 245.49993896484375,
    "wires": [
      [
        "7fad256d.bfd00c"
      ],
      [
        "74e89d40.bb20f4"
      ]
    ]
  },
  {
    "id": "bde27635.0f2fd8",
    "type": "http in",
    "z": "17b3daf5.e84c25",
    "name": "",
    "url": "/red/ifttt",
    "method": "post",
    "swaggerDoc": "",
    "x": 105.5,
    "y": 238.5,
    "wires": [
      [
        "deb24fe3.2d914",
        "ecb3cff1.6ef94"
      ]
    ]
  },
  {
    "id": "7fad256d.bfd00c",
    "type": "http response",
    "z": "17b3daf5.e84c25",
    "name": "",
    "x": 787.5,
    "y": 208.49993896484375,
    "wires": []
  },
  {
    "id": "a5be95c4.9b0b28",
    "type": "comment",
    "z": "17b3daf5.e84c25",
    "name": "IFTTT Integration-------------------------------------------------------------------------------------------------------------------------------",
    "info": "",
    "x": 441.5,
    "y": 172.5,
    "wires": []
  },
  {
    "id": "5c387068.3131b",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 1148.5,
    "y": 245.49993896484375,
    "wires": [
      [
        "1b785d0f.0db4b3",
        "67340f05.a811"
      ]
    ]
  },
  {
    "id": "9624116c.c8aac",
    "type": "comment",
    "z": "17b3daf5.e84c25",
    "name": "Wink API Apdex-------------------------------------------------------------------------------------------------------------------------------",
    "info": "",
    "x": 442.5,
    "y": 426.49993896484375,
    "wires": []
  },
  {
    "id": "6a234792.94a838",
    "type": "inject",
    "z": "17b3daf5.e84c25",
    "name": "",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "repeat": "600",
    "crontab": "",
    "once": true,
    "x": 140.5,
    "y": 466.4998779296875,
    "wires": [
      [
        "6adef8eb.5a1328"
      ]
    ]
  },
  {
    "id": "6adef8eb.5a1328",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": "context.global.new_version=\"Y\";\nvar newMsg ={\n    \"url\":\"http://status.winkapp.com/metrics-display/009ykpcmnm25/day.json\",\n    \"method\":\"GET\",\n    headers: {\n        \"Content-Type\":\"application/json\"\n    }\n};\nreturn newMsg;",
    "outputs": 1,
    "noerr": 0,
    "x": 273.5,
    "y": 467.49993896484375,
    "wires": [
      [
        "c602710d.93c7b"
      ]
    ]
  },
  {
    "id": "c602710d.93c7b",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 492.5,
    "y": 479.49993896484375,
    "wires": [
      [
        "ecb61726.e89f18"
      ]
    ]
  },
  {
    "id": "ecb61726.e89f18",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": "if ('metrics' in msg.payload && msg.payload.metrics.length>0){\ncontext.global.winkState.winkAPI = \"\";\nwinkAPI=\"\";\n        for(j = 0; j<msg.payload.metrics[0].data.length; j++)\n        {\n            winkAPI = msg.payload.metrics[0].data[j].value;\n        }\ncontext.global.winkState.winkAPI=winkAPI;\nvar newMsg={\n    payload:\"Wink Apdex is currently: \"+context.global.winkState.winkAPI\n};\nreturn newMsg;\n}\n",
    "outputs": 1,
    "noerr": 0,
    "x": 708.5,
    "y": 467.49993896484375,
    "wires": [
      []
    ]
  },
  {
    "id": "bc3e90aa.8fe48",
    "type": "comment",
    "z": "17b3daf5.e84c25",
    "name": "DromCam/NestCam Integration-------------------------------------------------------------------------------------------------------------------------------",
    "info": "",
    "x": 492.5,
    "y": 526.9998779296875,
    "wires": []
  },
  {
    "id": "34785b37.a13fa4",
    "type": "comment",
    "z": "17b3daf5.e84c25",
    "name": "Presence  via IFTTT/Tasker/etc. -------------------------------------------------------------------------------------------------------------------------------",
    "info": "",
    "x": 492,
    "y": 627.9998779296875,
    "wires": []
  },
  {
    "id": "9239e6a6.550878",
    "type": "http in",
    "z": "17b3daf5.e84c25",
    "name": "",
    "url": "/red/presence",
    "method": "post",
    "swaggerDoc": "",
    "x": 172,
    "y": 674.9998779296875,
    "wires": [
      [
        "fb2898e8.4922c8",
        "bbe21926.db25b8",
        "47bccbe6.ebe3a4"
      ]
    ]
  },
  {
    "id": "fb2898e8.4922c8",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "Update Presence entry",
    "func": "pr_msg={};\n//if (typeof context.global.PresenceHistory === 'undefined') context.global.PresenceHistory=[]\npr_msg.payload={old_value:context.global.checkPresence()}\nif ((msg.payload.iftttkey==context.global.IFTTT_TOKEN) || (msg.payload.iftttkey==context.global.FREEBOARD_TOKEN))\n{\n    if (context.global.DEBUG ) node.warn(msg.payload.name+' '+msg.payload.home)\n    if (typeof(context.global.Presence) === 'undefined'){\n    context.global.Presence = {}\n    } else pr_msg.payload.old_presence=context.global.Presence;\n    if (msg.payload.name !=='undefined'){\n        if (!context.global.Presence[msg.payload.name]) context.global.Presence[msg.payload.name]={}\n            context.global.Presence[msg.payload.name].home=msg.payload.home\n        }\n    msg.StatusCode=200;\n    pr_msg.payload.new_value=context.global.checkPresence();\n}\nelse {\n    node.warn(\"presense, bad request\")\n     msg.StatusCode=403;\n     pr_msg.payload.new_value='ERROR';\n}\nreturn [msg,pr_msg];",
    "outputs": "2",
    "noerr": 0,
    "x": 408,
    "y": 675.9998779296875,
    "wires": [
      [
        "1d67a189.19471e",
        "349742ba.107fbe",
        "d4c38ab.17a2078"
      ],
      [
        "6d701ecd.b3b6"
      ]
    ]
  },
  {
    "id": "1d67a189.19471e",
    "type": "http response",
    "z": "17b3daf5.e84c25",
    "name": "",
    "x": 786,
    "y": 662.9998779296875,
    "wires": []
  },
  {
    "id": "6d701ecd.b3b6",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": "var currDate= new Date();\ncurr_presence=context.global.checkPresence()\nif (msg.payload.new_value!=='ERROR' && msg.payload.new_value!==msg.payload.old_value){\n    if('old_presence' in  msg.payload){\n        var HistP={}\n        HistP.timestamp=new Date();\n        HistP.offset=context.global.Weather.Offset\n        HistP.details=msg.payload.old_presence\n//        node.warn(HistP)\n        context.global.PresenceHistory.unshift(HistP)\n    }\n    if (context.global.PresenceHistory.length > 15) context.global.PresenceHistory.pop();\n\n    var currDate= new Date();\n    var currHours=currDate.getHours();\n    var currMins=currDate.getMinutes();\n    currHours=currHours+context.global.Weather.Offset;\n    if ((currHours > context.global.Weather.SunriseHour && currHours < context.global.Weather.SunsetHour) || (currHours==context.global.Weather.SunsetHour && currMins <context.global.Weather.SunsetMin))\n    {\n        var timeFrame=\"DAY\";\n    }\n    else {\n        var timeFrame=\"NIGHT\";\n    }    \n    var scene_name=(msg.payload.new_value ? 'PRESENCE' : 'NO PRESENCE')+(timeFrame=='NIGHT' ? ' '+timeFrame : '');\n    for (var key in context.global.winkState.scenes){\n        if ( context.global.winkState.scenes[key].name.toUpperCase()==scene_name)\n        {\n            var newMsg ={\n            \"url\":\"https://winkapi.quirky.com/scenes/\"+context.global.winkState.scenes[key].object_id+\"/activate\",\n            \"method\": \"POST\",\n            headers: {\n                \"Authorization\":\"Bearer \"+context.global.WinkToken,\n                \"Content-Type\":\"application/json\"\n                }\n            }\n        node.send(newMsg);\n        break;\n        }\n    }\n    if ('VacationMode' in context.global && context.global.VacationMode && msg.payload.new_value){\n            var newMsg1 ={\n                url:context.global.BlueMixUrlBase+'/red/ifttt',\n                \"method\": \"POST\",\n                headers: {\n                    \"Authorization\":\"Bearer \"+context.global.FREEBOARD_TOKEN\n                },\n                payload:{\n                    \"nodeRedVar\":\"VacationMode\",\n                    \"value\":\"off\",\n                    \"iftttkey\":context.global.FREEBOARD_TOKEN\n                    }\n            };\n        node.send(newMsg1)\n    }\n    return;\n}\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 780.8958129882812,
    "y": 743.22216796875,
    "wires": [
      [
        "8863b0d8.1b2bd"
      ]
    ]
  },
  {
    "id": "8863b0d8.1b2bd",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "txt",
    "url": "",
    "x": 939.8958129882812,
    "y": 743.333251953125,
    "wires": [
      []
    ]
  },
  {
    "id": "8143ac4e.a9a65",
    "type": "comment",
    "z": "17b3daf5.e84c25",
    "name": "Integration with Ecobee Node Red ----------------------------------------------------------------------------------------------",
    "info": "",
    "x": 385,
    "y": 828.5,
    "wires": []
  },
  {
    "id": "8ed996b3.632618",
    "type": "http in",
    "z": "17b3daf5.e84c25",
    "name": "",
    "url": "/freeboard/camera",
    "method": "get",
    "swaggerDoc": "",
    "x": 197.49998474121094,
    "y": 572.4999694824219,
    "wires": [
      [
        "e5e4f8f5.bb0c88"
      ]
    ]
  },
  {
    "id": "e5e4f8f5.bb0c88",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": "if (msg.payload.token==context.global.FREEBOARD_TOKEN)\n{\n   if(msg.payload.model.indexOf(\"dropcam\")!=-1){\n   if (typeof msg.payload.cuepoint ==='undefined'){\n   msg.url=\"https://winkapi.quirky.com/cameras/\"+msg.payload.id+\"/image\"\n   msg.method=\"GET\"\n    msg.headers= {\n        \"Authorization\":\"Bearer \"+context.global.WinkToken,\n        \"User-Agent\":\"Manufacturer/Darwin node/0.10.30 Wink/3.6.0\"\n    }\n} else\n{\n    msg.url=\"https://winkapi.quirky.com/cameras/\"+msg.payload.id+\"/cuepoints/\"+msg.payload.cuepoint+\"/image\"\n   msg.method=\"GET\"\n    msg.headers= {\n        \"Authorization\":\"Bearer \"+context.global.WinkToken,\n        \"User-Agent\":\"Manufacturer/Darwin node/0.10.30 Wink/3.6.0\"\n}\n}\nreturn msg;\n}\n}\nif (typeof msg.payload.model!=='undefined' && msg.payload.model=='foscam'){\nfor (var k in context.global.FosCam){\n    if (context.global.FosCam[k].Parameters.id.value==msg.payload.id){\n     msg.method=\"GET\"\n     msg.url=\"http://\"+context.global.FosCam[k].hostname+\"/videostream.cgi?user=\"+context.global.FosCam[k].uid+\"&pwd=\"+context.global.FosCam[k].pwd\n     node.warn(msg.url);\n    return msg;\n    }\n}\n}\nelse {\n    msg.statusCode=\"403\";\n    node.send(msg);\n//    msg.res.send(400,\"Bad Request darling\");\n}\n",
    "outputs": 1,
    "noerr": 0,
    "x": 452.5,
    "y": 571.4999694824219,
    "wires": [
      [
        "37d52525.888faa"
      ]
    ]
  },
  {
    "id": "37d52525.888faa",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "bin",
    "url": "",
    "x": 621.4999847412109,
    "y": 573.4999694824219,
    "wires": [
      [
        "d3676228.8ee2a"
      ]
    ]
  },
  {
    "id": "d3676228.8ee2a",
    "type": "http response",
    "z": "17b3daf5.e84c25",
    "name": "",
    "x": 786.4999847412109,
    "y": 574.4999694824219,
    "wires": []
  },
  {
    "id": "2033c088.10ae7",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": " var PresenceBkup={\n    Presence: context.global.Presence,\n    PresenceDetail: context.global.PresenceDetail,\n    PresenceHistory: context.global.PresenceHistory\n }\n    var DBMsg={\n        url:context.global.VCAP_SERVICES.cloudantNoSQLDB[0].credentials.url+\"/winkapp\",\n        method:\"POST\",\n        headers: \n            {\n                \"Content-Type\":\"application/json\"\n            },\n        payload: {\n            \"_id\":\"winkPresence\",\n            \"item\":\"Presence\",\n            \"Presence\":PresenceBkup\n        }\n    } \n \n \n //if (msg.payload.total_rows > 0  && msg.payload.rows.map(function(e) { return e.id; }).indexOf('winkPresence')!=-1){\n  if ('_rev' in msg.payload){   \n if (context.global.DEBUG) node.warn('record exists... updating');\n DBMsg.method=\"PUT\";\n DBMsg.url=DBMsg.url+\"/winkPresence\"\n DBMsg.payload._rev=msg.payload._rev;\n //msg.payload.rows.map(function(e) {if(e.id==\"winkPresence\") return e.value._rev; })[0];\n }\nreturn DBMsg;",
    "outputs": 1,
    "noerr": 0,
    "x": 1059.6041870117188,
    "y": 705.611083984375,
    "wires": [
      [
        "5b1fa9c.d25a758"
      ]
    ]
  },
  {
    "id": "349742ba.107fbe",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": "if (context.global.CloudantBkUP) {\n    var msg={\n        url:context.global.VCAP_SERVICES.cloudantNoSQLDB[0].credentials.url+\"/winkapp/winkPresence\",\n        method:\"GET\"\n    }\n    node.send(msg); \n}\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 778.6041870117188,
    "y": 704.611083984375,
    "wires": [
      [
        "5ce63dfa.cb88b4"
      ]
    ]
  },
  {
    "id": "5ce63dfa.cb88b4",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 921.6041870117188,
    "y": 704.611083984375,
    "wires": [
      [
        "2033c088.10ae7"
      ]
    ]
  },
  {
    "id": "5b1fa9c.d25a758",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 1198.6041870117188,
    "y": 704.611083984375,
    "wires": [
      []
    ]
  },
  {
    "id": "a637b06d.7ba71",
    "type": "inject",
    "z": "17b3daf5.e84c25",
    "name": "",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "repeat": "82800",
    "crontab": "",
    "once": true,
    "x": 98.50003051757812,
    "y": 1113.8333129882812,
    "wires": [
      [
        "a0eb429.48d09c"
      ]
    ]
  },
  {
    "id": "a0eb429.48d09c",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "Try to create DB",
    "func": "if (typeof context.global.VCAP_SERVICES!=='undefined' && 'cloudantNoSQLDB' in context.global.VCAP_SERVICES){\n    var DBmsg={\n        url: context.global.VCAP_SERVICES.cloudantNoSQLDB[0].credentials.url+\"/winkapp\",\n        method:\"PUT\"\n    }\n    node.send(DBmsg);\n} else{\nnode.warn('Cloudant credentials are not present. DB backup will be disabled');\ncontext.global.CloudantBkUP=false;\n}\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 308.5000305175781,
    "y": 1114.8332824707031,
    "wires": [
      [
        "2d9690ca.53196"
      ]
    ]
  },
  {
    "id": "2d9690ca.53196",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "db req",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 471.5000305175781,
    "y": 1114.8332824707031,
    "wires": [
      [
        "4c13ecd7.2de024"
      ]
    ]
  },
  {
    "id": "4c13ecd7.2de024",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "Check response",
    "func": "if (msg.statusCode=='201' || msg.statusCode=='412')\n{\n    node.warn('Database created or already exists, turning on backup');\n    context.global.CloudantBkUP=true;\n    context.global.CloudantCamera=[];\n    msg.url=context.global.VCAP_SERVICES.cloudantNoSQLDB[0].credentials.url+\"/winkapp/winkPresence\"\n    msg.method=\"GET\"\n    node.send(msg)\n} else {\n    node.warn('issue with cloudant sercvice. backup disabled until next re-try');\n    context.global.CloudantBkUP=false;\n}\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 646.5000305175781,
    "y": 1114.8332824707031,
    "wires": [
      [
        "a56c26ed.4c48f8"
      ]
    ]
  },
  {
    "id": "a56c26ed.4c48f8",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 831.3958282470703,
    "y": 1115.72216796875,
    "wires": [
      [
        "eb0885ac.773768"
      ]
    ]
  },
  {
    "id": "eb0885ac.773768",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "restore from db",
    "func": "if (\"Presence\" in msg.payload){\n    node.warn('restoring presence from db backup')\n    context.global.Presence=msg.payload.Presence.Presence\n    context.global.PresenceHistory=msg.payload.Presence.PresenceHistory\n    for(var pr in context.global.Presence){\n        p=context.global.Presence[pr];\n        var PresenceSensorMsg={\n            url:context.global.BlueMixUrlBase+'/red/wink/subscribtions',\n            method:\"POST\",\n                headers: {\n                \"Content-Type\":\"application/json\"\n            },\n            payload:{\n              capabilities: { fields: [ { field: 'presence', type: 'boolean' } ] },\n              device_manufacturer: 'node_red_virtual_sensor',\n              hidden_at: null,\n              last_event: \n               { brightness_occurred_at: null,\n                 loudness_occurred_at: null,\n                 vibration_occurred_at: null },\n              last_reading: \n               { \n                   agent_session_id: 'FALSE',\n                   connection: true,\n                   presence:(p.home=='yes' ? true : false),\n               },\n              manufacturer_device_model: 'foscam_virtual_motion_sensor',\n              model_name: 'Presense Sensor',\n              \"eco_system\" : \"NODERED\",\n              name: pr,\n              object_id: 'Presense_'+pr,\n              object_type: 'sensor_pod',\n              radio_type: 'wifi',\n              sensor_pod_id: 'Presense_'+pr,\n              triggers: [],\n              units: {},\n              upc_code: 'presence_sensor',\n              upc_id: 'Presense_'+pr\n          }\n        }\n    node.send(PresenceSensorMsg);\n    }\n}\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 999.3958129882812,
    "y": 1113.72216796875,
    "wires": [
      [
        "accec1a7.bd715"
      ]
    ]
  },
  {
    "id": "bd1c40e5.7b38e",
    "type": "comment",
    "z": "17b3daf5.e84c25",
    "name": "Cloundant DB -------------------------------------------------------------------------------------------------------------------------------",
    "info": "modfy bluemix-settings.json and add following line:\n\ncontext.global.InitialStateKey=\"<your initial state api key>\"",
    "x": 404.5,
    "y": 908.8333129882812,
    "wires": []
  },
  {
    "id": "fb033215.c7139",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "Save Snapshots to db",
    "func": "if ((msg.req.body.uid==context.global.WinkUser.uid && msg.req.body.pwd==context.global.WinkUser.pwd)||context.global.getCookie('exchange_token',msg.req.headers.cookie)==context.global.FREEBOARD_TOKEN || msg.payload.token==context.global.FREEBOARD_TOKEN || (msg.req.headers.authorization && msg.req.headers.authorization==\"Bearer \"+context.global.FREEBOARD_TOKEN)){\nvar msg1=msg;\nvar trigger=msg.payload.object_name;\nvar cam_list=msg.payload.cam_list.split(',');\nmsg1.res.statusCode=\"200\";\nnode.send([msg1,null]);\nvar date=new Date();\nvar delay=0;\nfor (var i=0;i<cam_list.length;i++){\n//for (var cam in context.global.winkState.cameras){\n var camera=context.global.winkState.cameras[cam_list[i]];\n var cam=cam_list[i];\nif ('snap_url' in camera && camera.snap_url!=='undefined'){\n    //var msg={}\n    msg.url=camera.snap_url;\n    msg.method=\"GET\";\n    msg.date=date;\n    msg.topic=cam;\n    msg.trigger=trigger;\n    context.global.sendWithTimeout(node,[null,msg],delay);\n    delay+=500;\n}\n\n}\n\n} else {\n    msg.statusCode=\"401\";\n    node.send(msg);\n//    msg.res.send(401,\"Bad request\");\n}\nreturn;",
    "outputs": "2",
    "noerr": 0,
    "x": 404.10418701171875,
    "y": 1214.833251953125,
    "wires": [
      [
        "622e7eca.c3d7f"
      ],
      [
        "c7c0c1c5.ace2a"
      ]
    ]
  },
  {
    "id": "c7c0c1c5.ace2a",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "getPic",
    "method": "use",
    "ret": "bin",
    "url": "",
    "x": 607.1041870117188,
    "y": 1220.8332824707031,
    "wires": [
      [
        "9bc7dc88.3481c"
      ]
    ]
  },
  {
    "id": "9bc7dc88.3481c",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "save picture",
    "func": "//if (typeof (context.global.ImageArchive)=== 'undefined') {\n//    context.global.ImageArchive = {}\n//}\n//     for (var n in context.global.winkState.cameras){\n//        if (!(n in context.global.ImageArchive)) context.global.ImageArchive[n]=[]\n//    }\n\n//node.warn('Saving image from '+msg.topic)\n//node.warn(bitmap);\nvar DBmsg={\n         url:context.global.VCAP_SERVICES.cloudantNoSQLDB[0].credentials.url+\"/winkapp\",\n        topic:msg.trigger,\n        method:\"POST\",\n        headers: \n            {\n                \"Content-Type\":\"application/json\"\n            },\n        payload: {\n            \"_id\":msg.topic+'|'+msg.date.getTime()+'|'+msg.trigger,\n            \"key\":\"Snapshot\",\n            \"cameraName\":msg.topic,\n            \"timestamp\":msg.date.getTime(),\n            \"trigger\":msg.trigger,\n            \"fileName\":\"CameraImage.jpg\",\n           \"_attachments\":\n                {\n                    \"CameraImage.jpg\":\n                    {\n                        \"content_type\":\"image/jpeg\",\n                        \"data\":msg.payload.toString('base64')\n                    }\n                }        \n        } \n}\n\n//context.global.ImageArchive[msg.topic].splice(0,0,camObj);\n//if (context.global.ImageArchive[msg.topic].length>10) context.global.ImageArchive[msg.topic].pop()\nreturn DBmsg;",
    "outputs": "1",
    "noerr": 0,
    "x": 798.1041259765625,
    "y": 1220.8332824707031,
    "wires": [
      [
        "dcdcdd1f.68b0f"
      ]
    ]
  },
  {
    "id": "dcdcdd1f.68b0f",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 960,
    "y": 1221.72216796875,
    "wires": [
      [
        "c10efb9b.5fecb8"
      ]
    ]
  },
  {
    "id": "acfc8ff9.f002b",
    "type": "http in",
    "z": "17b3daf5.e84c25",
    "name": "",
    "url": "/red/save_images",
    "method": "get",
    "swaggerDoc": "",
    "x": 131.6042022705078,
    "y": 1214.72216796875,
    "wires": [
      [
        "fb033215.c7139"
      ]
    ]
  },
  {
    "id": "622e7eca.c3d7f",
    "type": "http response",
    "z": "17b3daf5.e84c25",
    "name": "",
    "x": 610.9999694824219,
    "y": 1177.72216796875,
    "wires": []
  },
  {
    "id": "c10efb9b.5fecb8",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "cache results",
    "func": "if ('ok' in msg.payload && msg.payload.ok){\n    var cameraname=msg.payload.id.split('|')[0];\n    var tstamp=msg.payload.id.split('|')[1];\n    //node.warn('Camera - ' + cameraname)\n    if (typeof(context.global.winkState.cameras[cameraname].activities)==='undefined') context.global.winkState.cameras[cameraname].activities=[]\n    var cam_act={\n        id:msg.payload.rev,\n        cloudant_id:msg.payload.id,\n        category:\"cuepoint\",\n        cuepoint_id:Math.round(tstamp/1000),\n        trigger:msg.topic,\n        snapshot_url:context.global.BlueMixUrlBase+\"/red/camera_history?img_id=\"+msg.payload.id\n    }\n   context.global.winkState.cameras[cameraname].activities.splice(0,0,cam_act);\n   if (context.global.winkState.cameras[cameraname].activities.length>15){\n    for (var i=15; i<context.global.winkState.cameras[cameraname].activities.length;i++){\n    var doc_id=context.global.winkState.cameras[cameraname].activities[i].cloudant_id\n    var rev=context.global.winkState.cameras[cameraname].activities[i].id\n    if(typeof(doc_id)!=='undefined'){\n    var DBmsg={\n         topic:cameraname,\n         position:i,\n         url:context.global.VCAP_SERVICES.cloudantNoSQLDB[0].credentials.url+\"/winkapp/\"+doc_id+\"?rev=\"+rev,\n        method:\"DELETE\"\n    }\n    node.send(DBmsg);\n    }\n   }\n   }\n}\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 1140,
    "y": 1217.72216796875,
    "wires": [
      [
        "7f73c2ca.7c820c"
      ]
    ]
  },
  {
    "id": "7f73c2ca.7c820c",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 1242.0001220703125,
    "y": 1101.72216796875,
    "wires": [
      [
        "ea5fb666.468928"
      ]
    ]
  },
  {
    "id": "ea5fb666.468928",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "delete old pics",
    "func": "if (('ok' in msg.payload && msg.payload.ok) ||('error' in msg.payload && msg.payload.error=='not_found') ){\n    //node.warn('deleting '+msg.topic+' position '+ msg.position)\n    context.global.winkState.cameras[msg.topic].activities.splice(msg.position,1)\n}\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 1407.0001220703125,
    "y": 1100.72216796875,
    "wires": [
      []
    ]
  },
  {
    "id": "1aabe77.e975319",
    "type": "http in",
    "z": "17b3daf5.e84c25",
    "name": "",
    "url": "/red/camera_history",
    "method": "get",
    "swaggerDoc": "",
    "x": 170.00003051757812,
    "y": 1272.72216796875,
    "wires": [
      [
        "c2bf4ef9.3ed2a"
      ]
    ]
  },
  {
    "id": "c2bf4ef9.3ed2a",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "gen CLD url",
    "func": "if ('img_id' in msg.payload){\n    msg.url=context.global.VCAP_SERVICES.cloudantNoSQLDB[0].credentials.url+\"/winkapp/\"+msg.payload.img_id+\"/CameraImage.jpg\"\n    msg.method=\"GET\"\n}\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 382,
    "y": 1272.72216796875,
    "wires": [
      [
        "f9833f1c.f0822"
      ]
    ]
  },
  {
    "id": "f9833f1c.f0822",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "bin",
    "url": "",
    "x": 543,
    "y": 1274.72216796875,
    "wires": [
      [
        "aa662a9c.e5b6d8"
      ]
    ]
  },
  {
    "id": "aa662a9c.e5b6d8",
    "type": "http response",
    "z": "17b3daf5.e84c25",
    "name": "",
    "x": 711,
    "y": 1274.72216796875,
    "wires": []
  },
  {
    "id": "39aa6250.ecf6be",
    "type": "http in",
    "z": "17b3daf5.e84c25",
    "name": "",
    "url": "/red/retrieve_activities",
    "method": "get",
    "swaggerDoc": "",
    "x": 159.6042022705078,
    "y": 1365.72216796875,
    "wires": [
      [
        "b70b8bfb.21c7e8"
      ]
    ]
  },
  {
    "id": "b70b8bfb.21c7e8",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "get activities from db",
    "func": "if(msg.req.headers.authorization && msg.req.headers.authorization==\"Bearer \"+context.global.FREEBOARD_TOKEN){\nvar msg1=msg;\nmsg1.statusCode=\"200\";\nmsg.url=context.global.VCAP_SERVICES.cloudantNoSQLDB[0].credentials.url+\"/winkapp/_all_docs?descending=true\"\nmsg.method=\"GET\"\nmsg.topic=msg.payload.camera_name\nnode.send([msg1,msg])\n} else\n{\n    msg.statusCode=400\n    node.send([msg,null])\n}\nreturn;",
    "outputs": "2",
    "noerr": 0,
    "x": 399.99993896484375,
    "y": 1365.72216796875,
    "wires": [
      [
        "88781b62.71c438"
      ],
      [
        "c532e578.f67868"
      ]
    ]
  },
  {
    "id": "c532e578.f67868",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 625,
    "y": 1398.72216796875,
    "wires": [
      [
        "1154258f.9bea4a"
      ]
    ]
  },
  {
    "id": "1154258f.9bea4a",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "cache cam history",
    "func": "if('total_rows' in msg.payload && msg.payload.total_rows>0){\n var db_rows=msg.payload.rows;\n context.global.winkState.cameras[msg.topic].activities=[]\n //db_rows.foreach(function(row){\n for(var i=0;i<db_rows.length;i++){\n     var row=db_rows[i];\n     if(row.id.indexOf(msg.topic)!=-1){\n      var tstamp=row.id.split('|')[1]\n      var cam_act={\n        id:row.value.rev,\n        cloudant_id:row.id,\n        category:\"cuepoint\",\n        cuepoint_id:Math.round(tstamp/1000),\n        trigger:row.id.split('|')[2],\n        snapshot_url:context.global.BlueMixUrlBase+\"/red/camera_history?img_id=\"+row.id\n      } \n      context.global.winkState.cameras[msg.topic].activities.push(cam_act)         \n     }\n }\n}\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 803.0000152587891,
    "y": 1398.7221374511719,
    "wires": [
      []
    ]
  },
  {
    "id": "88781b62.71c438",
    "type": "http response",
    "z": "17b3daf5.e84c25",
    "name": "",
    "x": 621.9999694824219,
    "y": 1350.72216796875,
    "wires": []
  },
  {
    "id": "a1adf53d.131008",
    "type": "inject",
    "z": "17b3daf5.e84c25",
    "name": "",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "repeat": "",
    "crontab": "",
    "once": false,
    "x": 132,
    "y": 867.7499389648438,
    "wires": [
      [
        "6fcc4b13.f6eea4"
      ]
    ]
  },
  {
    "id": "6bb5c809.5f72f8",
    "type": "debug",
    "z": "17b3daf5.e84c25",
    "name": "",
    "active": false,
    "console": "false",
    "complete": "false",
    "x": 427.25,
    "y": 868.5,
    "wires": []
  },
  {
    "id": "6827fcba.55b5c4",
    "type": "comment",
    "z": "17b3daf5.e84c25",
    "name": "Integration with LIFX Bulbs ---------------------------------------------------------------------------------------",
    "info": "",
    "x": 361,
    "y": 1509.5,
    "wires": []
  },
  {
    "id": "fed0869d.53f2b8",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "Throw Config Data",
    "func": "if(msg.req.headers.authorization && msg.req.headers.authorization==\"Bearer \"+context.global.FREEBOARD_TOKEN){\n// text fields array\n/*\ntxt_fields=[]\ntxt_fields.push({forecastIoApiKey : context.global.forecastIoApiKey || \"\" });\ntxt_fields.push({FREEBOARD_TOKEN : context.global.FREEBOARD_TOKEN || \"\" });\ntxt_fields.push({IFTTT_TOKEN : context.global.IFTTT_TOKEN || \"\" });\ntxt_fields.push({LIFX_TOKEN : context.global.LIFX_TOKEN || \"\" });\ntxt_fields.push({motionAdjustTstat : context.global.motionAdjustTstat || false });\ntxt_fields.push({InitialStateKey : context.global.InitialStateKey ||\"\"});\nmsg.payload.txt_fields=txt_fields;\ntxt_area_fields=[]\n\ntxt_area_fields.push({FosCam : JSON.stringify(context.global.foscam || \"\")});\ntxt_area_fields.push({SamsungCam : JSON.stringify(context.global.SamsungCam || \"\")});\ntxt_area_fields.push({DlinkCam : JSON.stringify(context.global.DlinkCam || \"\")});\ntxt_area_fields.push({camera_motion : JSON.stringify(context.global.camera_motion || \"\")});\ntxt_area_fields.push({tab_ui_shortcuts : JSON.stringify(context.global.tab_ui_shortcuts || \"\")});\nmsg.payload.txt_area_fields=txt_area_fields\n*/\nmsg.payload=context.global\nmsg.statusCode=\"200\";\nreturn msg;\n}\nelse\n{\n    //msg.payload=\"Not Authorized\";\n   msg.statusCode=\"403\";\n   return msg;\n//   msg.res.send(\"403\",\"Forbidden\");\n//  return;\n}\n",
    "outputs": 1,
    "noerr": 0,
    "x": 406.4999694824219,
    "y": 62.5,
    "wires": [
      [
        "40810221.73d1ac"
      ]
    ]
  },
  {
    "id": "40810221.73d1ac",
    "type": "http response",
    "z": "17b3daf5.e84c25",
    "name": "",
    "x": 631.5,
    "y": 63.5,
    "wires": []
  },
  {
    "id": "ee7756d6.d87c68",
    "type": "comment",
    "z": "17b3daf5.e84c25",
    "name": "Section for web services---------------------------------------------------------------------------------------------------------------------------------",
    "info": "",
    "x": 467,
    "y": 20,
    "wires": []
  },
  {
    "id": "c2b4cdcd.6e06a",
    "type": "http in",
    "z": "17b3daf5.e84c25",
    "name": "",
    "url": "/red/getCameras",
    "method": "get",
    "swaggerDoc": "",
    "x": 130,
    "y": 112.5,
    "wires": [
      [
        "68d9b755.9c5aa8"
      ]
    ]
  },
  {
    "id": "68d9b755.9c5aa8",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "Throw Cameras Data",
    "func": "if(msg.req.headers.authorization && msg.req.headers.authorization==\"Bearer \"+context.global.FREEBOARD_TOKEN){\n// text fields array\ncameras=[]\nfor (var cam in context.global.winkState.cameras){\n    var camera=context.global.winkState.cameras[cam];\n    cameras.push({\n        name:camera.name,\n        id:camera.object_id,\n        connection:camera.connection,\n        url:camera.snap_url\n    });\n}\nmsg.payload.cameras=cameras;\nmsg.statusCode=\"200\";\nreturn msg;\n}\nelse\n{\n    //msg.payload=\"Not Authorized\";\n    msg.statusCode=\"403\";\n    return msg;\n//   msg.res.send(\"403\",\"Forbidden\");\n//  return;\n}\n",
    "outputs": 1,
    "noerr": 0,
    "x": 407.4999694824219,
    "y": 115.5,
    "wires": [
      [
        "c9a17e43.d89fc"
      ]
    ]
  },
  {
    "id": "c9a17e43.d89fc",
    "type": "http response",
    "z": "17b3daf5.e84c25",
    "name": "",
    "x": 632.5,
    "y": 116.5,
    "wires": []
  },
  {
    "id": "1207aa26.ca1bb6",
    "type": "catch",
    "z": "17b3daf5.e84c25",
    "name": "",
    "x": 128.5,
    "y": 2088,
    "wires": [
      [
        "ed505f7c.1e238"
      ]
    ]
  },
  {
    "id": "ed505f7c.1e238",
    "type": "debug",
    "z": "17b3daf5.e84c25",
    "name": "",
    "active": true,
    "console": "false",
    "complete": "error",
    "x": 328.5,
    "y": 2088,
    "wires": []
  },
  {
    "id": "c0e69cde.3b827",
    "type": "inject",
    "z": "17b3daf5.e84c25",
    "name": "",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "repeat": "5",
    "crontab": "",
    "once": true,
    "x": 129.5,
    "y": 1552,
    "wires": [
      [
        "92e5c52f.d11b38"
      ]
    ]
  },
  {
    "id": "92e5c52f.d11b38",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": "if ('LIFX_TOKEN' in context.global && context.global.LIFX_TOKEN !== 'undefined'){\nvar newMsg1 ={\n    \"url\":\"https://api.lifx.com/v1/lights/all\",\n    \"method\": \"GET\",\n    headers: {\n        \"Authorization\":\"Bearer \"+context.global.LIFX_TOKEN\n    }\n}\nnode.send(newMsg1);\n}\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 297.5,
    "y": 1552,
    "wires": [
      [
        "413a74a2.89046c"
      ]
    ]
  },
  {
    "id": "413a74a2.89046c",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "txt",
    "url": "",
    "x": 472.5,
    "y": 1551,
    "wires": [
      [
        "d896fc61.7dfec"
      ]
    ]
  },
  {
    "id": "98e50652.baa948",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": "var lifxLights=msg.payload;\nvar useLiveUpd=('CRYPTO' in context.global ? true:false);\nvar CurreTag=\"\";\nvar eTag;\nif (Object.prototype.toString.call(lifxLights)==='[object Array]'){\n    lifxLights.forEach(function (bulb) {\n      //  node.warn(bulb.label)\n     //if (!(' winkState' in context.global)) context.global.winkState={}\n//     if (!('light_bulbs' in context.global.winkState)) context.global.winkState.light_bulbs={}\n     if (bulb.label in context.global.winkState.light_bulbs && useLiveUpd) {\n          var WinkBulb={\n            \"connection\": context.global.winkState.light_bulbs[bulb.label].connection,\n            \"powered\": context.global.winkState.light_bulbs[bulb.label].powered,\n            \"brightness\": context.global.winkState.light_bulbs[bulb.label].brightness,\n            \"hue\" : context.global.winkState.light_bulbs[bulb.label].hue,\n            \"saturation\":context.global.winkState.light_bulbs[bulb.label].saturation,\n            \"temperature\":context.global.winkState.light_bulbs[bulb.label].temperature\n          }\n          CurreTag=context.global.CRYPTO.createHash(\"md5\").update(JSON.stringify(WinkBulb),\"utf8\").digest(\"hex\");\n     }\n     \n     var OrigObject={\n        \"connection\": bulb.connected,\n        \"powered\": (bulb.connected && bulb.power==\"on\" ? true : false),\n        \"brightness\": bulb.brightness,\n        \"hue\" : bulb.color.hue,\n        \"saturation\":bulb.color.saturation,\n        \"temperature\":bulb.color.kelvin\n     };\n     if (useLiveUpd){\n     var LifBulb={\n        \"name\": bulb.label,\n        \"eco_system\": \"LIFX\",\n        \"manufacturer_id\": \"lifx\",\n        \"device_manufacturer\":\"lifx\",\n        \"object_type\": \"light_bulb\",\n        \"object_id\": bulb.id,\n        \"freeboard\": 0,\n        desired_state:{},\n        last_reading:{\n        \"connection\": bulb.connected,\n        \"powered\": (bulb.connected && bulb.power==\"on\" ? true : false),\n        \"brightness\": bulb.brightness,\n        \"hue\" : bulb.color.hue,\n        \"saturation\":bulb.color.saturation,\n        \"temperature\":bulb.color.kelvin\n        }\n     };\n      eTag=context.global.CRYPTO.createHash(\"md5\").update(JSON.stringify(OrigObject),\"utf8\").digest(\"hex\");\n     } else {\n    \n      context.global.winkState.light_bulbs[bulb.label]=OrigObject;\n     }\n     //LifBulb\n     \n     context.global.winkDevCap[bulb.label]=bulb.capabilities\n     //node.warn(bulb.label)\n      if (!('groups' in context.global.winkState)) context.global.winkState.groups={}\n     if (!(bulb.group.name in context.global.winkState.groups)){\n     context.global.winkState.groups[bulb.group.name]={\n         \"name\":bulb.group.name,\n         \"obejct_type\":\"groups\",\n         \"object_id\":bulb.group.id,\n          \"freeboard\": 0,\n          members:{}\n        }\n    }\n      context.global.winkState.groups[bulb.group.name].members[bulb.label]={\n        \"name\": bulb.label,\n        \"object_id\": bulb.id,\n        \"object_type\": \"light_bulbs\"\n      }\n     if (useLiveUpd && CurreTag!==eTag){\n        var postMsg={\n            url:context.global.BlueMixUrlBase+'/red/wink/subscribtions',\n            method:\"POST\",\n                headers: {\n                \"Content-Type\":\"application/json\"\n            },\n            payload:LifBulb \n        }\n     node.send(postMsg);\n     }\n    });\n}\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 918.2143020629883,
    "y": 1550.1428833007812,
    "wires": [
      [
        "2c53f974.6a2766"
      ]
    ]
  },
  {
    "id": "2c53f974.6a2766",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "txt",
    "url": "",
    "x": 1077.9286346435547,
    "y": 1549.5714020729065,
    "wires": [
      []
    ]
  },
  {
    "id": "bbe21926.db25b8",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": "function send_ui_note(n_type,n_timeout,n_message){\n    var newMsg={\n        url:context.global.BlueMixUrlBase+'/red/notifications',\n        \"method\": \"POST\",\n        headers: {\n            \"Authorization\":\"Bearer \"+context.global.FREEBOARD_TOKEN\n        },\n        payload:{\n            \"type\":n_type,\n            \"message\":n_message,\n            \"timeout\":n_timeout\n            }\n        };\n        node.send(newMsg);\n}\nvar note_msg=msg.payload.name+(msg.payload.home=='yes' ? ' is home' : ' has left');\nsend_ui_note('information',30000,note_msg)\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 341.5,
    "y": 760,
    "wires": [
      [
        "caa66854.750078"
      ]
    ]
  },
  {
    "id": "caa66854.750078",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "txt",
    "url": "",
    "x": 481.5,
    "y": 759,
    "wires": [
      []
    ]
  },
  {
    "id": "fe8fd050.630c",
    "type": "inject",
    "z": "17b3daf5.e84c25",
    "name": "",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "repeat": "82800",
    "crontab": "",
    "once": true,
    "x": 107.5,
    "y": 962,
    "wires": [
      [
        "10ee56d1.137699"
      ]
    ]
  },
  {
    "id": "10ee56d1.137699",
    "type": "delay",
    "z": "17b3daf5.e84c25",
    "name": "",
    "pauseType": "delay",
    "timeout": "1",
    "timeoutUnits": "seconds",
    "rate": "1",
    "rateUnits": "second",
    "randomFirst": "1",
    "randomLast": "5",
    "randomUnits": "seconds",
    "drop": false,
    "x": 267.5,
    "y": 963,
    "wires": [
      [
        "cec1220b.ba4f7"
      ]
    ]
  },
  {
    "id": "cec1220b.ba4f7",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "try to refresh app_config data",
    "func": "if (context.global.CloudantBkUP) {\n    msg.url=context.global.VCAP_SERVICES.cloudantNoSQLDB[0].credentials.url+\"/winkapp/app_data\";\n    msg.method=\"GET\";\n    node.send(msg); \n}\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 536.5,
    "y": 959,
    "wires": [
      [
        "441073f3.3c9dcc",
        "349742ba.107fbe"
      ]
    ]
  },
  {
    "id": "441073f3.3c9dcc",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 771.5,
    "y": 959,
    "wires": [
      [
        "73acee37.55415"
      ]
    ]
  },
  {
    "id": "73acee37.55415",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "create or update config ",
    "func": "if ((\"error\" in msg.payload && msg.payload.error=='not_found') || msg.db_mode=='update'){\n    if (context.global.DEBUG ) node.warn((\"error\" in msg.payload && msg.payload.error=='not_found' ? 'Save Data: no app_data exists in cloudant DB creating and saving globals to database' : ' Save Data: updating globals in database'))\n    var DBMsg={\n        url:context.global.VCAP_SERVICES.cloudantNoSQLDB[0].credentials.url+\"/winkapp\",\n        method:(msg.db_mode=='update' ? \"PUT\":\"POST\"),\n        headers: \n            {\n                \"Content-Type\":\"application/json\"\n            },\n        payload: {\n            \"_id\":\"app_data\",\n            \"item\":\"app_data\",\n            \"app_cfg\":{\n            FREEBOARD_TOKEN:context.global.FREEBOARD_TOKEN || context.global.generate_token('FREEBOARD_TOKEN'),\n            vaca_delay:context.global.vaca_delay || 15, \n            ifttt:context.global.ifttt || false,\n            useRobots:context.global.useRobots || false,\n            vaca_wnr_schedules_off: context.global.vaca_wnr_schedules_off|| false,\n            vaca_usePresence: context.global.vaca_usePresence || false,\n            vaca_light_bulbs : context.global.vaca_light_bulbs || [],\n            vaca_binary_switches : context.global.vaca_binary_switches || [],\n            vaca_locks_vac:context.global.vaca_locks_vac || false,\n            motionAdjustTstat: context.global.motionAdjustTstat||false,\n            BlueMixUrlBase:context.global.BlueMixUrlBase,\n            HomeLocation:context.global.HomeLocation,\n            HoursFormat24:context.global.HoursFormat24 || false,\n            LightsNotification:context.global.LightsNotification || false,\n            LightsNotificationM:context.global.LightsNotificationM || false,\n            SensorsNotificationM:context.global.SensorsNotificationM || false,    \n            Schedules:context.global.Schedules || false,\n            VacationMode:context.global.VacationMode || false,            \n            CustomTabUrl:context.global.CustomTabUrl || '',\n            CustomTabName:context.global.CustomTabName|| '',\n            BlueIrisHost:context.global.BlueIrisHost,\n            BlueIrisUid:context.global.BlueIrisUid,\n            BlueIrisPwd:context.global.BlueIrisPwd,\n            wink_id:context.global.wink_id,\n            wink_secret:context.global.wink_secret,\n            BloomskyKey:context.global.BloomskyKey || '',\n            OwnTracksPwd:context.global.OwnTracksPwd,\n            OwnTracksGeoRadius:context.global.OwnTracksGeoRadius||50,\n            OwnTracksGeoMaxAccuracy:context.global.OwnTracksGeoMaxAccuracy || 200\n            }\n        }\n    }\n    if(msg.db_mode=='update' && !(\"error\" in msg.payload && msg.payload.error=='not_found')){\n    DBMsg.url=DBMsg.url+\"/app_data\"    \n    DBMsg.payload._rev=msg.payload._rev;\n    }\n    \n    if ('HomeLocation' in context.global) DBMsg.payload.app_cfg.HomeLocation=context.global.HomeLocation;\n//\tif ('FosCam' in context.global) DBMsg.payload.app_cfg.FosCam=context.global.FosCam;\n//\tif ('SamsungCam' in context.global) DBMsg.payload.app_cfg.SamsungCam=context.global.SamsungCam;\n//\tif ('DlinkCam' in context.global) DBMsg.payload.app_cfg.DlinkCam=context.global.DlinkCam;\n    if ('camera_motion' in context.global) DBMsg.payload.app_cfg.camera_motion=context.global.camera_motion;\n    if ('tab_ui_shortcuts' in context.global) DBMsg.payload.app_cfg.tab_ui_shortcuts=context.global.tab_ui_shortcuts;\n//    if ('netatmo' in context.global) DBMsg.payload.app_cfg.netatmo=context.global.netatmo;\n    if ('winkState' in context.global) DBMsg.payload.app_cfg.winkState=context.global.winkState;\n    if ('LIFX_TOKEN' in context.global) DBMsg.payload.app_cfg.LIFX_TOKEN=context.global.LIFX_TOKEN;\n    if ('IFTTT_TOKEN' in context.global)DBMsg.payload.app_cfg.IFTTT_TOKEN=context.global.IFTTT_TOKEN;\n    if ('forecastIoApiKey' in context.global)DBMsg.payload.app_cfg.forecastIoApiKey=context.global.forecastIoApiKey;\n    if ('InitialStateKey' in context.global)DBMsg.payload.app_cfg.InitialStateKey=context.global.InitialStateKey;\n    if ('PushBulletKey' in context.global)DBMsg.payload.app_cfg.PushBulletKey=context.global.PushBulletKey;    \nnode.send(DBMsg);    \n}\nelse {\n        if (context.global.DEBUG ) node.warn('config data exists, restoring');\n    for (var key in msg.payload.app_cfg){\n            if (context.global.DEBUG ) node.warn('Restoring '+key+' settings')\n        if (key!=='winkState' && key!=='DlinkCam' && key!=='FosCam' && key!=='SamsungCam'){\n            context.global[key]=msg.payload.app_cfg[key];\n        } else if(msg.restore_wink||0===1) {\n            context.global[key]=msg.payload.app_cfg[key];\n        }\n    }\n}    \nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 986.5,
    "y": 958,
    "wires": [
      [
        "3c4c4c02.e33c24"
      ]
    ]
  },
  {
    "id": "3c4c4c02.e33c24",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 1236.5,
    "y": 957,
    "wires": [
      [
        "2c968b99.4d2c64"
      ]
    ]
  },
  {
    "id": "e1844dbe.96aca",
    "type": "http in",
    "z": "17b3daf5.e84c25",
    "name": "",
    "url": "/red/update_app_cfg",
    "method": "post",
    "swaggerDoc": "",
    "x": 125,
    "y": 1043,
    "wires": [
      [
        "aa194ed6.9b85f"
      ]
    ]
  },
  {
    "id": "aa194ed6.9b85f",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": "if(msg.req.headers.authorization && msg.req.headers.authorization==\"Bearer \"+context.global.FREEBOARD_TOKEN){\nmsg.statusCode=\"200\";\nvar msg1={}\nmsg1.db_mode=msg.payload.db_mode||\"read\";\nnode.send([msg1,msg])\n} else\n{\n    msg.statusCode=\"400\";\n    node.send([null,msg])\n}\nreturn;",
    "outputs": "2",
    "noerr": 0,
    "x": 315.5,
    "y": 1047,
    "wires": [
      [
        "cec1220b.ba4f7"
      ],
      [
        "66617eba.1ebf5"
      ]
    ]
  },
  {
    "id": "66617eba.1ebf5",
    "type": "http response",
    "z": "17b3daf5.e84c25",
    "name": "",
    "x": 460.5,
    "y": 1054,
    "wires": []
  },
  {
    "id": "2c968b99.4d2c64",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": "var msg1={\n    payload:{\n        config:{\n        HoursFormat24:context.global.HoursFormat24\n        }\n    }\n}\nmsg1.method=\"POST\";\nmsg1.url=context.global.BlueMixUrlBase+'/red/wscomms';\nmsg1.headers= {\n    \"Authorization\":\"Bearer \"+context.global.FREEBOARD_TOKEN\n};\n\nreturn msg1;",
    "outputs": 1,
    "noerr": 0,
    "x": 1078.5,
    "y": 1046,
    "wires": [
      [
        "1858d39d.603e1c"
      ]
    ]
  },
  {
    "id": "66b6bb4f.c89db4",
    "type": "json",
    "z": "17b3daf5.e84c25",
    "name": "",
    "x": 430,
    "y": 210,
    "wires": [
      [
        "a830643a.3af6b8"
      ]
    ]
  },
  {
    "id": "deb24fe3.2d914",
    "type": "switch",
    "z": "17b3daf5.e84c25",
    "name": "",
    "property": "req.headers.content-type",
    "propertyType": "msg",
    "rules": [
      {
        "t": "eq",
        "v": "text/plain",
        "vt": "str"
      },
      {
        "t": "else"
      }
    ],
    "checkall": "true",
    "outputs": 2,
    "x": 285,
    "y": 236,
    "wires": [
      [
        "66b6bb4f.c89db4"
      ],
      [
        "a830643a.3af6b8"
      ]
    ]
  },
  {
    "id": "1858d39d.603e1c",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "txt",
    "url": "",
    "x": 1266,
    "y": 1046,
    "wires": [
      []
    ]
  },
  {
    "id": "47bccbe6.ebe3a4",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": "var msg1=context.global.render_home_components('Presence');\nmsg1.method=\"POST\";\nmsg1.url=context.global.BlueMixUrlBase+'/red/wscomms';\nmsg1.headers= {\n    \"Authorization\":\"Bearer \"+context.global.FREEBOARD_TOKEN\n};\nreturn msg1;",
    "outputs": 1,
    "noerr": 0,
    "x": 346,
    "y": 712,
    "wires": [
      [
        "3e7bb9bb.5d2ba6"
      ]
    ]
  },
  {
    "id": "3e7bb9bb.5d2ba6",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "txt",
    "url": "",
    "x": 487.5,
    "y": 713,
    "wires": [
      []
    ]
  },
  {
    "id": "51841e7.7e077e",
    "type": "http in",
    "z": "17b3daf5.e84c25",
    "name": "",
    "url": "/red/global_context",
    "method": "get",
    "swaggerDoc": "",
    "x": 140,
    "y": 63,
    "wires": [
      [
        "fed0869d.53f2b8"
      ]
    ]
  },
  {
    "id": "de1e1166.b2693",
    "type": "http in",
    "z": "17b3daf5.e84c25",
    "name": "",
    "url": "/red/ifttt/effects/*",
    "method": "post",
    "swaggerDoc": "",
    "x": 124,
    "y": 296,
    "wires": [
      [
        "cba10ebf.93dbc"
      ]
    ]
  },
  {
    "id": "27f96284.d3d82e",
    "type": "http response",
    "z": "17b3daf5.e84c25",
    "name": "",
    "x": 751,
    "y": 283,
    "wires": []
  },
  {
    "id": "b6a2cfaa.e7d18",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": "var effectMsg={};\nvar web_req=(context.global.getCookie('exchange_token',msg.req.headers.cookie)=='0' ? false:true);\nif (msg.payload.iftttkey==context.global.IFTTT_TOKEN || msg.payload.iftttkey==context.global.FREEBOARD_TOKEN || (msg.req.headers.authorization && msg.req.headers.authorization==\"Bearer \"+context.global.FREEBOARD_TOKEN)) web_req=true;\nif (web_req)\n{\nvar effect=msg.req.originalUrl.split('/').pop();\nnode.warn(effect);\nmsg.statusCode=200;\neffectMsg.payload=msg.payload;\neffectMsg.topic=effect;\nreturn [msg,effectMsg];\n}\nelse {\n    node.warn(\"ifttt messages bad request\")\n     msg.statusCode=403;\n     return [msg,null];\n}\n",
    "outputs": "2",
    "noerr": 0,
    "x": 586,
    "y": 310,
    "wires": [
      [
        "27f96284.d3d82e"
      ],
      [
        "b109258d.d164a8"
      ]
    ]
  },
  {
    "id": "cba10ebf.93dbc",
    "type": "switch",
    "z": "17b3daf5.e84c25",
    "name": "",
    "property": "req.headers.content-type",
    "propertyType": "msg",
    "rules": [
      {
        "t": "eq",
        "v": "text/plain",
        "vt": "str"
      },
      {
        "t": "else"
      }
    ],
    "checkall": "true",
    "outputs": 2,
    "x": 314,
    "y": 302,
    "wires": [
      [
        "1b876037.42322"
      ],
      [
        "b6a2cfaa.e7d18"
      ]
    ]
  },
  {
    "id": "1b876037.42322",
    "type": "json",
    "z": "17b3daf5.e84c25",
    "name": "",
    "x": 442,
    "y": 273,
    "wires": [
      [
        "b6a2cfaa.e7d18"
      ]
    ]
  },
  {
    "id": "b109258d.d164a8",
    "type": "switch",
    "z": "17b3daf5.e84c25",
    "name": "",
    "property": "topic",
    "propertyType": "msg",
    "rules": [
      {
        "t": "eq",
        "v": "fadein",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "fadeout",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "pulse",
        "vt": "str"
      }
    ],
    "checkall": "true",
    "outputs": 3,
    "x": 732,
    "y": 334,
    "wires": [
      [
        "fa15a046.3fc75"
      ],
      [
        "4fa0ab66.1b7694"
      ],
      [
        "9331d3d8.9ed06"
      ]
    ]
  },
  {
    "id": "fa15a046.3fc75",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "fadein",
    "func": "var max=parseInt(msg.payload.max) || 0; //0-100\nvar min=parseInt(msg.payload.min) || 0;  //0-100\nvar period=parseInt(msg.payload.period) ||0; //in secondsdd\nvar delay=parseInt(msg.payload.step_time) || (period >120 ? 20:10); //in seconds\nvar timeout_adjust=0;\ngen_msg=function(winkName,type,level,tstmp){\n    var WinkCMDmsg = context.global.executeWinkCMD(winkName,type,(level > 0 ? 'on' : 'off'),level);\n    node.send(WinkCMDmsg);\n    delete context.global.timedOutCmd[tstmp];\n};\nfunction doWithTimeout(i,delay){\n    var ind=Date.now();\n    if (!('timedOutCmd' in context.global)) context.global.timedOutCmd={};\n    var timeoutId=setTimeout(function(){gen_msg(msg.payload.winkName,msg.payload.type,i,ind);},delay);\n    if (context.global.DEBUG) node.warn(timeoutId);\n    context.global.timedOutCmd[ind]={\n        \"object\":msg.payload.winkName,\n        \"type\":msg.payload.type,\n        \"timeOutId\":timeoutId\n    };\n}\nif (max>min && ((msg.payload.type=='light' && msg.payload.winkName in context.global.winkState.light_bulbs) || msg.payload.type=='group')){\n    var step=Math.round((max-min)/period*delay)-1;\n    if (step<1) step=1;\n    var i=1;\n    var curr_br=min;\n    var effect_delay=Math.round(period/((max-min)/step)*1000);\n    if (context.global.DEBUG) node.warn('step:'+step+' effect_delay:'+effect_delay);\n    if (curr_br>0)  doWithTimeout(curr_br,0);\n    do {\n    \ttimeout_adjust++;\n    \tcurr_br=min+i;\n        doWithTimeout(curr_br,timeout_adjust*effect_delay);\n        i+=step;\n    } while(min+i<max);\n    timeout_adjust++;\n    if (curr_br<max) doWithTimeout(max,timeout_adjust*effect_delay);\n}\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 888,
    "y": 296,
    "wires": [
      [
        "6bd16695.bcc708"
      ]
    ]
  },
  {
    "id": "4fa0ab66.1b7694",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "fadeout",
    "func": "var max=parseInt(msg.payload.max) || 0 //0-100\nvar min=parseInt(msg.payload.min) || 0  //0-100\nvar period=parseInt(msg.payload.period) ||0 //in secondsdd\nvar delay=parseInt(msg.payload.step_time) || (period >120 ? 20:10); //in seconds\nvar timeout_adjust=0;\nnode.warn(msg.payload);\ngen_msg=function(winkName,type,level,tstmp){\n    var WinkCMDmsg = context.global.executeWinkCMD(winkName,type,(level > 0 ? 'on' : 'off'),level);\n    node.send(WinkCMDmsg);\n    delete context.global.timedOutCmd[tstmp];\n};\nfunction doWithTimeout(i,delay){\n    var ind=Date.now();\n    if (!('timedOutCmd' in context.global)) context.global.timedOutCmd={};\n    var timeoutId=setTimeout(function(){gen_msg(msg.payload.winkName,msg.payload.type,i,ind);},delay);\n    if (context.global.DEBUG) node.warn(timeoutId);\n    context.global.timedOutCmd[ind]={\n        \"object\":msg.payload.winkName,\n        \"type\":msg.payload.type,\n        \"timeOutId\":timeoutId\n    };\n}\nif (max>min && ((msg.payload.type=='light' && msg.payload.winkName in context.global.winkState.light_bulbs) || msg.payload.type=='group')){\n    var step=Math.round((max-min)/period*delay)-1;\n    if (step<1) step=1;\n    var i=0;\n    var curr_br=max;\n    var effect_delay=Math.round(period/((max-min)/step)*1000);\n    if (context.global.DEBUG) node.warn('step:'+step+' effect_delay:'+effect_delay);\n    if (curr_br>0)  doWithTimeout(curr_br,0);    \n    do {\n    \ttimeout_adjust++;\n    \tcurr_br=max-i;\n        doWithTimeout(curr_br,timeout_adjust*effect_delay);\n        i+=step;\n    } while(max-i>=min);\n    timeout_adjust++;\n    if (curr_br>min) doWithTimeout(min,timeout_adjust*effect_delay);\n}\nreturn;\n",
    "outputs": 1,
    "noerr": 0,
    "x": 889,
    "y": 336,
    "wires": [
      [
        "6bd16695.bcc708"
      ]
    ]
  },
  {
    "id": "9331d3d8.9ed06",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "pulse",
    "func": "var max=parseInt(msg.payload.max) || 0 //0-100\nvar min=parseInt(msg.payload.min) || 0  //0-100\nvar repeat=parseInt(msg.payload.repeat) ||0 //in secondsdd\nvar delay=parseInt(msg.payload.step_time) || 5; //in seconds\nvar timeout_adjust=0;\nif (context.global.DEBUG) node.warn(msg.payload);\ngen_msg=function(winkName,type,level,tstmp){\n    var WinkCMDmsg = context.global.executeWinkCMD(winkName,type,(level > 0 ? 'on' : 'off'),level);\n    node.send(WinkCMDmsg);\n    delete context.global.timedOutCmd[tstmp];\n};\nfunction doWithTimeout(i,delay){\n    var ind=Date.now();\n    if (!('timedOutCmd' in context.global)) context.global.timedOutCmd={};\n    var timeoutId=setTimeout(function(){gen_msg(msg.payload.winkName,msg.payload.type,i,ind);},delay);\n    if (context.global.DEBUG) node.warn(timeoutId);\n    context.global.timedOutCmd[ind]={\n        \"object\":msg.payload.winkName,\n        \"type\":msg.payload.type,\n        \"timeOutId\":timeoutId\n    };\n        node.warn(context.global.timedOutCmd);\n}\nif (msg.payload.winkName in context.global.winkState.binary_switches){\n    min=0;\n    max=100;\n}\n    var i=0;\n    var curr_br;\n    do {\n    \ttimeout_adjust++;\n    \tcurr_br=min;\n        doWithTimeout(curr_br,timeout_adjust*delay*1000);\n        timeout_adjust++;\n    \tcurr_br=max;\n        doWithTimeout(curr_br,timeout_adjust*delay*1000);\n        i++;\n    } while(i<repeat);\nreturn;\n",
    "outputs": 1,
    "noerr": 0,
    "x": 882,
    "y": 375,
    "wires": [
      [
        "6bd16695.bcc708"
      ]
    ]
  },
  {
    "id": "8df17c6f.d09ed",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 1266,
    "y": 329,
    "wires": [
      [
        "1b785d0f.0db4b3"
      ]
    ]
  },
  {
    "id": "d4c38ab.17a2078",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": "PresenceSensorMsg={\n    url:context.global.BlueMixUrlBase+'/red/wink/subscribtions',\n    method:\"POST\",\n        headers: {\n        \"Content-Type\":\"application/json\"\n    },\n    payload:{\n      capabilities: { fields: [ { field: 'presence', type: 'boolean' } ] },\n      device_manufacturer: 'node_red_virtual_sensor',\n      hidden_at: null,\n      last_event: \n       { brightness_occurred_at: null,\n         loudness_occurred_at: null,\n         vibration_occurred_at: null },\n      last_reading: \n       { \n           agent_session_id: 'FALSE',\n           connection: true,\n           presence:(msg.payload.home=='yes' ? true : false),\n       },\n      manufacturer_device_model: 'node_red_presence_sensor',\n      model_name: 'Presense Sensor',\n      \"eco_system\" : \"NODERED\",\n      name: msg.payload.name,\n      object_id: 'Presense_'+msg.payload.name,\n      object_type: 'sensor_pod',\n      radio_type: 'wifi',\n      sensor_pod_id: 'Presense_'+msg.payload.name,\n      triggers: [],\n      units: {},\n      upc_code: 'presence_sensor',\n      upc_id: 'Presense_'+msg.payload.name\n  }\n}\n\nreturn PresenceSensorMsg;",
    "outputs": 1,
    "noerr": 0,
    "x": 781,
    "y": 783,
    "wires": [
      [
        "5d26ffb5.3c5b8"
      ]
    ]
  },
  {
    "id": "5d26ffb5.3c5b8",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "txt",
    "url": "",
    "x": 934,
    "y": 783,
    "wires": [
      []
    ]
  },
  {
    "id": "accec1a7.bd715",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "txt",
    "url": "",
    "x": 1095,
    "y": 1160,
    "wires": [
      []
    ]
  },
  {
    "id": "adff6c8d.35872",
    "type": "delay",
    "z": "17b3daf5.e84c25",
    "name": "",
    "pauseType": "rate",
    "timeout": "5",
    "timeoutUnits": "seconds",
    "rate": "1",
    "rateUnits": "second",
    "randomFirst": "1",
    "randomLast": "5",
    "randomUnits": "seconds",
    "drop": false,
    "x": 960,
    "y": 246,
    "wires": [
      [
        "5c387068.3131b",
        "ecb3cff1.6ef94"
      ]
    ]
  },
  {
    "id": "6bd16695.bcc708",
    "type": "delay",
    "z": "17b3daf5.e84c25",
    "name": "",
    "pauseType": "rate",
    "timeout": "5",
    "timeoutUnits": "seconds",
    "rate": "1",
    "rateUnits": "second",
    "randomFirst": "1",
    "randomLast": "5",
    "randomUnits": "seconds",
    "drop": false,
    "x": 1087,
    "y": 329,
    "wires": [
      [
        "8df17c6f.d09ed"
      ]
    ]
  },
  {
    "id": "1b785d0f.0db4b3",
    "type": "debug",
    "z": "17b3daf5.e84c25",
    "name": "",
    "active": false,
    "console": "false",
    "complete": "payload",
    "x": 1439,
    "y": 246,
    "wires": []
  },
  {
    "id": "74e89d40.bb20f4",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": "var t=msg.topic;\nnode.send(msg);\nif ('topic' in msg){\n    var wsMsg={};\n    wsMsg.payload={\n        varName:t,\n        varVal:context.global[t]\n    }\n    wsMsg.method=\"POST\";\n    wsMsg.url=context.global.BlueMixUrlBase+'/red/wscomms';\n    wsMsg.headers= {\n        \"Authorization\":\"Bearer \"+context.global.FREEBOARD_TOKEN\n    };    \n    node.send(wsMsg);\n    \n    if (t=='VacationMode' && context.global.VacationMode=='on'){\n        var Msg1={}\n        Msg1.method=\"POST\";\n        Msg1.url=context.global.BlueMixUrlBase+'/red/vacation_init';\n        Msg1.headers= {\n            \"Authorization\":\"Bearer \"+context.global.FREEBOARD_TOKEN\n        };\n        context.global.sendWithTimeout(node,Msg1,4000);\n    }\n    if (t=='VacationMode' && context.global.VacationMode=='off') context.global.clearAllIntervals();\n\n} \nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 786,
    "y": 248,
    "wires": [
      [
        "adff6c8d.35872"
      ]
    ]
  },
  {
    "id": "ed26a4eb.fc3d38",
    "type": "http in",
    "z": "17b3daf5.e84c25",
    "name": "activate VacMode",
    "url": "/red/vacation_init",
    "method": "post",
    "swaggerDoc": "",
    "x": 128,
    "y": 1630,
    "wires": [
      [
        "9e3cc979.118f78",
        "b1593de8.ad366"
      ]
    ]
  },
  {
    "id": "9e3cc979.118f78",
    "type": "debug",
    "z": "17b3daf5.e84c25",
    "name": "",
    "active": false,
    "console": "false",
    "complete": "true",
    "x": 318,
    "y": 1609,
    "wires": []
  },
  {
    "id": "453e5b2a.9774f4",
    "type": "http response",
    "z": "17b3daf5.e84c25",
    "name": "",
    "x": 644,
    "y": 1656,
    "wires": []
  },
  {
    "id": "67340f05.a811",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": "if ('topic' in msg){\nvar msg1={}\nmsg1.url=context.global.BlueMixUrlBase+'/red/update_app_cfg';\nmsg1.method=\"POST\";\nmsg1.headers= {\n    \"Authorization\":\"Bearer \"+context.global.FREEBOARD_TOKEN\n};\nmsg1.payload={\n   db_mode:\"update\"\n}\nreturn msg1;\n}",
    "outputs": 1,
    "noerr": 0,
    "x": 1320,
    "y": 195,
    "wires": [
      [
        "941d83e5.b18eb"
      ]
    ]
  },
  {
    "id": "941d83e5.b18eb",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 1468,
    "y": 195,
    "wires": [
      []
    ]
  },
  {
    "id": "b1593de8.ad366",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": "checkDevCap=function(dev_fields,cap){\n    var result=false\n    dev_fields.forEach(function(dev_field){\n     if(dev_field.field==cap){\n        result=true;\n     }\n    });\n    return result;\n};\n\n\nsetLockMode=function(lock,mode){\nif (lock in context.global.winkState.locks && checkDevCap(context.global.winkDevCap[lock].fields , mode))\n{\n   WinkCMDmsg ={\n    \"url\":\"https://winkapi.quirky.com/locks/\"+context.global.winkState.locks[lock].object_id,\n    \"method\": \"PUT\",\n    headers: {\n        \"Authorization\":\"Bearer \"+context.global.WinkToken,\n        \"Content-Type\":\"application/json\"\n    },\n    payload: {\n        \"desired_state\": {\n            \"locked\": true\n        }\n    }\n};\nWinkCMDmsg.payload.desired_state[mode]=true;\nif (checkDevCap(context.global.winkDevCap[lock].fields , 'alarm_mode')) {\n    WinkCMDmsg.payload.desired_state.alarm_mode='tamper';\n}\nif (checkDevCap(context.global.winkDevCap[lock].fields , 'alarm_enabled')) {\n    WinkCMDmsg.payload.desired_state.alarm_enabled=true;\n}\nreturn WinkCMDmsg;\n} else return false;    \n}\n\nif(msg.req.headers.authorization && msg.req.headers.authorization==\"Bearer \"+context.global.FREEBOARD_TOKEN){\nmsg.statusCode=\"200\";\nnode.send(msg);\nsetTimeout(function(){\n    if('vaca_locks_vac' in context.global && context.global.vaca_locks_vac){\n        var i=0;\n        for (var lock in context.global.winkState.locks){\n            LMsg=setLockMode(lock,'vacation_mode_enabled');\n            if (LMsg) {\n                if (conext.global.DEBUG) node.warn(LMsg);\n                context.global.sendWithTimeout(node,LMsg,i);\n                i+=1000;\n            }\n        }\n    }\n},(context.global.vaca_delay || 15)*60*1000);\n\n}",
    "outputs": 1,
    "noerr": 0,
    "x": 317,
    "y": 1661,
    "wires": [
      [
        "57e2725.9cd588c"
      ]
    ]
  },
  {
    "id": "57e2725.9cd588c",
    "type": "switch",
    "z": "17b3daf5.e84c25",
    "name": "",
    "property": "method",
    "propertyType": "msg",
    "rules": [
      {
        "t": "eq",
        "v": "PUT",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "POST",
        "vt": "str"
      },
      {
        "t": "else"
      }
    ],
    "checkall": "true",
    "outputs": 3,
    "x": 474,
    "y": 1642,
    "wires": [
      [
        "44d4afe9.5c06e"
      ],
      [
        "44d4afe9.5c06e"
      ],
      [
        "453e5b2a.9774f4"
      ]
    ]
  },
  {
    "id": "44d4afe9.5c06e",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "txt",
    "url": "",
    "x": 626,
    "y": 1615,
    "wires": [
      [
        "51c750f7.2d90e"
      ]
    ]
  },
  {
    "id": "51c750f7.2d90e",
    "type": "debug",
    "z": "17b3daf5.e84c25",
    "name": "",
    "active": false,
    "console": "false",
    "complete": "false",
    "x": 790,
    "y": 1616,
    "wires": []
  },
  {
    "id": "f8c27ca5.cebb7",
    "type": "inject",
    "z": "17b3daf5.e84c25",
    "name": "",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "repeat": "3600",
    "crontab": "",
    "once": true,
    "x": 99,
    "y": 1724,
    "wires": [
      [
        "1f1337ae.aae9e8"
      ]
    ]
  },
  {
    "id": "1f1337ae.aae9e8",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": "if (context.global.VacationMode=='on'){\n    var currDate= new Date();\n    var currHours=currDate.getHours();\n    var currMins=currDate.getMinutes();\n    currHours=currHours+context.global.Weather.Offset;\n    if (currHours<0) currHours=24+currHours;\n    if ('vaca_light_bulbs' in context.global && (currHours >= context.global.Weather.SunsetHour || currHours<1)) {\n        context.global.vaca_light_bulbs.forEach(function(b){\n        var r,effect,min,max;\n        r=context.global.getRandomNumber(0,2);\n        effect=(r===0 ?'on' : r===1 ? 'off' : 'dim');\n        min=context.global.getRandomNumber(5,20);\n        max=context.global.getRandomNumber(50,100);\n        if (context.global.DEBUG) node.warn('bulb '+ b+' effect '+ effect + ' min ' + min + ' max '+ max);\n        var WinkCMDmsg = context.global.executeWinkCMD(b,'light',(effect=='off' ? 'off' : 'on'),(effect=='dim' ? min : max));\n        node.send(WinkCMDmsg);        \n        });\n    }\n    if ('vaca_light_bulbs' in context.global && currHours==1){\n        context.global.vaca_light_bulbs.forEach(function(b){\n            if(context.global.winkState.light_bulbs[b].powered){\n            var WinkCMDmsg = context.global.executeWinkCMD(b,'light','off',trunc(b.brightness*100));\n            node.send(WinkCMDmsg);\n            }\n        });\n    }\n}\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 254,
    "y": 1726,
    "wires": [
      [
        "558de1c5.ec44b"
      ]
    ]
  },
  {
    "id": "d7bde082.83c0b",
    "type": "inject",
    "z": "17b3daf5.e84c25",
    "name": "",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "repeat": "",
    "crontab": "",
    "once": false,
    "x": 142,
    "y": 366,
    "wires": [
      [
        "74294c69.26e664"
      ]
    ]
  },
  {
    "id": "74294c69.26e664",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": "context.global.clearAllIntervals();\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 287,
    "y": 361,
    "wires": [
      []
    ]
  },
  {
    "id": "558de1c5.ec44b",
    "type": "delay",
    "z": "17b3daf5.e84c25",
    "name": "",
    "pauseType": "rate",
    "timeout": "5",
    "timeoutUnits": "seconds",
    "rate": "1",
    "rateUnits": "second",
    "randomFirst": "1",
    "randomLast": "5",
    "randomUnits": "seconds",
    "drop": false,
    "x": 416,
    "y": 1725,
    "wires": [
      [
        "8c299cbc.a05a4"
      ]
    ]
  },
  {
    "id": "8c299cbc.a05a4",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "txt",
    "url": "",
    "x": 586,
    "y": 1723,
    "wires": [
      []
    ]
  },
  {
    "id": "1da47763.461dc9",
    "type": "inject",
    "z": "17b3daf5.e84c25",
    "name": "",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "repeat": "300",
    "crontab": "",
    "once": true,
    "x": 97,
    "y": 1875,
    "wires": [
      [
        "6642abc.0054454"
      ]
    ]
  },
  {
    "id": "ed9e23c8.e0113",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 571,
    "y": 1873,
    "wires": [
      [
        "31d54696.ebee7a",
        "50faf2c3.005c8c"
      ]
    ]
  },
  {
    "id": "6642abc.0054454",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": "if ('BloomskyKey' in context.global && context.global.BloomskyKey!=='' ){\nvar msg1={}\nmsg1.url='https://api.bloomsky.com/api/skydata/?unit=intl';\nmsg1.method=\"GET\";\nmsg1.headers= {\n    \"Authorization\":context.global.BloomskyKey\n};\nreturn msg1;\n}",
    "outputs": 1,
    "noerr": 0,
    "x": 417,
    "y": 1874,
    "wires": [
      [
        "ed9e23c8.e0113"
      ]
    ]
  },
  {
    "id": "31d54696.ebee7a",
    "type": "debug",
    "z": "17b3daf5.e84c25",
    "name": "",
    "active": false,
    "console": "false",
    "complete": "payload",
    "x": 749,
    "y": 1871,
    "wires": []
  },
  {
    "id": "50faf2c3.005c8c",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": "if (msg.statusCode=='200') {\n    data_set=msg.payload;\n    i=0;\n    data_set.forEach(function(dev){\n       var weatherData=dev.Data;\n       if (context.global.DEBUG){\n           node.warn('device '+ dev.DeviceName);           \n           node.warn('temperature: '+ weatherData.Temperature);\n           node.warn('humidity: '+ weatherData.Humidity);\n           node.warn('night: '+ weatherData.Night);\n           node.warn('rain: '+ weatherData.Rain);\n           node.warn('pressure: '+ weatherData.Pressure);       \n           node.warn('luminance: '+ weatherData.Luminance);   \n           node.warn('uvindex: ' + weatherData.UVIndex);\n           node.warn('ImageURL: ' + weatherData.ImageURL);\n           node.warn('devide id: '+ dev.DeviceID);\n           node.warn('url: '+context.global.Weather.Bloomsky.URL);\n       }\n       if(!('Bloomsky' in context.global.Weather)) context.global.Weather.Bloomsky={};\n       context.global.Weather.Bloomsky.Rain=weatherData.Rain;\n       context.global.Weather.Bloomsky.Night=weatherData.Night;\n       context.global.Weather.Bloomsky.TemperatureC=weatherData.Temperature;\n       context.global.Weather.Bloomsky.TemperatureF=Math.round(weatherData.Temperature*1.8+32);       \n       context.global.Weather.Bloomsky.Luminance=weatherData.Luminance;  \n       context.global.Weather.Bloomsky.Humidity=weatherData.Humidity; \n       context.global.Weather.Bloomsky.Pressure=weatherData.Pressure;\n       context.global.Weather.Bloomsky.UVIndex=weatherData.UVIndex; \n        var postMsg={\n            url:context.global.BlueMixUrlBase+'/red/wink/subscribtions',\n            method:\"POST\",\n                headers: {\n                \"Content-Type\":\"application/json\"\n            },\n            payload:{\n          capabilities: { fields: [ \n              { field: 'temperature', type: 'float' },\n              { field: 'humidity', type: 'percentage' },\n              { field: 'timeframe', type: 'boolean' },\n              { field: 'rain', type: 'boolean' },\n              { field: 'pressure', type: 'float' },\n              { field: 'luminance', type: 'float' },\n              { field: 'uvindex', type: 'float' }\n              ] },\n          device_manufacturer: 'BloomSky',\n          \"eco_system\" : \"BLOOMSKY\",\n          last_event: \n           { brightness_occurred_at: null,\n             loudness_occurred_at: null,\n             vibration_occurred_at: null },\n          last_reading: \n           { \n                agent_session_id: 'FALSE',\n                connection: true,\n                'temperature': weatherData.Temperature,\n                'humidity': weatherData.Humidity,\n                'timeframe': weatherData.Night,\n                'rain': weatherData.Rain,\n                'pressure': weatherData.Pressure,\n                'luminance': weatherData.Luminance,   \n                'uvindex': weatherData.UVIndex\n           },\n          manufacturer_device_model: 'bloomsky_weather_sensor',\n          model_name: 'Weather Sensor',\n          name:dev.DeviceName,\n          object_id:  dev.DeviceID+'_BloomSky',\n          object_type: 'sensor_pod',\n          radio_type: 'wifi',\n          sensor_pod_id: dev.DeviceID+'_BloomSky',\n          triggers: [],\n          units: {},\n          upc_code: dev.DeviceName+'_weather_sensor',\n          upc_id: 'BloomSky_'+i\n          }\n        };\n    context.global.sendWithTimeout(node,postMsg,i*2000);\n    i++;\n    var proto=context.global.BlueMixUrlBase.split(':')[0]+':';\n        var camMsg={\n            topic:dev.DeviceName,\n            url:context.global.BlueMixUrlBase+'/red/wink/subscribtions',\n            method:\"POST\",\n                headers: {\n                \"Content-Type\":\"application/json\"\n            },\n            payload:{    \n            \"name\": dev.DeviceName,\n            \"object_type\": \"camera\",\n            \"eco_system\" : \"BloomSky\",\n            \"object_id\": dev.DeviceID+'_BloomSky',\n            \"freeboard\": 0,\n            \"manufacturer_device_model\":\"BloomSky camera\",\n            \"connection\": true,\n            \"capturing_audio\": true,\n            \"capturing_video\": true,\n            \"url\":context.global.BlueMixUrlBase+'/red/bloomsky',\n            \"snap_url\": context.global.BlueMixUrlBase+'/red/bloomsky?token='+context.global.FREEBOARD_TOKEN,\n            \"history_url\":context.global.BlueMixUrlBase+\"/freeboard/cameraSnapshots?token=\"+context.global.FREEBOARD_TOKEN+\"&camera_name=\"+dev.DeviceName,\n            \"refresh_time\":300,\n            \"motion\": \"N/A\",\n            \"activities\":[],\n            last_reading:{\n                \"motion\":false\n            }\n            }\n        };\n        context.global.sendWithTimeout(node,camMsg,i*2000);\n        i++;\n        context.global.Weather.Bloomsky.URL=proto+weatherData.ImageURL.split(':')[1];\n    });\n}",
    "outputs": 1,
    "noerr": 0,
    "x": 708,
    "y": 1925,
    "wires": [
      [
        "f8e9b36f.d02b4",
        "a5d1ff7c.a16ff"
      ]
    ]
  },
  {
    "id": "f8e9b36f.d02b4",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 888,
    "y": 1920,
    "wires": [
      [
        "53981059.e6193"
      ]
    ]
  },
  {
    "id": "458ae02e.eadbc",
    "type": "comment",
    "z": "17b3daf5.e84c25",
    "name": "Integration with BloomSky ---------------------------------------------------------------------------------------",
    "info": "",
    "x": 335,
    "y": 1829,
    "wires": []
  },
  {
    "id": "a5d1ff7c.a16ff",
    "type": "debug",
    "z": "17b3daf5.e84c25",
    "name": "",
    "active": false,
    "console": "false",
    "complete": "false",
    "x": 879,
    "y": 1971,
    "wires": []
  },
  {
    "id": "53981059.e6193",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": "if ('topic' in msg){\n       var newmsg ={\n        \"url\":context.global.BlueMixUrlBase+'/red/retrieve_activities?camera_name='+msg.topic,\n        \"method\": \"GET\",\n        headers: {\n            \"Authorization\":\"Bearer \"+context.global.FREEBOARD_TOKEN\n        }\n    };\n    node.send(newmsg);\n}\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 1037,
    "y": 1919,
    "wires": [
      []
    ]
  },
  {
    "id": "ecb3cff1.6ef94",
    "type": "debug",
    "z": "17b3daf5.e84c25",
    "name": "",
    "active": false,
    "console": "false",
    "complete": "false",
    "x": 1094,
    "y": 159,
    "wires": []
  },
  {
    "id": "4d17cbde.8d81c4",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "bin",
    "url": "",
    "x": 437,
    "y": 1968,
    "wires": [
      [
        "39307e54.0f45e2",
        "eb1334ca.9e3f58"
      ]
    ]
  },
  {
    "id": "64645c1e.8d7704",
    "type": "http in",
    "z": "17b3daf5.e84c25",
    "name": "",
    "url": "/red/bloomsky",
    "method": "get",
    "swaggerDoc": "",
    "x": 95,
    "y": 1965,
    "wires": [
      [
        "e49c8ede.cd963"
      ]
    ]
  },
  {
    "id": "e49c8ede.cd963",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": "var web_req=(context.global.getCookie('exchange_token',msg.req.headers.cookie)=='0' ? false:true);\nif (msg.payload.token==context.global.FREEBOARD_TOKEN || (msg.req.headers.authorization && msg.req.headers.authorization==\"Bearer \"+context.global.FREEBOARD_TOKEN)) web_req=true;\nif (web_req)\n{\n    msg.statusCode=200;\n    msg.url=context.global.Weather.Bloomsky.URL;\n    msg.method=\"GET\";\n    return [msg,null];\n\n    \n}\nelse {\n    node.warn(\"ifttt messages bad request\");\n    msg.payload=\"403: Bad request\";\n    msg.statusCode=403;\n    return [null,msg];\n}\nreturn msg;",
    "outputs": "2",
    "noerr": 0,
    "x": 280,
    "y": 1965,
    "wires": [
      [
        "4d17cbde.8d81c4",
        "6cfbe7c4.480b88"
      ],
      []
    ]
  },
  {
    "id": "6cfbe7c4.480b88",
    "type": "debug",
    "z": "17b3daf5.e84c25",
    "name": "",
    "active": false,
    "console": "false",
    "complete": "true",
    "x": 437,
    "y": 1925,
    "wires": []
  },
  {
    "id": "39307e54.0f45e2",
    "type": "debug",
    "z": "17b3daf5.e84c25",
    "name": "",
    "active": false,
    "console": "false",
    "complete": "true",
    "x": 612,
    "y": 2028,
    "wires": []
  },
  {
    "id": "eb1334ca.9e3f58",
    "type": "http response",
    "z": "17b3daf5.e84c25",
    "name": "",
    "x": 586,
    "y": 1954,
    "wires": []
  },
  {
    "id": "d896fc61.7dfec",
    "type": "switch",
    "z": "17b3daf5.e84c25",
    "name": "",
    "property": "statusCode",
    "propertyType": "msg",
    "rules": [
      {
        "t": "eq",
        "v": "503",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "200",
        "vt": "str"
      }
    ],
    "checkall": "true",
    "outputs": 2,
    "x": 634.2856788635254,
    "y": 1551.4284934997559,
    "wires": [
      [
        "a7954abb.c565b8"
      ],
      [
        "4bde7ebe.6b718"
      ]
    ]
  },
  {
    "id": "4bde7ebe.6b718",
    "type": "json",
    "z": "17b3daf5.e84c25",
    "name": "",
    "x": 771.4285545349121,
    "y": 1549.9999389648438,
    "wires": [
      [
        "98e50652.baa948"
      ]
    ]
  },
  {
    "id": "a7954abb.c565b8",
    "type": "debug",
    "z": "17b3daf5.e84c25",
    "name": "",
    "active": false,
    "console": "false",
    "complete": "false",
    "x": 790,
    "y": 1508.5714285714284,
    "wires": []
  },
  {
    "id": "47167d5a.78e644",
    "type": "http in",
    "z": "17b3daf5.e84c25",
    "name": "",
    "url": "/red/loc/:user/:key",
    "method": "post",
    "swaggerDoc": "",
    "x": 145,
    "y": 2215,
    "wires": [
      [
        "78cdd7f1.035e68",
        "32d823cc.59d5cc",
        "cd99ff21.5a4e9"
      ]
    ]
  },
  {
    "id": "78cdd7f1.035e68",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": "msg.statusCode=200;\nmsg.payload=[]\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 347,
    "y": 2191,
    "wires": [
      [
        "a135fe42.0a4be"
      ]
    ]
  },
  {
    "id": "a135fe42.0a4be",
    "type": "http response",
    "z": "17b3daf5.e84c25",
    "name": "",
    "x": 507,
    "y": 2191,
    "wires": []
  },
  {
    "id": "b5bc728b.4105f",
    "type": "delay",
    "z": "17b3daf5.e84c25",
    "name": "",
    "pauseType": "rate",
    "timeout": "5",
    "timeoutUnits": "seconds",
    "rate": "1",
    "rateUnits": "second",
    "randomFirst": "1",
    "randomLast": "5",
    "randomUnits": "seconds",
    "drop": false,
    "x": 499,
    "y": 2264,
    "wires": [
      [
        "6dde0e7b.b00ae",
        "da7a6f3b.daab7"
      ]
    ]
  },
  {
    "id": "da7a6f3b.daab7",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "txt",
    "url": "",
    "x": 694,
    "y": 2256,
    "wires": [
      []
    ]
  },
  {
    "id": "6dde0e7b.b00ae",
    "type": "debug",
    "z": "17b3daf5.e84c25",
    "name": "",
    "active": false,
    "console": "false",
    "complete": "true",
    "x": 701,
    "y": 2309,
    "wires": []
  },
  {
    "id": "f8094d8a.6b936",
    "type": "comment",
    "z": "17b3daf5.e84c25",
    "name": "Integration with OwnTracks ---------------------------------------------------------------------------------------",
    "info": "",
    "x": 345,
    "y": 2152,
    "wires": []
  },
  {
    "id": "cd99ff21.5a4e9",
    "type": "debug",
    "z": "17b3daf5.e84c25",
    "name": "",
    "active": false,
    "console": "false",
    "complete": "false",
    "x": 379,
    "y": 2351,
    "wires": []
  }
]