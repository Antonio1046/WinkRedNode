[
  {
    "id": "12c9efa7.ed361",
    "type": "function",
    "name": "",
    "func": "var avgtemp=0;\nvar avghumidity=0;\nvar numthermos=0;\nvar numhumidities=0;\nmsg.payload={\n    \"thermostats\":context.global.Ecobee.Thermostats,\n    \"sensor_pods\":context.global.Ecobee.Sensors\n};\nif (typeof context.global.winkState.thermostats=='undefined'){ context.global.winkState.thermostats = new Object(); }\nfor (var name in msg.payload.thermostats)\n{\n//    node.warn(\"Importing: \"+name+\" thermostat\");\n    context.global.winkState.thermostats[name]={\n        \"name\":name,\n        \"object_type\": msg.payload.thermostats[name].object_type,\n        \"object_id\": msg.payload.thermostats[name].object_id,\n        \"freeboard\": 0,\n        \"connection\": msg.payload.thermostats[name].connection,\n        \"min_set_point\": (msg.payload.thermostats[name].min_set_point-32)*(5/9),\n        \"max_set_point\": (msg.payload.thermostats[name].max_set_point-32)*(5/9),\n        \"mode\": msg.payload.thermostats[name].mode,\n        \"temperature\": (msg.payload.thermostats[name].temperature-32)*(5/9),\n        \"humidity\": msg.payload.thermostats[name].humidity,\n        \"users_away\":false\n    };\n    if (msg.payload.thermostats[name].temperature){ avgtemp+=(msg.payload.thermostats[name].temperature-32)*(5/9); numthermos++; }\n    if (msg.payload.thermostats[name].humidity){ avghumidity+=(msg.payload.thermostats[name].humidity); numhumidities++; }\n}\n\navgtemp=avgtemp/numthermos;\navghumidity=avghumidity/numhumidities;\n\nif (typeof context.global.winkState.groups[\".sensors\"].temperature=='undefined'){ context.global.winkState.groups[\".sensors\"].temperature = new Object(); }\nif (typeof context.global.winkState.groups[\".sensors\"].humidity=='undefined'){ context.global.winkState.groups[\".sensors\"].humidity = new Object(); }\ncontext.global.winkState.groups[\".sensors\"].temperature={\n    average:avgtemp\n};\ncontext.global.winkState.groups[\".sensors\"].humidity={\n    average:avghumidity\n};\n\n//node.warn(\"Ecobee Thermostat import finished\");\n\nfor (var name in msg.payload.sensor_pods)\n{\n//    node.warn(\"Importing: \"+name+\" sensor pod\");\n    context.global.winkState.sensor_pods[name]={\n        \"name\":name,\n        \"object_type\":msg.payload.sensor_pods[name].object_type,\n        \"object_id\":msg.payload.sensor_pods[name].object_id,\n        \"freeboard\":0,\n    }\n    if (msg.payload.sensor_pods[name].motion==\"true\"){context.global.winkState.sensor_pods[name].motion=true}\n    else if (msg.payload.sensor_pods[name].motion==\"false\"){context.global.winkState.sensor_pods[name].motion=false}\n    context.global.winkDevCap[name]={\n        \"sensor_types\":[{}]\n    }\n    context.global.winkDevCap[name].sensor_types=[{\n            \"field\":\"motion\",\n            \"type\":\"boolean\"\n        }]\n}\n\n//node.warn(\"Ecobee Remote Sensor import finished\");\nvar newMsg={\n    \"payload\":\"Ecobee Thermostat and Remote Sensor Data imported successfully\"\n};\nreturn newMsg;",
    "outputs": 1,
    "noerr": 0,
    "x": 303.5,
    "y": 800.9999694824219,
    "z": "54c33433.ab3ccc",
    "wires": [
      [
        "1af4ceb3.e50b31"
      ]
    ]
  },
  {
    "id": "4bd15ae1.b42ea4",
    "type": "function",
    "name": "",
    "func": "var WinkCMDmsg=\"\";\nif (msg.payload.iftttkey==context.global.IFTTT_TOKEN || msg.payload.iftttkey==context.global.FREEBOARD_TOKEN)\n{\n    if (typeof msg.payload.ifttt !=='undefined')\n    {\n      context.global.ifttt=(msg.payload.ifttt.toLowerCase()==\"on\" ? true:false)\n      msg.res.StatusCode=200;\n    }\n    if (typeof msg.payload.winkName !=='undefined')\n    {\n//    node.warn(msg.payload.winkName)\n    if (msg.payload.level !=='undefined')\n    {\n        level=msg.payload.level\n    }  else level=100\n    if (msg.payload.cmd !=='undefined')\n    {\n        cmd=msg.payload.cmd\n    } else cmd=''   \n//    node.warn(level)\n    WinkCMDmsg = context.global.executeWinkCMD(msg.payload.winkName,msg.payload.type,msg.payload.cmd,level);\n    msg.res.StatusCode=200;\n//    node.warn(WinkCMDmsg)\n    }\n}\nelse {\n    node.warn(\"ifttt messages bad request\")\n     msg.res.StatusCode=403;\n}\nif (WinkCMDmsg!==\"\")\n{\n    return [msg,WinkCMDmsg];\n}\nelse\n{\nreturn [msg];\n}",
    "outputs": "2",
    "noerr": 0,
    "x": 349.5,
    "y": 285.99993896484375,
    "z": "54c33433.ab3ccc",
    "wires": [
      [
        "39d999e5.c62666"
      ],
      [
        "7bdae64f.842518"
      ]
    ]
  },
  {
    "id": "bef95d79.4106a",
    "type": "http in",
    "name": "",
    "url": "/red/ifttt",
    "method": "post",
    "swaggerDoc": "",
    "x": 122.5,
    "y": 286,
    "z": "54c33433.ab3ccc",
    "wires": [
      [
        "4bd15ae1.b42ea4"
      ]
    ]
  },
  {
    "id": "39d999e5.c62666",
    "type": "http response",
    "name": "",
    "x": 558.4999847412109,
    "y": 255.99993896484375,
    "z": "54c33433.ab3ccc",
    "wires": []
  },
  {
    "id": "65c823a7.9a37dc",
    "type": "comment",
    "name": "IFTTT Integration-------------------------------------------------------------------------------------------------------------------------------",
    "info": "",
    "x": 433.5,
    "y": 223,
    "z": "54c33433.ab3ccc",
    "wires": []
  },
  {
    "id": "7bdae64f.842518",
    "type": "http request",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 585.5,
    "y": 299.99993896484375,
    "z": "54c33433.ab3ccc",
    "wires": [
      []
    ]
  },
  {
    "id": "efacfa83.105308",
    "type": "comment",
    "name": "Wink API Apdex-------------------------------------------------------------------------------------------------------------------------------",
    "info": "",
    "x": 425.5,
    "y": 338.99993896484375,
    "z": "54c33433.ab3ccc",
    "wires": []
  },
  {
    "id": "25faf1a5.da050e",
    "type": "inject",
    "name": "",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "repeat": "600",
    "crontab": "",
    "once": true,
    "x": 123.5,
    "y": 378.9998779296875,
    "z": "54c33433.ab3ccc",
    "wires": [
      [
        "ef5c79fd.10a388"
      ]
    ]
  },
  {
    "id": "ef5c79fd.10a388",
    "type": "function",
    "name": "",
    "func": "var newMsg ={\n    \"url\":\"http://status.winkapp.com/metrics-display/009ykpcmnm25/day.json\",\n    \"method\":\"GET\",\n    headers: {\n        \"Content-Type\":\"application/json\"\n    }\n};\nreturn newMsg;",
    "outputs": 1,
    "noerr": 0,
    "x": 256.5,
    "y": 379.99993896484375,
    "z": "54c33433.ab3ccc",
    "wires": [
      [
        "bfae115.f4051f"
      ]
    ]
  },
  {
    "id": "bfae115.f4051f",
    "type": "http request",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 408.5,
    "y": 379.99993896484375,
    "z": "54c33433.ab3ccc",
    "wires": [
      [
        "c346666d.3cb998"
      ]
    ]
  },
  {
    "id": "c346666d.3cb998",
    "type": "function",
    "name": "",
    "func": "if ('metrics' in msg.payload && msg.payload.metrics.length>0){\ncontext.global.winkState.winkAPI = \"\";\nwinkAPI=\"\";\n        for(j = 0; j<msg.payload.metrics[0].data.length; j++)\n        {\n            winkAPI = msg.payload.metrics[0].data[j].value;\n        }\ncontext.global.winkState.winkAPI=winkAPI;\nvar newMsg={\n    payload:\"Wink Apdex is currently: \"+context.global.winkState.winkAPI\n};\nreturn newMsg;\n}\n",
    "outputs": 1,
    "noerr": 0,
    "x": 691.5,
    "y": 379.99993896484375,
    "z": "54c33433.ab3ccc",
    "wires": [
      []
    ]
  },
  {
    "id": "f5fd1ad.f0a02e8",
    "type": "comment",
    "name": "DromCam/NestCam Integration-------------------------------------------------------------------------------------------------------------------------------",
    "info": "",
    "x": 475.5,
    "y": 439.4998779296875,
    "z": "54c33433.ab3ccc",
    "wires": []
  },
  {
    "id": "ca8b89bc.357478",
    "type": "comment",
    "name": "Presence  via IFTTT/Tasker/etc. -------------------------------------------------------------------------------------------------------------------------------",
    "info": "",
    "x": 475,
    "y": 540.4998779296875,
    "z": "54c33433.ab3ccc",
    "wires": []
  },
  {
    "id": "df4b463.f20b4b8",
    "type": "http in",
    "name": "",
    "url": "/red/presence",
    "method": "post",
    "swaggerDoc": "",
    "x": 155,
    "y": 587.4998779296875,
    "z": "54c33433.ab3ccc",
    "wires": [
      [
        "ee91fa4d.116e08"
      ]
    ]
  },
  {
    "id": "ee91fa4d.116e08",
    "type": "function",
    "name": "Update Presence entry",
    "func": "pr_msg={};\n//if (typeof context.global.PresenceHistory === 'undefined') context.global.PresenceHistory=[]\npr_msg.payload={old_value:context.global.checkPresence()}\nif (msg.payload.iftttkey==context.global.IFTTT_TOKEN)\n{\n    node.warn(msg.payload.name+' '+msg.payload.home)\n    if (typeof(context.global.Presence) === 'undefined'){\n    context.global.Presence = {}\n    } else pr_msg.payload.old_presence=context.global.Presence;\n    if (msg.payload.name !=='undefined'){\n        if (!context.global.Presence[msg.payload.name]) context.global.Presence[msg.payload.name]={}\n            context.global.Presence[msg.payload.name].home=msg.payload.home\n        }\n    msg.res.StatusCode=200;\n    pr_msg.payload.new_value=context.global.checkPresence();\n}\nelse {\n    node.warn(\"presense, bad request\")\n     msg.res.StatusCode=403;\n     pr_msg.payload.new_value='ERROR';\n}\nreturn [msg,pr_msg];",
    "outputs": "2",
    "noerr": 0,
    "x": 391,
    "y": 588.4998779296875,
    "z": "54c33433.ab3ccc",
    "wires": [
      [
        "2c245f56.d3dba",
        "97b260d8.684da"
      ],
      [
        "111a0778.eee5f9"
      ]
    ]
  },
  {
    "id": "2c245f56.d3dba",
    "type": "http response",
    "name": "",
    "x": 821.9999847412109,
    "y": 581.4998779296875,
    "z": "54c33433.ab3ccc",
    "wires": []
  },
  {
    "id": "111a0778.eee5f9",
    "type": "function",
    "name": "",
    "func": "var currDate= new Date();\ncurr_presence=context.global.checkPresence()\nif (msg.payload.new_value!=='ERROR' && msg.payload.new_value!==msg.payload.old_value){\n    if('old_presence' in  msg.payload){\n        var HistP={}\n        HistP.timestamp=new Date();\n        HistP.offset=context.global.Weather.Offset\n        HistP.details=msg.payload.old_presence\n        node.warn(HistP)\n        context.global.PresenceHistory.unshift(HistP)\n    }\n    if (context.global.PresenceHistory.length > 15) context.global.PresenceHistory.pop();\n    var scene_name=(msg.payload.new_value ? 'PRESENCE' : 'NO PRESENCE');\n    for (var key in context.global.winkState.scenes){\n        if ( context.global.winkState.scenes[key].name.toUpperCase()==scene_name)\n        {\n            var newMsg ={\n            \"url\":\"https://winkapi.quirky.com/scenes/\"+context.global.winkState.scenes[key].object_id+\"/activate\",\n            \"method\": \"POST\",\n            headers: {\n                \"Authorization\":\"Bearer \"+context.global.WinkToken,\n                \"Content-Type\":\"application/json\"\n                }\n            }\n        node.send(newMsg)\n        return;\n        }\n    }\n}\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 641.8957977294922,
    "y": 631.72216796875,
    "z": "54c33433.ab3ccc",
    "wires": [
      [
        "8151c600.7eae38"
      ]
    ]
  },
  {
    "id": "8151c600.7eae38",
    "type": "http request",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 867.8957977294922,
    "y": 631.833251953125,
    "z": "54c33433.ab3ccc",
    "wires": [
      []
    ]
  },
  {
    "id": "bb823a36.447dc8",
    "type": "comment",
    "name": "Integration with Ecobee Node Red ---------------------------------------------------------------------------------------",
    "info": "",
    "x": 389,
    "y": 743.9999694824219,
    "z": "54c33433.ab3ccc",
    "wires": []
  },
  {
    "id": "416fafd7.be905",
    "type": "http in",
    "name": "",
    "url": "/freeboard/camera",
    "method": "get",
    "swaggerDoc": "",
    "x": 180.49998474121094,
    "y": 484.9999694824219,
    "z": "54c33433.ab3ccc",
    "wires": [
      [
        "ab483005.54b7d"
      ]
    ]
  },
  {
    "id": "ab483005.54b7d",
    "type": "function",
    "name": "",
    "func": "if (msg.payload.token==context.global.FREEBOARD_TOKEN)\n{\n   if(typeof msg.payload.model ==='undefined' || msg.payload.model=='dropcam' || msg.payload.model=='dropcam_pro'){\n   if (typeof msg.payload.cuepoint ==='undefined'){\n   msg.url=\"https://winkapi.quirky.com/cameras/\"+msg.payload.id+\"/image\"\n   msg.method=\"GET\"\n    msg.headers= {\n        \"Authorization\":\"Bearer \"+context.global.WinkToken,\n        \"User-Agent\":\"Manufacturer/Darwin node/0.10.30 Wink/3.6.0\"\n    }\n} else\n{\n    msg.url=\"https://winkapi.quirky.com/cameras/\"+msg.payload.id+\"/cuepoints/\"+msg.payload.cuepoint+\"/image\"\n   msg.method=\"GET\"\n    msg.headers= {\n        \"Authorization\":\"Bearer \"+context.global.WinkToken,\n        \"User-Agent\":\"Manufacturer/Darwin node/0.10.30 Wink/3.6.0\"\n}\n}\nreturn msg;\n}\n}\nif (typeof msg.payload.model!=='undefined' && msg.payload.model=='foscam'){\n//http://timothyr.no-ip.org:1882/videostream.cgi?uid=admin&pwd=Dfdbkjy5\nfor (var k in context.global.FosCam){\n    if (context.global.FosCam[k].Parameters.id.value==msg.payload.id){\n     msg.method=\"GET\"\n     msg.url=\"http://\"+context.global.FosCam[k].hostname+\"/videostream.cgi?user=\"+context.global.FosCam[k].uid+\"&pwd=\"+context.global.FosCam[k].pwd\n     node.warn(msg.url);\n    return msg;\n    }\n}\n}\nelse {\n    msg.res.send(400,\"Bad Request darling\");\n}\n",
    "outputs": 1,
    "noerr": 0,
    "x": 434.49998474121094,
    "y": 486.9999694824219,
    "z": "54c33433.ab3ccc",
    "wires": [
      [
        "5af0e53e.a50f1c"
      ]
    ]
  },
  {
    "id": "5af0e53e.a50f1c",
    "type": "http request",
    "name": "",
    "method": "use",
    "ret": "bin",
    "url": "",
    "x": 604.4999847412109,
    "y": 485.9999694824219,
    "z": "54c33433.ab3ccc",
    "wires": [
      [
        "e23f0184.1dc1"
      ]
    ]
  },
  {
    "id": "e23f0184.1dc1",
    "type": "http response",
    "name": "",
    "x": 769.4999847412109,
    "y": 486.9999694824219,
    "z": "54c33433.ab3ccc",
    "wires": []
  },
  {
    "id": "8a166075.75e9a",
    "type": "function",
    "name": "",
    "func": " var PresenceBkup={\n    Presence: context.global.Presence,\n    PresenceDetail: context.global.PresenceDetail,\n    PresenceHistory: context.global.PresenceHistory\n }\n    var DBMsg={\n        url:context.global.VCAP_SERVICES.cloudantNoSQLDB[0].credentials.url+\"/winkapp\",\n        method:\"POST\",\n        headers: \n            {\n                \"Content-Type\":\"application/json\"\n            },\n        payload: {\n            \"_id\":\"winkPresence\",\n            \"item\":\"Presence\",\n            \"Presence\":PresenceBkup\n        }\n    } \n \n \n //if (msg.payload.total_rows > 0  && msg.payload.rows.map(function(e) { return e.id; }).indexOf('winkPresence')!=-1){\n  if ('_rev' in msg.payload){   \n node.warn('record exists... updating');\n DBMsg.method=\"PUT\";\n DBMsg.url=DBMsg.url+\"/winkPresence\"\n DBMsg.payload._rev=msg.payload._rev;\n //msg.payload.rows.map(function(e) {if(e.id==\"winkPresence\") return e.value._rev; })[0];\n }\nreturn DBMsg;",
    "outputs": 1,
    "noerr": 0,
    "x": 901.6041870117188,
    "y": 694.1110534667969,
    "z": "54c33433.ab3ccc",
    "wires": [
      [
        "73ba4e0a.8c45b"
      ]
    ]
  },
  {
    "id": "97b260d8.684da",
    "type": "function",
    "name": "",
    "func": "if (context.global.CloudantBkUP) {\n    var msg={\n        url:context.global.VCAP_SERVICES.cloudantNoSQLDB[0].credentials.url+\"/winkapp/winkPresence\",\n        method:\"GET\"\n    }\n    node.send(msg); \n}\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 577.6041870117188,
    "y": 695.1110534667969,
    "z": "54c33433.ab3ccc",
    "wires": [
      [
        "796f01.ff8691"
      ]
    ]
  },
  {
    "id": "796f01.ff8691",
    "type": "http request",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 741.6041870117188,
    "y": 695.1110534667969,
    "z": "54c33433.ab3ccc",
    "wires": [
      [
        "8a166075.75e9a"
      ]
    ]
  },
  {
    "id": "73ba4e0a.8c45b",
    "type": "http request",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 1058.6041870117188,
    "y": 693.1110534667969,
    "z": "54c33433.ab3ccc",
    "wires": [
      []
    ]
  },
  {
    "id": "960de0b8.69f22",
    "type": "inject",
    "name": "",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "repeat": "82800",
    "crontab": "",
    "once": true,
    "x": 116.50001525878906,
    "y": 956.3332824707031,
    "z": "54c33433.ab3ccc",
    "wires": [
      [
        "276cd77d.d89328"
      ]
    ]
  },
  {
    "id": "276cd77d.d89328",
    "type": "function",
    "name": "Try to create DB",
    "func": "if (typeof context.global.VCAP_SERVICES!=='undefined' && 'cloudantNoSQLDB' in context.global.VCAP_SERVICES){\n    var DBmsg={\n        url: context.global.VCAP_SERVICES.cloudantNoSQLDB[0].credentials.url+\"/winkapp\",\n        method:\"PUT\"\n    }\n    node.send(DBmsg);\n} else{\nnode.warn('Cloudant credentials are not present. DB backup will be disabled');\ncontext.global.CloudantBkUP=false;\n}\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 303.50001525878906,
    "y": 956.3332824707031,
    "z": "54c33433.ab3ccc",
    "wires": [
      [
        "a1b03108.5e4fd"
      ]
    ]
  },
  {
    "id": "a1b03108.5e4fd",
    "type": "http request",
    "name": "db req",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 466.50001525878906,
    "y": 956.3332824707031,
    "z": "54c33433.ab3ccc",
    "wires": [
      [
        "a47815d7.5b87e8"
      ]
    ]
  },
  {
    "id": "a47815d7.5b87e8",
    "type": "function",
    "name": "Check response",
    "func": "if (msg.statusCode=='201' || msg.statusCode=='412')\n{\n    node.warn('Database created or already exists, turning on backup');\n    context.global.CloudantBkUP=true;\n    context.global.CloudantCamera=[];\n    msg.url=context.global.VCAP_SERVICES.cloudantNoSQLDB[0].credentials.url+\"/winkapp/winkPresence\"\n    msg.method=\"GET\"\n    node.send(msg)\n} else {\n    node.warn('issue with cloudant sercvice. backup disabled until next re-try');\n    context.global.CloudantBkUP=false;\n}\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 641.5000152587891,
    "y": 956.3332824707031,
    "z": "54c33433.ab3ccc",
    "wires": [
      [
        "a80b00d8.57f5"
      ]
    ]
  },
  {
    "id": "a80b00d8.57f5",
    "type": "http request",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 827.3958129882812,
    "y": 955.22216796875,
    "z": "54c33433.ab3ccc",
    "wires": [
      [
        "63f9e4ea.9c061c"
      ]
    ]
  },
  {
    "id": "63f9e4ea.9c061c",
    "type": "function",
    "name": "restore from db",
    "func": "if (\"Presence\" in msg.payload){\n    node.warn('restoring presence from db backup')\n    context.global.Presence=msg.payload.Presence.Presence\n    context.global.PresenceHistory=msg.payload.Presence.PresenceHistory\n}\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 995.3958129882812,
    "y": 955.22216796875,
    "z": "54c33433.ab3ccc",
    "wires": [
      []
    ]
  },
  {
    "id": "39398473.c6c67c",
    "type": "comment",
    "name": "Cloundant DB -------------------------------------------------------------------------------------------------------------------------------",
    "info": "modfy bluemix-settings.json and add following line:\n\ncontext.global.InitialStateKey=\"<your initial state api key>\"",
    "x": 400.5,
    "y": 874.3332824707031,
    "z": "54c33433.ab3ccc",
    "wires": []
  },
  {
    "id": "47ff844c.b8007c",
    "type": "function",
    "name": "Save Snapshots to db",
    "func": "function delay(ms) {\n        var cur_d = new Date();\n        var cur_ticks = cur_d.getTime();\n        var ms_passed = 0;\n        while(ms_passed < ms) {\n            var d = new Date();  // Possible memory leak?\n            var ticks = d.getTime();\n            ms_passed = ticks - cur_ticks;\n            // d = null;  // Prevent memory leak?\n        }\n    }\nif(msg.req.headers.authorization && msg.req.headers.authorization==\"Bearer \"+context.global.FREEBOARD_TOKEN){\nvar msg1=msg;\nvar trigger=msg.payload.object_name;\nvar cam_list=msg.payload.cam_list.split(',');\nmsg1.res.statusCode=\"200\";\nnode.send([msg1,null])\nvar date=new Date()\nfor (var i=0;i<cam_list.length;i++){\n//for (var cam in context.global.winkState.cameras){\n var camera=context.global.winkState.cameras[cam_list[i]]\n var cam=cam_list[i]\nif ('snap_url' in camera && camera.snap_url!=='undefined'){\n    var msg={}\n    msg.url=camera.snap_url\n    msg.method=\"GET\"\n    msg.date=date\n    msg.topic=cam\n    msg.trigger=trigger\n    node.send([null,msg]);\n    delay(400)\n}\n}\n\n} else msg.res.send(401,\"Bad request\");\nreturn;",
    "outputs": "2",
    "noerr": 0,
    "x": 378.1041564941406,
    "y": 1056.3332824707031,
    "z": "54c33433.ab3ccc",
    "wires": [
      [
        "9f858796.607a78"
      ],
      [
        "b9504de3.46afb"
      ]
    ]
  },
  {
    "id": "b9504de3.46afb",
    "type": "http request",
    "name": "getPic",
    "method": "use",
    "ret": "bin",
    "url": "",
    "x": 602.1041717529297,
    "y": 1062.3332824707031,
    "z": "54c33433.ab3ccc",
    "wires": [
      [
        "942eecbc.6bd11"
      ]
    ]
  },
  {
    "id": "942eecbc.6bd11",
    "type": "function",
    "name": "save picture",
    "func": "//if (typeof (context.global.ImageArchive)=== 'undefined') {\n//    context.global.ImageArchive = {}\n//}\n//     for (var n in context.global.winkState.cameras){\n//        if (!(n in context.global.ImageArchive)) context.global.ImageArchive[n]=[]\n//    }\n\nnode.warn('Saving image from '+msg.topic)\n//node.warn(bitmap);\nvar DBmsg={\n         url:context.global.VCAP_SERVICES.cloudantNoSQLDB[0].credentials.url+\"/winkapp\",\n        topic:msg.trigger,\n        method:\"POST\",\n        headers: \n            {\n                \"Content-Type\":\"application/json\"\n            },\n        payload: {\n            \"_id\":msg.topic+'|'+msg.date.getTime()+'|'+msg.trigger,\n            \"key\":\"Snapshot\",\n            \"cameraName\":msg.topic,\n            \"timestamp\":msg.date.getTime(),\n            \"trigger\":msg.trigger,\n            \"fileName\":\"CameraImage.jpg\",\n           \"_attachments\":\n                {\n                    \"CameraImage.jpg\":\n                    {\n                        \"content_type\":\"image/jpeg\",\n                        \"data\":msg.payload.toString('base64')\n                    }\n                }        \n        } \n}\n\n//context.global.ImageArchive[msg.topic].splice(0,0,camObj);\n//if (context.global.ImageArchive[msg.topic].length>10) context.global.ImageArchive[msg.topic].pop()\nreturn DBmsg;",
    "outputs": "1",
    "noerr": 0,
    "x": 759.1041717529297,
    "y": 1060.3332824707031,
    "z": "54c33433.ab3ccc",
    "wires": [
      [
        "72bf050b.8d40fc"
      ]
    ]
  },
  {
    "id": "72bf050b.8d40fc",
    "type": "http request",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 934.0000457763672,
    "y": 1060.22216796875,
    "z": "54c33433.ab3ccc",
    "wires": [
      [
        "19cc6ccf.e63393"
      ]
    ]
  },
  {
    "id": "b0d6c70e.4f2938",
    "type": "http in",
    "name": "",
    "url": "/red/save_images",
    "method": "get",
    "swaggerDoc": "",
    "x": 152.60418701171875,
    "y": 1056.22216796875,
    "z": "54c33433.ab3ccc",
    "wires": [
      [
        "47ff844c.b8007c"
      ]
    ]
  },
  {
    "id": "9f858796.607a78",
    "type": "http response",
    "name": "",
    "x": 605.9999542236328,
    "y": 1019.22216796875,
    "z": "54c33433.ab3ccc",
    "wires": []
  },
  {
    "id": "19cc6ccf.e63393",
    "type": "function",
    "name": "cache results",
    "func": "if ('ok' in msg.payload && msg.payload.ok){\n    var cameraname=msg.payload.id.split('|')[0];\n    var tstamp=msg.payload.id.split('|')[1];\n    node.warn('Camera - ' + cameraname)\n    if (typeof(context.global.winkState.cameras[cameraname].activities)==='undefined') context.global.winkState.cameras[cameraname].activities=[]\n    var cam_act={\n        id:msg.payload.rev,\n        cloudant_id:msg.payload.id,\n        category:\"cuepoint\",\n        cuepoint_id:Math.round(tstamp/1000),\n        trigger:msg.topic,\n        snapshot_url:context.global.BlueMixUrlBase+\"/red/camera_history?img_id=\"+msg.payload.id\n    }\n   context.global.winkState.cameras[cameraname].activities.splice(0,0,cam_act);\n   if (context.global.winkState.cameras[cameraname].activities.length>15){\n    for (var i=15; i<context.global.winkState.cameras[cameraname].activities.length;i++){\n    var doc_id=context.global.winkState.cameras[cameraname].activities[i].cloudant_id\n    var rev=context.global.winkState.cameras[cameraname].activities[i].id\n    if(typeof(doc_id)!=='undefined'){\n    var DBmsg={\n         topic:cameraname,\n         position:i,\n         url:context.global.VCAP_SERVICES.cloudantNoSQLDB[0].credentials.url+\"/winkapp/\"+doc_id+\"?rev=\"+rev,\n        method:\"DELETE\"\n    }\n    node.send(DBmsg);\n    }\n   }\n   }\n}\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 1084.0000457763672,
    "y": 1060.22216796875,
    "z": "54c33433.ab3ccc",
    "wires": [
      [
        "98b5d63.f674a28"
      ]
    ]
  },
  {
    "id": "98b5d63.f674a28",
    "type": "http request",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 1237.0001068115234,
    "y": 1058.22216796875,
    "z": "54c33433.ab3ccc",
    "wires": [
      [
        "22d33afc.dd2cc6"
      ]
    ]
  },
  {
    "id": "22d33afc.dd2cc6",
    "type": "function",
    "name": "delete old pics",
    "func": "if (('ok' in msg.payload && msg.payload.ok) ||('error' in msg.payload && msg.payload.error=='not_found') ){\n    node.warn('deleting '+msg.topic+' position '+ msg.position)\n    context.global.winkState.cameras[msg.topic].activities.splice(msg.position,1)\n}\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 1405.0001068115234,
    "y": 1059.22216796875,
    "z": "54c33433.ab3ccc",
    "wires": [
      []
    ]
  },
  {
    "id": "ab4a260a.54b5d8",
    "type": "http in",
    "name": "",
    "url": "/red/camera_history",
    "method": "get",
    "swaggerDoc": "",
    "x": 165.00001525878906,
    "y": 1114.22216796875,
    "z": "54c33433.ab3ccc",
    "wires": [
      [
        "df605b60.209fa8"
      ]
    ]
  },
  {
    "id": "df605b60.209fa8",
    "type": "function",
    "name": "gen CLD url",
    "func": "if ('img_id' in msg.payload){\n    msg.url=context.global.VCAP_SERVICES.cloudantNoSQLDB[0].credentials.url+\"/winkapp/\"+msg.payload.img_id+\"/CameraImage.jpg\"\n    msg.method=\"GET\"\n}\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 376.99998474121094,
    "y": 1114.22216796875,
    "z": "54c33433.ab3ccc",
    "wires": [
      [
        "6a5f8fd5.95a07"
      ]
    ]
  },
  {
    "id": "6a5f8fd5.95a07",
    "type": "http request",
    "name": "",
    "method": "use",
    "ret": "bin",
    "url": "",
    "x": 537.9999847412109,
    "y": 1116.22216796875,
    "z": "54c33433.ab3ccc",
    "wires": [
      [
        "ec4601e8.13ba"
      ]
    ]
  },
  {
    "id": "ec4601e8.13ba",
    "type": "http response",
    "name": "",
    "x": 705.9999847412109,
    "y": 1116.22216796875,
    "z": "54c33433.ab3ccc",
    "wires": []
  },
  {
    "id": "c757994b.38a868",
    "type": "http in",
    "name": "",
    "url": "/red/retrieve_activities",
    "method": "get",
    "swaggerDoc": "",
    "x": 164.60418701171875,
    "y": 1209.22216796875,
    "z": "54c33433.ab3ccc",
    "wires": [
      [
        "b26210d6.4d9df"
      ]
    ]
  },
  {
    "id": "b26210d6.4d9df",
    "type": "function",
    "name": "get activities from db",
    "func": "if(msg.req.headers.authorization && msg.req.headers.authorization==\"Bearer \"+context.global.FREEBOARD_TOKEN){\nvar msg1=msg;\nmsg1.res.statusCode=\"200\";\nmsg.url=context.global.VCAP_SERVICES.cloudantNoSQLDB[0].credentials.url+\"/winkapp/_all_docs?descending=true\"\nmsg.method=\"GET\"\nmsg.topic=msg.payload.camera_name\nnode.send([msg1,msg])\n} else\n{\n    msg.res.statusCode=400\n    node.send([msg,null])\n}\nreturn;",
    "outputs": "2",
    "noerr": 0,
    "x": 394.9999237060547,
    "y": 1207.22216796875,
    "z": "54c33433.ab3ccc",
    "wires": [
      [
        "ec31a58a.13ce58"
      ],
      [
        "a8f39e3f.570c6"
      ]
    ]
  },
  {
    "id": "a8f39e3f.570c6",
    "type": "http request",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 619.9999847412109,
    "y": 1240.22216796875,
    "z": "54c33433.ab3ccc",
    "wires": [
      [
        "3b7d6156.c4829e"
      ]
    ]
  },
  {
    "id": "3b7d6156.c4829e",
    "type": "function",
    "name": "cache cam history",
    "func": "if('total_rows' in msg.payload && msg.payload.total_rows>0){\n var db_rows=msg.payload.rows;\n context.global.winkState.cameras[msg.topic].activities=[]\n //db_rows.foreach(function(row){\n for(var i=0;i<db_rows.length;i++){\n     var row=db_rows[i];\n     if(row.id.indexOf(msg.topic)!=-1){\n      var tstamp=row.id.split('|')[1]\n      var cam_act={\n        id:row.value.rev,\n        cloudant_id:row.id,\n        category:\"cuepoint\",\n        cuepoint_id:Math.round(tstamp/1000),\n        trigger:row.id.split('|')[2],\n        snapshot_url:context.global.BlueMixUrlBase+\"/red/camera_history?img_id=\"+row.id\n      } \n      context.global.winkState.cameras[msg.topic].activities.push(cam_act)         \n     }\n }\n}\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 798,
    "y": 1240.2221374511719,
    "z": "54c33433.ab3ccc",
    "wires": [
      []
    ]
  },
  {
    "id": "ec31a58a.13ce58",
    "type": "http response",
    "name": "",
    "x": 616.9999542236328,
    "y": 1192.22216796875,
    "z": "54c33433.ab3ccc",
    "wires": []
  },
  {
    "id": "f36bbc82.0c944",
    "type": "inject",
    "name": "",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "repeat": "",
    "crontab": "",
    "once": false,
    "x": 153.99999618530273,
    "y": 801.2499618530273,
    "z": "54c33433.ab3ccc",
    "wires": [
      [
        "12c9efa7.ed361"
      ]
    ]
  },
  {
    "id": "1af4ceb3.e50b31",
    "type": "debug",
    "name": "",
    "active": true,
    "console": "false",
    "complete": "false",
    "x": 476.2500114440918,
    "y": 800.9999694824219,
    "z": "54c33433.ab3ccc",
    "wires": []
  },
  {
    "id": "8fd0e1c1.702f2",
    "type": "comment",
    "name": "Integration with LIFX Bulbs ---------------------------------------------------------------------------------------",
    "info": "",
    "x": 365,
    "y": 1289,
    "z": "54c33433.ab3ccc",
    "wires": []
  },
  {
    "id": "b2ca9cc2.4d356",
    "type": "inject",
    "name": "",
    "topic": "",
    "payload": "",
    "payloadType": "none",
    "repeat": "",
    "crontab": "",
    "once": false,
    "x": 102,
    "y": 1329,
    "z": "54c33433.ab3ccc",
    "wires": [
      [
        "365ceaeb.c9a316"
      ]
    ]
  },
  {
    "id": "365ceaeb.c9a316",
    "type": "function",
    "name": "",
    "func": "var newMsg ={\n    \"url\":\"https://api.lifx.com/v1beta1/lights/all\",\n    \"method\": \"GET\",\n    headers: {\n        \"Authorization\": \"Bearer \"+context.global.LIFX_TOKEN,\n        \"Content-Type\":\"application/json\"\n    }\n}\nreturn newMsg;",
    "outputs": 1,
    "noerr": 0,
    "x": 254,
    "y": 1329,
    "z": "54c33433.ab3ccc",
    "wires": [
      [
        "6048bd4.f9fb744"
      ]
    ]
  },
  {
    "id": "b4b8e2d0.4b472",
    "type": "debug",
    "name": "",
    "active": true,
    "console": "false",
    "complete": "payload",
    "x": 743,
    "y": 1328,
    "z": "54c33433.ab3ccc",
    "wires": []
  },
  {
    "id": "6048bd4.f9fb744",
    "type": "http request",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 410,
    "y": 1329,
    "z": "54c33433.ab3ccc",
    "wires": [
      [
        "df7019e6.208fe8"
      ]
    ]
  },
  {
    "id": "df7019e6.208fe8",
    "type": "function",
    "name": "",
    "func": "for (var id in msg.payload)\n{\n    context.global.winkState.light_bulbs[msg.payload[id].label]={\n        name:msg.payload[id].label,\n        object_type:\"light_bulbs\",\n        object_id:msg.payload[id].id,\n        device_manufacturer:\"lifx\",\n        freeboard:0,\n        connection:msg.payload[id].connected,\n        powered:(msg.payload[id].power==\"on\" ? true:false),\n        brightness:msg.payload[id].brightness,\n        color_model:msg.payload[id].product_name,\n        color:\"\",\n        \"hue\":msg.payload[id].color.hue,\n        \"saturation\":msg.payload[id].color.saturation,\n        \"color_temperature\":msg.payload[id].color.kelvin\n    };\n    \n    var newMsg={\n        payload:\"Imported \"+msg.payload[id].label+\" successfully.\"\n    };\n    node.send(newMsg);\n}\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 573,
    "y": 1329,
    "z": "54c33433.ab3ccc",
    "wires": [
      [
        "b4b8e2d0.4b472"
      ]
    ]
  },
  {
    "id": "96479f2d.69b86",
    "type": "http in",
    "name": "",
    "url": "/red/getConfig",
    "method": "get",
    "swaggerDoc": "",
    "x": 114,
    "y": 72,
    "z": "54c33433.ab3ccc",
    "wires": [
      [
        "2abfa4f4.d5405c"
      ]
    ]
  },
  {
    "id": "2abfa4f4.d5405c",
    "type": "function",
    "name": "Throw Config Data",
    "func": "if(msg.req.headers.authorization && msg.req.headers.authorization==\"Bearer \"+context.global.FREEBOARD_TOKEN){\n// text fields array\ntxt_fields=[]\ntxt_fields.push({forecastIoApiKey : context.global.forecastIoApiKey || \"\" });\ntxt_fields.push({FREEBOARD_TOKEN : context.global.FREEBOARD_TOKEN || \"\" });\ntxt_fields.push({IFTTT_TOKEN : context.global.IFTTT_TOKEN || \"\" });\ntxt_fields.push({LIFX_TOKEN : context.global.LIFX_TOKEN || \"\" });\ntxt_fields.push({motionAdjustTstat : context.global.motionAdjustTstat || false });\ntxt_fields.push({InitialStateKey : context.global.InitialStateKey ||\"\"});\nmsg.payload.txt_fields=txt_fields;\ntxt_area_fields=[]\n\ntxt_area_fields.push({FosCam : JSON.stringify(context.global.foscam || \"\")});\ntxt_area_fields.push({SamsungCam : JSON.stringify(context.global.SamsungCam || \"\")});\ntxt_area_fields.push({DlinkCam : JSON.stringify(context.global.DlinkCam || \"\")});\ntxt_area_fields.push({camera_motion : JSON.stringify(context.global.camera_motion || \"\")});\ntxt_area_fields.push({tab_ui_shortcuts : JSON.stringify(context.global.tab_ui_shortcuts || \"\")});\nmsg.payload.txt_area_fields=txt_area_fields\n\nmsg.res.statusCode=\"200\";\nreturn msg;\n}\nelse\n{\n    //msg.payload=\"Not Authorized\";\n   msg.res.send(\"403\",\"Forbidden\");\n  return;\n}\n",
    "outputs": 1,
    "noerr": 0,
    "x": 391.4999694824219,
    "y": 73,
    "z": "54c33433.ab3ccc",
    "wires": [
      [
        "c16a41de.3e95c"
      ]
    ]
  },
  {
    "id": "c16a41de.3e95c",
    "type": "http response",
    "name": "",
    "x": 616.5,
    "y": 74,
    "z": "54c33433.ab3ccc",
    "wires": []
  },
  {
    "id": "234e411b.dcb1be",
    "type": "comment",
    "name": "Section for web services---------------------------------------------------------------------------------------------------------------------------------",
    "info": "",
    "x": 452,
    "y": 30.5,
    "z": "54c33433.ab3ccc",
    "wires": []
  },
  {
    "id": "5198ed2b.ae6714",
    "type": "http in",
    "name": "",
    "url": "/red/getCameras",
    "method": "get",
    "swaggerDoc": "",
    "x": 115,
    "y": 123,
    "z": "54c33433.ab3ccc",
    "wires": [
      [
        "d1aadbf2.2e5528"
      ]
    ]
  },
  {
    "id": "d1aadbf2.2e5528",
    "type": "function",
    "name": "Throw Cameras Data",
    "func": "if(msg.req.headers.authorization && msg.req.headers.authorization==\"Bearer \"+context.global.FREEBOARD_TOKEN){\n// text fields array\ncameras=[]\nfor (var cam in context.global.winkState.cameras){\n    var camera=context.global.winkState.cameras[cam];\n    cameras.push({\n        name:camera.name,\n        id:camera.object_id,\n        connection:camera.connection,\n        url:camera.snap_url\n    });\n}\nmsg.payload.cameras=cameras;\nmsg.res.statusCode=\"200\";\nreturn msg;\n}\nelse\n{\n    //msg.payload=\"Not Authorized\";\n   msg.res.send(\"403\",\"Forbidden\");\n  return;\n}\n",
    "outputs": 1,
    "noerr": 0,
    "x": 392.4999694824219,
    "y": 126,
    "z": "54c33433.ab3ccc",
    "wires": [
      [
        "a97edc0b.56812"
      ]
    ]
  },
  {
    "id": "a97edc0b.56812",
    "type": "http response",
    "name": "",
    "x": 617.5,
    "y": 127,
    "z": "54c33433.ab3ccc",
    "wires": []
  }
]