[
  {
    "id": "f33ac51c.0cc538",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": "var avgtemp=0;\nvar avghumidity=0;\nvar numthermos=0;\nvar numhumidities=0;\nmsg.payload={\n    \"thermostats\":context.global.Ecobee.Thermostats,\n    \"sensor_pods\":context.global.Ecobee.Sensors\n};\nif (typeof context.global.winkState.thermostats=='undefined'){ context.global.winkState.thermostats = new Object(); }\nfor (var name in msg.payload.thermostats)\n{\n//    node.warn(\"Importing: \"+name+\" thermostat\");\n    context.global.winkState.thermostats[name]={\n        \"name\":name,\n        \"object_type\": msg.payload.thermostats[name].object_type,\n        \"object_id\": msg.payload.thermostats[name].object_id,\n        \"freeboard\": 0,\n        \"connection\": msg.payload.thermostats[name].connection,\n        \"min_set_point\": (msg.payload.thermostats[name].min_set_point-32)*(5/9),\n        \"max_set_point\": (msg.payload.thermostats[name].max_set_point-32)*(5/9),\n        \"mode\": msg.payload.thermostats[name].mode,\n        \"temperature\": (msg.payload.thermostats[name].temperature-32)*(5/9),\n        \"humidity\": msg.payload.thermostats[name].humidity,\n        \"users_away\":false\n    };\n    if (msg.payload.thermostats[name].temperature){ avgtemp+=(msg.payload.thermostats[name].temperature-32)*(5/9); numthermos++; }\n    if (msg.payload.thermostats[name].humidity){ avghumidity+=(msg.payload.thermostats[name].humidity); numhumidities++; }\n}\n\navgtemp=avgtemp/numthermos;\navghumidity=avghumidity/numhumidities;\n\nif (typeof context.global.winkState.groups[\".sensors\"].temperature=='undefined'){ context.global.winkState.groups[\".sensors\"].temperature = new Object(); }\nif (typeof context.global.winkState.groups[\".sensors\"].humidity=='undefined'){ context.global.winkState.groups[\".sensors\"].humidity = new Object(); }\ncontext.global.winkState.groups[\".sensors\"].temperature={\n    average:avgtemp\n};\ncontext.global.winkState.groups[\".sensors\"].humidity={\n    average:avghumidity\n};\n\n//node.warn(\"Ecobee Thermostat import finished\");\n\nfor (var name in msg.payload.sensor_pods)\n{\n//    node.warn(\"Importing: \"+name+\" sensor pod\");\n    context.global.winkState.sensor_pods[name]={\n        \"name\":name,\n        \"object_type\":msg.payload.sensor_pods[name].object_type,\n        \"object_id\":msg.payload.sensor_pods[name].object_id,\n        \"freeboard\":0,\n    }\n    if (msg.payload.sensor_pods[name].motion==\"true\"){context.global.winkState.sensor_pods[name].motion=true}\n    else if (msg.payload.sensor_pods[name].motion==\"false\"){context.global.winkState.sensor_pods[name].motion=false}\n    context.global.winkDevCap[name]={\n        \"sensor_types\":[{}]\n    }\n    context.global.winkDevCap[name].sensor_types=[{\n            \"field\":\"motion\",\n            \"type\":\"boolean\"\n        }]\n}\n\n//node.warn(\"Ecobee Remote Sensor import finished\");\nvar newMsg={\n    \"payload\":\"Ecobee Thermostat and Remote Sensor Data imported successfully\"\n};\nreturn newMsg;",
    "outputs": 1,
    "noerr": 0,
    "x": 275.5,
    "y": 868.5,
    "wires": [
      [
        "5281f222.ad7e0c"
      ]
    ]
  },
  {
    "id": "75e27669.8a1d88",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": "var WinkCMDmsg={};\nvar web_req=(context.global.getCookie('exchange_token',msg.req.headers.cookie)=='0' ? false:true);\n\nif (msg.payload.iftttkey==context.global.IFTTT_TOKEN || msg.payload.iftttkey==context.global.FREEBOARD_TOKEN) web_req=true;\nif (web_req)\n{\n    if ('ifttt' in  msg.payload)\n    {\n      context.global.ifttt=(msg.payload.ifttt.toLowerCase()==\"on\" ? true:false)\n      msg.res.StatusCode=200;\n      return [msg];\n    }\n    if ('winkName' in msg.payload)\n    {\n//    node.warn('Name '+msg.payload.winkName)\n    if ('cmd' in msg.payload)\n    {\n        cmd=msg.payload.cmd\n    } else cmd='on' \n    if ('level' in msg.payload)\n    {\n        level=msg.payload.level\n    }  else level= (cmd.toLowerCase() =='on' ? 100 : 0)\n//    node.warn(level)\n    WinkCMDmsg = context.global.executeWinkCMD(msg.payload.winkName,msg.payload.type,msg.payload.cmd,level);\n    msg.statusCode=200;\n//    node.warn('Message '+ JSON.stringify(WinkCMDmsg))\n    }\n    if ('nodeRedVar' in msg.payload) {\n        if ('value' in msg.payload) value=msg.payload.value \n        else value = true;\n    context.global[msg.payload.nodeRedVar]=value;\n    WinkCMDmsg=context.global.send_ui_note('information',30000,'Variable '+msg.payload.nodeRedVar+' set to: '+context.global[msg.payload.nodeRedVar],null);\n    }\n}\nelse {\n    node.warn(\"ifttt messages bad request\")\n     msg.statusCode=403;\n     return [msg,null];\n}\nif (WinkCMDmsg!==\"\")\n{\n    return [msg,WinkCMDmsg];\n}\nelse\n{\nreturn [msg,null];\n}",
    "outputs": "2",
    "noerr": 0,
    "x": 632.5,
    "y": 245.49993896484375,
    "wires": [
      [
        "f82e5584.07d1a8"
      ],
      [
        "a06a8288.5f958"
      ]
    ]
  },
  {
    "id": "72cf971d.8d3068",
    "type": "http in",
    "z": "17b3daf5.e84c25",
    "name": "",
    "url": "/red/ifttt",
    "method": "post",
    "swaggerDoc": "",
    "x": 105.5,
    "y": 238.5,
    "wires": [
      [
        "14b428c4.eb4bd7"
      ]
    ]
  },
  {
    "id": "f82e5584.07d1a8",
    "type": "http response",
    "z": "17b3daf5.e84c25",
    "name": "",
    "x": 888.5,
    "y": 207.49993896484375,
    "wires": []
  },
  {
    "id": "2e8c5491.d173ac",
    "type": "comment",
    "z": "17b3daf5.e84c25",
    "name": "IFTTT Integration-------------------------------------------------------------------------------------------------------------------------------",
    "info": "",
    "x": 441.5,
    "y": 172.5,
    "wires": []
  },
  {
    "id": "a06a8288.5f958",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 868.5,
    "y": 244.49993896484375,
    "wires": [
      []
    ]
  },
  {
    "id": "50c3a8fd.af3c58",
    "type": "comment",
    "z": "17b3daf5.e84c25",
    "name": "Wink API Apdex-------------------------------------------------------------------------------------------------------------------------------",
    "info": "",
    "x": 442.5,
    "y": 426.49993896484375,
    "wires": []
  },
  {
    "id": "d1ec100a.2e13f",
    "type": "inject",
    "z": "17b3daf5.e84c25",
    "name": "",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "repeat": "600",
    "crontab": "",
    "once": true,
    "x": 140.5,
    "y": 466.4998779296875,
    "wires": [
      [
        "6004b4d6.9ffb4c"
      ]
    ]
  },
  {
    "id": "6004b4d6.9ffb4c",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": "var newMsg ={\n    \"url\":\"http://status.winkapp.com/metrics-display/009ykpcmnm25/day.json\",\n    \"method\":\"GET\",\n    headers: {\n        \"Content-Type\":\"application/json\"\n    }\n};\nreturn newMsg;",
    "outputs": 1,
    "noerr": 0,
    "x": 273.5,
    "y": 467.49993896484375,
    "wires": [
      [
        "4aab08ec.b554f8"
      ]
    ]
  },
  {
    "id": "4aab08ec.b554f8",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 492.5,
    "y": 479.49993896484375,
    "wires": [
      [
        "577b4245.a884bc"
      ]
    ]
  },
  {
    "id": "577b4245.a884bc",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": "if ('metrics' in msg.payload && msg.payload.metrics.length>0){\ncontext.global.winkState.winkAPI = \"\";\nwinkAPI=\"\";\n        for(j = 0; j<msg.payload.metrics[0].data.length; j++)\n        {\n            winkAPI = msg.payload.metrics[0].data[j].value;\n        }\ncontext.global.winkState.winkAPI=winkAPI;\nvar newMsg={\n    payload:\"Wink Apdex is currently: \"+context.global.winkState.winkAPI\n};\nreturn newMsg;\n}\n",
    "outputs": 1,
    "noerr": 0,
    "x": 708.5,
    "y": 467.49993896484375,
    "wires": [
      []
    ]
  },
  {
    "id": "ed64d396.129b3",
    "type": "comment",
    "z": "17b3daf5.e84c25",
    "name": "DromCam/NestCam Integration-------------------------------------------------------------------------------------------------------------------------------",
    "info": "",
    "x": 492.5,
    "y": 526.9998779296875,
    "wires": []
  },
  {
    "id": "54404007.abbfc",
    "type": "comment",
    "z": "17b3daf5.e84c25",
    "name": "Presence  via IFTTT/Tasker/etc. -------------------------------------------------------------------------------------------------------------------------------",
    "info": "",
    "x": 492,
    "y": 627.9998779296875,
    "wires": []
  },
  {
    "id": "68cad66b.973528",
    "type": "http in",
    "z": "17b3daf5.e84c25",
    "name": "",
    "url": "/red/presence",
    "method": "post",
    "swaggerDoc": "",
    "x": 172,
    "y": 674.9998779296875,
    "wires": [
      [
        "3d30c6cb.c2cf3a",
        "f5a8c1ac.0a574",
        "55941b8.faa6be4"
      ]
    ]
  },
  {
    "id": "3d30c6cb.c2cf3a",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "Update Presence entry",
    "func": "pr_msg={};\n//if (typeof context.global.PresenceHistory === 'undefined') context.global.PresenceHistory=[]\npr_msg.payload={old_value:context.global.checkPresence()}\nif (msg.payload.iftttkey==context.global.IFTTT_TOKEN)\n{\n    node.warn(msg.payload.name+' '+msg.payload.home)\n    if (typeof(context.global.Presence) === 'undefined'){\n    context.global.Presence = {}\n    } else pr_msg.payload.old_presence=context.global.Presence;\n    if (msg.payload.name !=='undefined'){\n        if (!context.global.Presence[msg.payload.name]) context.global.Presence[msg.payload.name]={}\n            context.global.Presence[msg.payload.name].home=msg.payload.home\n        }\n    msg.StatusCode=200;\n    pr_msg.payload.new_value=context.global.checkPresence();\n}\nelse {\n    node.warn(\"presense, bad request\")\n     msg.StatusCode=403;\n     pr_msg.payload.new_value='ERROR';\n}\nreturn [msg,pr_msg];",
    "outputs": "2",
    "noerr": 0,
    "x": 408,
    "y": 675.9998779296875,
    "wires": [
      [
        "1ddb424.fe224be",
        "beb1288.f414ed8"
      ],
      [
        "6f02a0f3.90fd6"
      ]
    ]
  },
  {
    "id": "1ddb424.fe224be",
    "type": "http response",
    "z": "17b3daf5.e84c25",
    "name": "",
    "x": 653,
    "y": 660.9998779296875,
    "wires": []
  },
  {
    "id": "6f02a0f3.90fd6",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": "var currDate= new Date();\ncurr_presence=context.global.checkPresence()\nif (msg.payload.new_value!=='ERROR' && msg.payload.new_value!==msg.payload.old_value){\n    if('old_presence' in  msg.payload){\n        var HistP={}\n        HistP.timestamp=new Date();\n        HistP.offset=context.global.Weather.Offset\n        HistP.details=msg.payload.old_presence\n        node.warn(HistP)\n        context.global.PresenceHistory.unshift(HistP)\n    }\n    if (context.global.PresenceHistory.length > 15) context.global.PresenceHistory.pop();\n\n    var currDate= new Date();\n    var currHours=currDate.getHours();\n    var currMins=currDate.getMinutes();\n    currHours=currHours+context.global.Weather.Offset;\n    if ((currHours > context.global.Weather.SunriseHour && currHours < context.global.Weather.SunsetHour) || (currHours==context.global.Weather.SunsetHour && currMins <context.global.Weather.SunsetMin))\n    {\n        var timeFrame=\"DAY\";\n    }\n    else {\n        var timeFrame=\"NIGHT\";\n    }    \n    var scene_name=(msg.payload.new_value ? 'PRESENCE' : 'NO PRESENCE')+(timeFrame=='NIGHT' ? ' '+timeFrame : '');\n    for (var key in context.global.winkState.scenes){\n        if ( context.global.winkState.scenes[key].name.toUpperCase()==scene_name)\n        {\n            var newMsg ={\n            \"url\":\"https://winkapi.quirky.com/scenes/\"+context.global.winkState.scenes[key].object_id+\"/activate\",\n            \"method\": \"POST\",\n            headers: {\n                \"Authorization\":\"Bearer \"+context.global.WinkToken,\n                \"Content-Type\":\"application/json\"\n                }\n            }\n        node.send(newMsg)\n        return;\n        }\n    }\n}\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 647.8958129882812,
    "y": 747.22216796875,
    "wires": [
      [
        "2b642905.d49bd6"
      ]
    ]
  },
  {
    "id": "2b642905.d49bd6",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 846.8958129882812,
    "y": 748.333251953125,
    "wires": [
      []
    ]
  },
  {
    "id": "49e6e43d.b6191c",
    "type": "comment",
    "z": "17b3daf5.e84c25",
    "name": "Integration with Ecobee Node Red ----------------------------------------------------------------------------------------------",
    "info": "",
    "x": 385,
    "y": 828.5,
    "wires": []
  },
  {
    "id": "65968484.9a697c",
    "type": "http in",
    "z": "17b3daf5.e84c25",
    "name": "",
    "url": "/freeboard/camera",
    "method": "get",
    "swaggerDoc": "",
    "x": 197.49998474121094,
    "y": 572.4999694824219,
    "wires": [
      [
        "9064680f.6f9b98"
      ]
    ]
  },
  {
    "id": "9064680f.6f9b98",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": "if (msg.payload.token==context.global.FREEBOARD_TOKEN)\n{\n   if(msg.payload.model.indexOf(\"dropcam\")!=-1){\n   if (typeof msg.payload.cuepoint ==='undefined'){\n   msg.url=\"https://winkapi.quirky.com/cameras/\"+msg.payload.id+\"/image\"\n   msg.method=\"GET\"\n    msg.headers= {\n        \"Authorization\":\"Bearer \"+context.global.WinkToken,\n        \"User-Agent\":\"Manufacturer/Darwin node/0.10.30 Wink/3.6.0\"\n    }\n} else\n{\n    msg.url=\"https://winkapi.quirky.com/cameras/\"+msg.payload.id+\"/cuepoints/\"+msg.payload.cuepoint+\"/image\"\n   msg.method=\"GET\"\n    msg.headers= {\n        \"Authorization\":\"Bearer \"+context.global.WinkToken,\n        \"User-Agent\":\"Manufacturer/Darwin node/0.10.30 Wink/3.6.0\"\n}\n}\nreturn msg;\n}\n}\nif (typeof msg.payload.model!=='undefined' && msg.payload.model=='foscam'){\n//http://timothyr.no-ip.org:1882/videostream.cgi?uid=admin&pwd=Dfdbkjy5\nfor (var k in context.global.FosCam){\n    if (context.global.FosCam[k].Parameters.id.value==msg.payload.id){\n     msg.method=\"GET\"\n     msg.url=\"http://\"+context.global.FosCam[k].hostname+\"/videostream.cgi?user=\"+context.global.FosCam[k].uid+\"&pwd=\"+context.global.FosCam[k].pwd\n     node.warn(msg.url);\n    return msg;\n    }\n}\n}\nelse {\n    msg.statusCode=\"403\";\n    node.send(msg);\n//    msg.res.send(400,\"Bad Request darling\");\n}\n",
    "outputs": 1,
    "noerr": 0,
    "x": 452.5,
    "y": 571.4999694824219,
    "wires": [
      [
        "9eead6bd.611528"
      ]
    ]
  },
  {
    "id": "9eead6bd.611528",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "bin",
    "url": "",
    "x": 621.4999847412109,
    "y": 573.4999694824219,
    "wires": [
      [
        "9de0f285.621f1"
      ]
    ]
  },
  {
    "id": "9de0f285.621f1",
    "type": "http response",
    "z": "17b3daf5.e84c25",
    "name": "",
    "x": 786.4999847412109,
    "y": 574.4999694824219,
    "wires": []
  },
  {
    "id": "7c61b1e2.839e5",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": " var PresenceBkup={\n    Presence: context.global.Presence,\n    PresenceDetail: context.global.PresenceDetail,\n    PresenceHistory: context.global.PresenceHistory\n }\n    var DBMsg={\n        url:context.global.VCAP_SERVICES.cloudantNoSQLDB[0].credentials.url+\"/winkapp\",\n        method:\"POST\",\n        headers: \n            {\n                \"Content-Type\":\"application/json\"\n            },\n        payload: {\n            \"_id\":\"winkPresence\",\n            \"item\":\"Presence\",\n            \"Presence\":PresenceBkup\n        }\n    } \n \n \n //if (msg.payload.total_rows > 0  && msg.payload.rows.map(function(e) { return e.id; }).indexOf('winkPresence')!=-1){\n  if ('_rev' in msg.payload){   \n node.warn('record exists... updating');\n DBMsg.method=\"PUT\";\n DBMsg.url=DBMsg.url+\"/winkPresence\"\n DBMsg.payload._rev=msg.payload._rev;\n //msg.payload.rows.map(function(e) {if(e.id==\"winkPresence\") return e.value._rev; })[0];\n }\nreturn DBMsg;",
    "outputs": 1,
    "noerr": 0,
    "x": 926.6041870117188,
    "y": 703.611083984375,
    "wires": [
      [
        "b6d7a67c.492858"
      ]
    ]
  },
  {
    "id": "beb1288.f414ed8",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": "if (context.global.CloudantBkUP) {\n    var msg={\n        url:context.global.VCAP_SERVICES.cloudantNoSQLDB[0].credentials.url+\"/winkapp/winkPresence\",\n        method:\"GET\"\n    }\n    node.send(msg); \n}\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 645.6041870117188,
    "y": 702.611083984375,
    "wires": [
      [
        "68c8e13a.97372"
      ]
    ]
  },
  {
    "id": "68c8e13a.97372",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 788.6041870117188,
    "y": 702.611083984375,
    "wires": [
      [
        "7c61b1e2.839e5"
      ]
    ]
  },
  {
    "id": "b6d7a67c.492858",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 1065.6041870117188,
    "y": 702.611083984375,
    "wires": [
      []
    ]
  },
  {
    "id": "e8d17476.172e88",
    "type": "inject",
    "z": "17b3daf5.e84c25",
    "name": "",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "repeat": "82800",
    "crontab": "",
    "once": true,
    "x": 98.50003051757812,
    "y": 1113.8333129882812,
    "wires": [
      [
        "108005a0.ef7ffa"
      ]
    ]
  },
  {
    "id": "108005a0.ef7ffa",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "Try to create DB",
    "func": "if (typeof context.global.VCAP_SERVICES!=='undefined' && 'cloudantNoSQLDB' in context.global.VCAP_SERVICES){\n    var DBmsg={\n        url: context.global.VCAP_SERVICES.cloudantNoSQLDB[0].credentials.url+\"/winkapp\",\n        method:\"PUT\"\n    }\n    node.send(DBmsg);\n} else{\nnode.warn('Cloudant credentials are not present. DB backup will be disabled');\ncontext.global.CloudantBkUP=false;\n}\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 308.5000305175781,
    "y": 1114.8332824707031,
    "wires": [
      [
        "396d100e.c692f"
      ]
    ]
  },
  {
    "id": "396d100e.c692f",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "db req",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 471.5000305175781,
    "y": 1114.8332824707031,
    "wires": [
      [
        "df6018ba.209fe8"
      ]
    ]
  },
  {
    "id": "df6018ba.209fe8",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "Check response",
    "func": "if (msg.statusCode=='201' || msg.statusCode=='412')\n{\n    node.warn('Database created or already exists, turning on backup');\n    context.global.CloudantBkUP=true;\n    context.global.CloudantCamera=[];\n    msg.url=context.global.VCAP_SERVICES.cloudantNoSQLDB[0].credentials.url+\"/winkapp/winkPresence\"\n    msg.method=\"GET\"\n    node.send(msg)\n} else {\n    node.warn('issue with cloudant sercvice. backup disabled until next re-try');\n    context.global.CloudantBkUP=false;\n}\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 646.5000305175781,
    "y": 1114.8332824707031,
    "wires": [
      [
        "e23eb7ad.1dc148"
      ]
    ]
  },
  {
    "id": "e23eb7ad.1dc148",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 831.3958282470703,
    "y": 1115.72216796875,
    "wires": [
      [
        "1f4a84f5.e0b57b"
      ]
    ]
  },
  {
    "id": "1f4a84f5.e0b57b",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "restore from db",
    "func": "if (\"Presence\" in msg.payload){\n    node.warn('restoring presence from db backup')\n    context.global.Presence=msg.payload.Presence.Presence\n    context.global.PresenceHistory=msg.payload.Presence.PresenceHistory\n}\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 1021.3958282470703,
    "y": 1115.72216796875,
    "wires": [
      []
    ]
  },
  {
    "id": "f1a1155c.0e5ee8",
    "type": "comment",
    "z": "17b3daf5.e84c25",
    "name": "Cloundant DB -------------------------------------------------------------------------------------------------------------------------------",
    "info": "modfy bluemix-settings.json and add following line:\n\ncontext.global.InitialStateKey=\"<your initial state api key>\"",
    "x": 404.5,
    "y": 908.8333129882812,
    "wires": []
  },
  {
    "id": "c1c9d4f9.3e3628",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "Save Snapshots to db",
    "func": "function delay(ms) {\n        var cur_d = new Date();\n        var cur_ticks = cur_d.getTime();\n        var ms_passed = 0;\n        while(ms_passed < ms) {\n            var d = new Date();  // Possible memory leak?\n            var ticks = d.getTime();\n            ms_passed = ticks - cur_ticks;\n            // d = null;  // Prevent memory leak?\n        }\n    }\nif(msg.req.headers.authorization && msg.req.headers.authorization==\"Bearer \"+context.global.FREEBOARD_TOKEN){\nvar msg1=msg;\nvar trigger=msg.payload.object_name;\nvar cam_list=msg.payload.cam_list.split(',');\nmsg1.res.statusCode=\"200\";\nnode.send([msg1,null])\nvar date=new Date()\nfor (var i=0;i<cam_list.length;i++){\n//for (var cam in context.global.winkState.cameras){\n var camera=context.global.winkState.cameras[cam_list[i]]\n var cam=cam_list[i]\nif ('snap_url' in camera && camera.snap_url!=='undefined'){\n    var msg={}\n    msg.url=camera.snap_url\n    msg.method=\"GET\"\n    msg.date=date\n    msg.topic=cam\n    msg.trigger=trigger\n    node.send([null,msg]);\n    delay(400)\n}\n}\n\n} else {\n    msg.statusCode=\"401\";\n    node.send(msg);\n//    msg.res.send(401,\"Bad request\");\n}\nreturn;",
    "outputs": "2",
    "noerr": 0,
    "x": 383.1041717529297,
    "y": 1214.8332824707031,
    "wires": [
      [
        "90dbb5dc.6f2448"
      ],
      [
        "f40a26d4.0bf5d8"
      ]
    ]
  },
  {
    "id": "f40a26d4.0bf5d8",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "getPic",
    "method": "use",
    "ret": "bin",
    "url": "",
    "x": 607.1041870117188,
    "y": 1220.8332824707031,
    "wires": [
      [
        "8197b1ef.7e685"
      ]
    ]
  },
  {
    "id": "8197b1ef.7e685",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "save picture",
    "func": "//if (typeof (context.global.ImageArchive)=== 'undefined') {\n//    context.global.ImageArchive = {}\n//}\n//     for (var n in context.global.winkState.cameras){\n//        if (!(n in context.global.ImageArchive)) context.global.ImageArchive[n]=[]\n//    }\n\n//node.warn('Saving image from '+msg.topic)\n//node.warn(bitmap);\nvar DBmsg={\n         url:context.global.VCAP_SERVICES.cloudantNoSQLDB[0].credentials.url+\"/winkapp\",\n        topic:msg.trigger,\n        method:\"POST\",\n        headers: \n            {\n                \"Content-Type\":\"application/json\"\n            },\n        payload: {\n            \"_id\":msg.topic+'|'+msg.date.getTime()+'|'+msg.trigger,\n            \"key\":\"Snapshot\",\n            \"cameraName\":msg.topic,\n            \"timestamp\":msg.date.getTime(),\n            \"trigger\":msg.trigger,\n            \"fileName\":\"CameraImage.jpg\",\n           \"_attachments\":\n                {\n                    \"CameraImage.jpg\":\n                    {\n                        \"content_type\":\"image/jpeg\",\n                        \"data\":msg.payload.toString('base64')\n                    }\n                }        \n        } \n}\n\n//context.global.ImageArchive[msg.topic].splice(0,0,camObj);\n//if (context.global.ImageArchive[msg.topic].length>10) context.global.ImageArchive[msg.topic].pop()\nreturn DBmsg;",
    "outputs": "1",
    "noerr": 0,
    "x": 764.1041870117188,
    "y": 1218.8332824707031,
    "wires": [
      [
        "2a6a2531.d595da"
      ]
    ]
  },
  {
    "id": "2a6a2531.d595da",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 926.0000610351562,
    "y": 1219.72216796875,
    "wires": [
      [
        "74973457.8b68cc"
      ]
    ]
  },
  {
    "id": "7ec9e30a.81361c",
    "type": "http in",
    "z": "17b3daf5.e84c25",
    "name": "",
    "url": "/red/save_images",
    "method": "get",
    "swaggerDoc": "",
    "x": 157.6042022705078,
    "y": 1214.72216796875,
    "wires": [
      [
        "c1c9d4f9.3e3628"
      ]
    ]
  },
  {
    "id": "90dbb5dc.6f2448",
    "type": "http response",
    "z": "17b3daf5.e84c25",
    "name": "",
    "x": 610.9999694824219,
    "y": 1177.72216796875,
    "wires": []
  },
  {
    "id": "74973457.8b68cc",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "cache results",
    "func": "if ('ok' in msg.payload && msg.payload.ok){\n    var cameraname=msg.payload.id.split('|')[0];\n    var tstamp=msg.payload.id.split('|')[1];\n    //node.warn('Camera - ' + cameraname)\n    if (typeof(context.global.winkState.cameras[cameraname].activities)==='undefined') context.global.winkState.cameras[cameraname].activities=[]\n    var cam_act={\n        id:msg.payload.rev,\n        cloudant_id:msg.payload.id,\n        category:\"cuepoint\",\n        cuepoint_id:Math.round(tstamp/1000),\n        trigger:msg.topic,\n        snapshot_url:context.global.BlueMixUrlBase+\"/red/camera_history?img_id=\"+msg.payload.id\n    }\n   context.global.winkState.cameras[cameraname].activities.splice(0,0,cam_act);\n   if (context.global.winkState.cameras[cameraname].activities.length>15){\n    for (var i=15; i<context.global.winkState.cameras[cameraname].activities.length;i++){\n    var doc_id=context.global.winkState.cameras[cameraname].activities[i].cloudant_id\n    var rev=context.global.winkState.cameras[cameraname].activities[i].id\n    if(typeof(doc_id)!=='undefined'){\n    var DBmsg={\n         topic:cameraname,\n         position:i,\n         url:context.global.VCAP_SERVICES.cloudantNoSQLDB[0].credentials.url+\"/winkapp/\"+doc_id+\"?rev=\"+rev,\n        method:\"DELETE\"\n    }\n    node.send(DBmsg);\n    }\n   }\n   }\n}\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 1106.0000610351562,
    "y": 1215.72216796875,
    "wires": [
      [
        "505311ce.afacf"
      ]
    ]
  },
  {
    "id": "505311ce.afacf",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 1242.0001220703125,
    "y": 1101.72216796875,
    "wires": [
      [
        "db5430c8.24abd"
      ]
    ]
  },
  {
    "id": "db5430c8.24abd",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "delete old pics",
    "func": "if (('ok' in msg.payload && msg.payload.ok) ||('error' in msg.payload && msg.payload.error=='not_found') ){\n    //node.warn('deleting '+msg.topic+' position '+ msg.position)\n    context.global.winkState.cameras[msg.topic].activities.splice(msg.position,1)\n}\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 1407.0001220703125,
    "y": 1100.72216796875,
    "wires": [
      []
    ]
  },
  {
    "id": "e363729e.1c9c9",
    "type": "http in",
    "z": "17b3daf5.e84c25",
    "name": "",
    "url": "/red/camera_history",
    "method": "get",
    "swaggerDoc": "",
    "x": 170.00003051757812,
    "y": 1272.72216796875,
    "wires": [
      [
        "a87806da.5787f8"
      ]
    ]
  },
  {
    "id": "a87806da.5787f8",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "gen CLD url",
    "func": "if ('img_id' in msg.payload){\n    msg.url=context.global.VCAP_SERVICES.cloudantNoSQLDB[0].credentials.url+\"/winkapp/\"+msg.payload.img_id+\"/CameraImage.jpg\"\n    msg.method=\"GET\"\n}\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 382,
    "y": 1272.72216796875,
    "wires": [
      [
        "747ea1fe.8b816"
      ]
    ]
  },
  {
    "id": "747ea1fe.8b816",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "bin",
    "url": "",
    "x": 543,
    "y": 1274.72216796875,
    "wires": [
      [
        "907d365c.6f82c8"
      ]
    ]
  },
  {
    "id": "907d365c.6f82c8",
    "type": "http response",
    "z": "17b3daf5.e84c25",
    "name": "",
    "x": 711,
    "y": 1274.72216796875,
    "wires": []
  },
  {
    "id": "72273009.8dd8d",
    "type": "http in",
    "z": "17b3daf5.e84c25",
    "name": "",
    "url": "/red/retrieve_activities",
    "method": "get",
    "swaggerDoc": "",
    "x": 169.6042022705078,
    "y": 1367.72216796875,
    "wires": [
      [
        "a419101d.5be6f"
      ]
    ]
  },
  {
    "id": "a419101d.5be6f",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "get activities from db",
    "func": "if(msg.req.headers.authorization && msg.req.headers.authorization==\"Bearer \"+context.global.FREEBOARD_TOKEN){\nvar msg1=msg;\nmsg1.statusCode=\"200\";\nmsg.url=context.global.VCAP_SERVICES.cloudantNoSQLDB[0].credentials.url+\"/winkapp/_all_docs?descending=true\"\nmsg.method=\"GET\"\nmsg.topic=msg.payload.camera_name\nnode.send([msg1,msg])\n} else\n{\n    msg.statusCode=400\n    node.send([msg,null])\n}\nreturn;",
    "outputs": "2",
    "noerr": 0,
    "x": 399.99993896484375,
    "y": 1365.72216796875,
    "wires": [
      [
        "fcb7574a.0348a8"
      ],
      [
        "9dbc84e0.624378"
      ]
    ]
  },
  {
    "id": "9dbc84e0.624378",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 625,
    "y": 1398.72216796875,
    "wires": [
      [
        "731f9369.8ce06c"
      ]
    ]
  },
  {
    "id": "731f9369.8ce06c",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "cache cam history",
    "func": "if('total_rows' in msg.payload && msg.payload.total_rows>0){\n var db_rows=msg.payload.rows;\n context.global.winkState.cameras[msg.topic].activities=[]\n //db_rows.foreach(function(row){\n for(var i=0;i<db_rows.length;i++){\n     var row=db_rows[i];\n     if(row.id.indexOf(msg.topic)!=-1){\n      var tstamp=row.id.split('|')[1]\n      var cam_act={\n        id:row.value.rev,\n        cloudant_id:row.id,\n        category:\"cuepoint\",\n        cuepoint_id:Math.round(tstamp/1000),\n        trigger:row.id.split('|')[2],\n        snapshot_url:context.global.BlueMixUrlBase+\"/red/camera_history?img_id=\"+row.id\n      } \n      context.global.winkState.cameras[msg.topic].activities.push(cam_act)         \n     }\n }\n}\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 803.0000152587891,
    "y": 1398.7221374511719,
    "wires": [
      []
    ]
  },
  {
    "id": "fcb7574a.0348a8",
    "type": "http response",
    "z": "17b3daf5.e84c25",
    "name": "",
    "x": 621.9999694824219,
    "y": 1350.72216796875,
    "wires": []
  },
  {
    "id": "978054fa.687fa8",
    "type": "inject",
    "z": "17b3daf5.e84c25",
    "name": "",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "repeat": "",
    "crontab": "",
    "once": false,
    "x": 132,
    "y": 867.7499389648438,
    "wires": [
      [
        "f33ac51c.0cc538"
      ]
    ]
  },
  {
    "id": "5281f222.ad7e0c",
    "type": "debug",
    "z": "17b3daf5.e84c25",
    "name": "",
    "active": true,
    "console": "false",
    "complete": "false",
    "x": 427.25,
    "y": 868.5,
    "wires": []
  },
  {
    "id": "9d857813.627a88",
    "type": "comment",
    "z": "17b3daf5.e84c25",
    "name": "Integration with LIFX Bulbs ---------------------------------------------------------------------------------------",
    "info": "",
    "x": 361,
    "y": 1509.5,
    "wires": []
  },
  {
    "id": "4ca6b0c4.b3595",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "Throw Config Data",
    "func": "if(msg.req.headers.authorization && msg.req.headers.authorization==\"Bearer \"+context.global.FREEBOARD_TOKEN){\n// text fields array\n/*\ntxt_fields=[]\ntxt_fields.push({forecastIoApiKey : context.global.forecastIoApiKey || \"\" });\ntxt_fields.push({FREEBOARD_TOKEN : context.global.FREEBOARD_TOKEN || \"\" });\ntxt_fields.push({IFTTT_TOKEN : context.global.IFTTT_TOKEN || \"\" });\ntxt_fields.push({LIFX_TOKEN : context.global.LIFX_TOKEN || \"\" });\ntxt_fields.push({motionAdjustTstat : context.global.motionAdjustTstat || false });\ntxt_fields.push({InitialStateKey : context.global.InitialStateKey ||\"\"});\nmsg.payload.txt_fields=txt_fields;\ntxt_area_fields=[]\n\ntxt_area_fields.push({FosCam : JSON.stringify(context.global.foscam || \"\")});\ntxt_area_fields.push({SamsungCam : JSON.stringify(context.global.SamsungCam || \"\")});\ntxt_area_fields.push({DlinkCam : JSON.stringify(context.global.DlinkCam || \"\")});\ntxt_area_fields.push({camera_motion : JSON.stringify(context.global.camera_motion || \"\")});\ntxt_area_fields.push({tab_ui_shortcuts : JSON.stringify(context.global.tab_ui_shortcuts || \"\")});\nmsg.payload.txt_area_fields=txt_area_fields\n*/\nmsg.payload=context.global\nmsg.statusCode=\"200\";\nreturn msg;\n}\nelse\n{\n    //msg.payload=\"Not Authorized\";\n   msg.statusCode=\"403\";\n   return msg;\n//   msg.res.send(\"403\",\"Forbidden\");\n//  return;\n}\n",
    "outputs": 1,
    "noerr": 0,
    "x": 406.4999694824219,
    "y": 62.5,
    "wires": [
      [
        "777e325.f8881cc"
      ]
    ]
  },
  {
    "id": "777e325.f8881cc",
    "type": "http response",
    "z": "17b3daf5.e84c25",
    "name": "",
    "x": 631.5,
    "y": 63.5,
    "wires": []
  },
  {
    "id": "3d4059.ffc2bfa8",
    "type": "comment",
    "z": "17b3daf5.e84c25",
    "name": "Section for web services---------------------------------------------------------------------------------------------------------------------------------",
    "info": "",
    "x": 467,
    "y": 20,
    "wires": []
  },
  {
    "id": "dbdf85ee.242078",
    "type": "http in",
    "z": "17b3daf5.e84c25",
    "name": "",
    "url": "/red/getCameras",
    "method": "get",
    "swaggerDoc": "",
    "x": 130,
    "y": 112.5,
    "wires": [
      [
        "3719d16f.c8e62e"
      ]
    ]
  },
  {
    "id": "3719d16f.c8e62e",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "Throw Cameras Data",
    "func": "if(msg.req.headers.authorization && msg.req.headers.authorization==\"Bearer \"+context.global.FREEBOARD_TOKEN){\n// text fields array\ncameras=[]\nfor (var cam in context.global.winkState.cameras){\n    var camera=context.global.winkState.cameras[cam];\n    cameras.push({\n        name:camera.name,\n        id:camera.object_id,\n        connection:camera.connection,\n        url:camera.snap_url\n    });\n}\nmsg.payload.cameras=cameras;\nmsg.statusCode=\"200\";\nreturn msg;\n}\nelse\n{\n    //msg.payload=\"Not Authorized\";\n    msg.statusCode=\"403\";\n    return msg;\n//   msg.res.send(\"403\",\"Forbidden\");\n//  return;\n}\n",
    "outputs": 1,
    "noerr": 0,
    "x": 407.4999694824219,
    "y": 115.5,
    "wires": [
      [
        "1f3b9088.e0c46f"
      ]
    ]
  },
  {
    "id": "1f3b9088.e0c46f",
    "type": "http response",
    "z": "17b3daf5.e84c25",
    "name": "",
    "x": 632.5,
    "y": 116.5,
    "wires": []
  },
  {
    "id": "d6ebf833.291408",
    "type": "catch",
    "z": "17b3daf5.e84c25",
    "name": "",
    "x": 90.5,
    "y": 1807,
    "wires": [
      [
        "8131f2dd.7ece1"
      ]
    ]
  },
  {
    "id": "8131f2dd.7ece1",
    "type": "debug",
    "z": "17b3daf5.e84c25",
    "name": "",
    "active": true,
    "console": "false",
    "complete": "error",
    "x": 290.5,
    "y": 1807,
    "wires": []
  },
  {
    "id": "a8a0e854.575f18",
    "type": "inject",
    "z": "17b3daf5.e84c25",
    "name": "",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "repeat": "5",
    "crontab": "",
    "once": true,
    "x": 129.5,
    "y": 1552,
    "wires": [
      [
        "b5f2e4d5.4a0d18"
      ]
    ]
  },
  {
    "id": "b5f2e4d5.4a0d18",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": "if ('LIFX_TOKEN' in context.global && context.global.LIFX_TOKEN !== 'undefined'){\nvar newMsg1 ={\n    \"url\":\"https://api.lifx.com/v1/lights/all\",\n    \"method\": \"GET\",\n    headers: {\n        \"Authorization\":\"Bearer \"+context.global.LIFX_TOKEN\n    }\n}\nnode.send(newMsg1);\n}\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 297.5,
    "y": 1552,
    "wires": [
      [
        "f9fbf41c.060408"
      ]
    ]
  },
  {
    "id": "f9fbf41c.060408",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 472.5,
    "y": 1551,
    "wires": [
      [
        "2f8418a3.d07be8"
      ]
    ]
  },
  {
    "id": "2f8418a3.d07be8",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": "var lifxLights=msg.payload;\nvar useLiveUpd=('CRYPTO' in context.global ? true:false);\nvar CurreTag=\"\";\nvar eTag;\nif (Object.prototype.toString.call(lifxLights)==='[object Array]'){\n    lifxLights.forEach(function (bulb) {\n      //  node.warn(bulb.label)\n     if (context.global.winkState==='undefined') context.global.winkState={}\n     if (context.global.winkState.light_bulbs==='undefined') context.global.winkState.light_bulbs={}\n     if (bulb.label in context.global.winkState.light_bulbs && useLiveUpd) {\n          var WinkBulb={\n            \"connection\": context.global.winkState.light_bulbs[bulb.label].connection,\n            \"powered\": context.global.winkState.light_bulbs[bulb.label].powered,\n            \"brightness\": context.global.winkState.light_bulbs[bulb.label].brightness,\n            \"hue\" : context.global.winkState.light_bulbs[bulb.label].hue,\n            \"saturation\":context.global.winkState.light_bulbs[bulb.label].saturation,\n            \"temperature\":context.global.winkState.light_bulbs[bulb.label].temperature\n          }\n          CurreTag=context.global.CRYPTO.createHash(\"md5\").update(JSON.stringify(WinkBulb),\"utf8\").digest(\"hex\");\n     }\n     \n     var OrigObject={\n        \"connection\": bulb.connected,\n        \"powered\": (bulb.connected && bulb.power==\"on\" ? true : false),\n        \"brightness\": bulb.brightness,\n        \"hue\" : bulb.color.hue,\n        \"saturation\":bulb.color.saturation,\n        \"temperature\":bulb.color.kelvin\n     };\n     if (useLiveUpd){\n     var LifBulb={\n        \"name\": bulb.label,\n        \"manufacturer_id\": \"lifx\",\n        \"device_manufacturer\":\"lifx\",\n        \"object_type\": \"light_bulb\",\n        \"object_id\": bulb.id,\n        \"freeboard\": 0,\n        desired_state:{},\n        last_reading:{\n        \"connection\": bulb.connected,\n        \"powered\": (bulb.connected && bulb.power==\"on\" ? true : false),\n        \"brightness\": bulb.brightness,\n        \"hue\" : bulb.color.hue,\n        \"saturation\":bulb.color.saturation,\n        \"temperature\":bulb.color.kelvin\n        }\n     };\n      eTag=context.global.CRYPTO.createHash(\"md5\").update(JSON.stringify(OrigObject),\"utf8\").digest(\"hex\");\n     } else {\n    \n      context.global.winkState.light_bulbs[bulb.label]=OrigObject;\n     }\n     //LifBulb\n     \n     context.global.winkDevCap[bulb.label]=bulb.capabilities\n     //node.warn(bulb.label)\n      if (!('groups' in context.global.winkState)) context.global.winkState.groups={}\n     if (!(bulb.group.name in context.global.winkState.groups)){\n     context.global.winkState.groups[bulb.group.name]={\n         \"name\":bulb.group.name,\n         \"obejct_type\":\"groups\",\n         \"object_id\":bulb.group.id,\n          \"freeboard\": 0,\n          members:{}\n        }\n    }\n      context.global.winkState.groups[bulb.group.name].members[bulb.label]={\n        \"name\": bulb.label,\n        \"object_id\": bulb.id,\n        \"object_type\": \"light_bulbs\"\n      }\n     if (useLiveUpd && CurreTag!==eTag){\n        var postMsg={\n            url:context.global.BlueMixUrlBase+'/red/wink/subscribtions',\n            method:\"POST\",\n                headers: {\n                \"Content-Type\":\"application/json\"\n            },\n            payload:LifBulb \n        }\n     node.send(postMsg);\n     }\n    });\n}\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 642.5,
    "y": 1553,
    "wires": [
      [
        "c9de076b.3621f8"
      ]
    ]
  },
  {
    "id": "c9de076b.3621f8",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "txt",
    "url": "",
    "x": 806.5,
    "y": 1552,
    "wires": [
      []
    ]
  },
  {
    "id": "f5a8c1ac.0a574",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": "function send_ui_note(n_type,n_timeout,n_message){\n    var newMsg={\n        url:context.global.BlueMixUrlBase+'/red/notifications',\n        \"method\": \"POST\",\n        headers: {\n            \"Authorization\":\"Bearer \"+context.global.FREEBOARD_TOKEN\n        },\n        payload:{\n            \"type\":n_type,\n            \"message\":n_message,\n            \"timeout\":n_timeout\n            }\n        };\n        node.send(newMsg);\n}\nvar note_msg=msg.payload.name+(msg.payload.home=='yes' ? ' is home' : ' has left');\nsend_ui_note('information',30000,note_msg)\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 342.5,
    "y": 791,
    "wires": [
      [
        "95b97762.6a4688"
      ]
    ]
  },
  {
    "id": "95b97762.6a4688",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "txt",
    "url": "",
    "x": 482.5,
    "y": 790,
    "wires": [
      []
    ]
  },
  {
    "id": "2bdcb1ae.d4234e",
    "type": "inject",
    "z": "17b3daf5.e84c25",
    "name": "",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "repeat": "82800",
    "crontab": "",
    "once": true,
    "x": 107.5,
    "y": 962,
    "wires": [
      [
        "7286c2f6.8d793c"
      ]
    ]
  },
  {
    "id": "7286c2f6.8d793c",
    "type": "delay",
    "z": "17b3daf5.e84c25",
    "name": "",
    "pauseType": "delay",
    "timeout": "1",
    "timeoutUnits": "seconds",
    "rate": "1",
    "rateUnits": "second",
    "randomFirst": "1",
    "randomLast": "5",
    "randomUnits": "seconds",
    "drop": false,
    "x": 267.5,
    "y": 963,
    "wires": [
      [
        "f1a9f4ce.0e5608"
      ]
    ]
  },
  {
    "id": "f1a9f4ce.0e5608",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "try to refresh app_config data",
    "func": "if (context.global.CloudantBkUP) {\n    msg.url=context.global.VCAP_SERVICES.cloudantNoSQLDB[0].credentials.url+\"/winkapp/app_data\";\n    msg.method=\"GET\";\n    node.send(msg); \n}\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 531.5,
    "y": 954,
    "wires": [
      [
        "2f57132b.d0a8ec"
      ]
    ]
  },
  {
    "id": "2f57132b.d0a8ec",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 771.5,
    "y": 959,
    "wires": [
      [
        "663e07b8.99c1f8"
      ]
    ]
  },
  {
    "id": "663e07b8.99c1f8",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "create or update config ",
    "func": "if ((\"error\" in msg.payload && msg.payload.error=='not_found') || msg.db_mode=='update'){\n    node.warn('no app_data exists in cloudant DB or update oeration, saving globals to database')\n    var DBMsg={\n        url:context.global.VCAP_SERVICES.cloudantNoSQLDB[0].credentials.url+\"/winkapp\",\n        method:(msg.db_mode=='update' ? \"PUT\":\"POST\"),\n        headers: \n            {\n                \"Content-Type\":\"application/json\"\n            },\n        payload: {\n            \"_id\":\"app_data\",\n            \"item\":\"app_data\",\n            \"app_cfg\":{\n            motionAdjustTstat: context.global.motionAdjustTstat||false,\n            BlueMixUrlBase:context.global.BlueMixUrlBase,\n            HomeLocation:context.global.HomeLocation,\n            HoursFormat24:context.global.HoursFormat24 || false,\n            LightsNotification:context.global.LightsNotification || false\n            }\n        }\n    }\n    if(msg.db_mode=='update' && !(\"error\" in msg.payload && msg.payload.error=='not_found')){\n    DBMsg.url=DBMsg.url+\"/app_data\"    \n    DBMsg.payload._rev=msg.payload._rev;\n    }\n    if ('HomeLocation' in context.global) DBMsg.payload.app_cfg.HomeLocation=context.global.HomeLocation;\n//\tif ('FosCam' in context.global) DBMsg.payload.app_cfg.FosCam=context.global.FosCam;\n//\tif ('SamsungCam' in context.global) DBMsg.payload.app_cfg.SamsungCam=context.global.SamsungCam;\n//\tif ('DlinkCam' in context.global) DBMsg.payload.app_cfg.DlinkCam=context.global.DlinkCam;\n    if ('camera_motion' in context.global) DBMsg.payload.app_cfg.camera_motion=context.global.camera_motion;\n    if ('tab_ui_shortcuts' in context.global) DBMsg.payload.app_cfg.tab_ui_shortcuts=context.global.tab_ui_shortcuts;\n//    if ('netatmo' in context.global) DBMsg.payload.app_cfg.netatmo=context.global.netatmo;\n    if ('winkState' in context.global) DBMsg.payload.app_cfg.winkState=context.global.winkState;\n    if ('LIFX_TOKEN' in context.global) DBMsg.payload.app_cfg.LIFX_TOKEN=context.global.LIFX_TOKEN;\n    if ('IFTTT_TOKEN' in context.global)DBMsg.payload.app_cfg.IFTTT_TOKEN=context.global.IFTTT_TOKEN;\n    if ('forecastIoApiKey' in context.global)DBMsg.payload.app_cfg.forecastIoApiKey=context.global.forecastIoApiKey;\n    if ('InitialStateKey' in context.global)DBMsg.payload.app_cfg.InitialStateKey=context.global.InitialStateKey;\nnode.send(DBMsg);    \n}\nelse {\n    node.warn('config data exists, restoring');\n    for (var key in msg.payload.app_cfg){\n        node.warn('Restoring '+key+' settings')\n        if (key!=='winkState' && key!=='DlinkCam' && key!=='FosCam' && key!=='SamsungCam'){\n            context.global[key]=msg.payload.app_cfg[key];\n        } else if(msg.restore_wink||0===1) {\n            context.global[key]=msg.payload.app_cfg[key];\n        }\n    }\n}    \nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 958.5,
    "y": 960,
    "wires": [
      [
        "a6dc615b.5923a"
      ]
    ]
  },
  {
    "id": "a6dc615b.5923a",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 1236.5,
    "y": 957,
    "wires": [
      [
        "4177d64f.be8828"
      ]
    ]
  },
  {
    "id": "36a8e5f0.c9571a",
    "type": "http in",
    "z": "17b3daf5.e84c25",
    "name": "",
    "url": "/red/update_app_cfg",
    "method": "post",
    "swaggerDoc": "",
    "x": 125,
    "y": 1043,
    "wires": [
      [
        "bb376dc.f44c89"
      ]
    ]
  },
  {
    "id": "bb376dc.f44c89",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": "if(msg.req.headers.authorization && msg.req.headers.authorization==\"Bearer \"+context.global.FREEBOARD_TOKEN){\nmsg.statusCode=\"200\";\nvar msg1={}\nmsg1.db_mode=msg.payload.db_mode||\"read\";\nnode.send([msg1,msg])\n} else\n{\n    msg.statusCode=\"400\";\n    node.send([null,msg])\n}\nreturn;",
    "outputs": "2",
    "noerr": 0,
    "x": 315.5,
    "y": 1047,
    "wires": [
      [
        "f1a9f4ce.0e5608"
      ],
      [
        "198f2419.e670dc"
      ]
    ]
  },
  {
    "id": "198f2419.e670dc",
    "type": "http response",
    "z": "17b3daf5.e84c25",
    "name": "",
    "x": 460.5,
    "y": 1054,
    "wires": []
  },
  {
    "id": "4177d64f.be8828",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": "var msg1={\n    payload:{\n        config:{\n        HoursFormat24:context.global.HoursFormat24\n        }\n    }\n}\nmsg1.method=\"POST\";\nmsg1.url=context.global.BlueMixUrlBase+'/red/wscomms';\nmsg1.headers= {\n    \"Authorization\":\"Bearer \"+context.global.FREEBOARD_TOKEN\n};\n\nreturn msg1;",
    "outputs": 1,
    "noerr": 0,
    "x": 1078.5,
    "y": 1046,
    "wires": [
      [
        "4811d5ff.b7ee2c"
      ]
    ]
  },
  {
    "id": "66fca477.99035c",
    "type": "json",
    "z": "17b3daf5.e84c25",
    "name": "",
    "x": 430,
    "y": 210,
    "wires": [
      [
        "75e27669.8a1d88"
      ]
    ]
  },
  {
    "id": "14b428c4.eb4bd7",
    "type": "switch",
    "z": "17b3daf5.e84c25",
    "name": "",
    "property": "req.headers.content-type",
    "propertyType": "msg",
    "rules": [
      {
        "t": "eq",
        "v": "text/plain",
        "vt": "str"
      },
      {
        "t": "else"
      }
    ],
    "checkall": "true",
    "outputs": 2,
    "x": 285,
    "y": 236,
    "wires": [
      [
        "66fca477.99035c"
      ],
      [
        "75e27669.8a1d88"
      ]
    ]
  },
  {
    "id": "4811d5ff.b7ee2c",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "txt",
    "url": "",
    "x": 1266,
    "y": 1046,
    "wires": [
      []
    ]
  },
  {
    "id": "55941b8.faa6be4",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": "var msg1=context.global.render_home_components('Presence');\nmsg1.method=\"POST\";\nmsg1.url=context.global.BlueMixUrlBase+'/red/wscomms';\nmsg1.headers= {\n    \"Authorization\":\"Bearer \"+context.global.FREEBOARD_TOKEN\n};\nreturn msg1;",
    "outputs": 1,
    "noerr": 0,
    "x": 347,
    "y": 743,
    "wires": [
      [
        "b4c28329.4b3d8"
      ]
    ]
  },
  {
    "id": "b4c28329.4b3d8",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "txt",
    "url": "",
    "x": 488.5,
    "y": 744,
    "wires": [
      []
    ]
  },
  {
    "id": "6a55a458.95aa5c",
    "type": "http in",
    "z": "17b3daf5.e84c25",
    "name": "",
    "url": "/red/global_context",
    "method": "get",
    "swaggerDoc": "",
    "x": 176,
    "y": 55,
    "wires": [
      [
        "4ca6b0c4.b3595"
      ]
    ]
  },
  {
    "id": "19ead889.e61527",
    "type": "http in",
    "z": "17b3daf5.e84c25",
    "name": "",
    "url": "/red/ifttt/effects/*",
    "method": "post",
    "swaggerDoc": "",
    "x": 124,
    "y": 296,
    "wires": [
      [
        "503595bb.afca6c"
      ]
    ]
  },
  {
    "id": "368a98ed.c97568",
    "type": "http response",
    "z": "17b3daf5.e84c25",
    "name": "",
    "x": 751,
    "y": 283,
    "wires": []
  },
  {
    "id": "b58718d9.4a78e8",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": "var effectMsg={};\nvar web_req=(context.global.getCookie('exchange_token',msg.req.headers.cookie)=='0' ? false:true);\nif (msg.payload.iftttkey==context.global.IFTTT_TOKEN || msg.payload.iftttkey==context.global.FREEBOARD_TOKEN) web_req=true;\nif (web_req)\n{\nvar effect=msg.req.originalUrl.split('/').pop();\nnode.warn(effect);\nmsg.statusCode=200;\neffectMsg.payload=msg.payload;\neffectMsg.topic=effect;\nreturn [msg,effectMsg];\n}\nelse {\n    node.warn(\"ifttt messages bad request\")\n     msg.statusCode=403;\n     return [msg,null];\n}\n",
    "outputs": "2",
    "noerr": 0,
    "x": 586,
    "y": 310,
    "wires": [
      [
        "368a98ed.c97568"
      ],
      [
        "bd61570c.429ea8"
      ]
    ]
  },
  {
    "id": "503595bb.afca6c",
    "type": "switch",
    "z": "17b3daf5.e84c25",
    "name": "",
    "property": "req.headers.content-type",
    "propertyType": "msg",
    "rules": [
      {
        "t": "eq",
        "v": "text/plain",
        "vt": "str"
      },
      {
        "t": "else"
      }
    ],
    "checkall": "true",
    "outputs": 2,
    "x": 314,
    "y": 302,
    "wires": [
      [
        "bde9349d.4216c8"
      ],
      [
        "b58718d9.4a78e8"
      ]
    ]
  },
  {
    "id": "bde9349d.4216c8",
    "type": "json",
    "z": "17b3daf5.e84c25",
    "name": "",
    "x": 442,
    "y": 273,
    "wires": [
      [
        "b58718d9.4a78e8"
      ]
    ]
  },
  {
    "id": "bd61570c.429ea8",
    "type": "switch",
    "z": "17b3daf5.e84c25",
    "name": "",
    "property": "topic",
    "propertyType": "msg",
    "rules": [
      {
        "t": "eq",
        "v": "fadein",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "fadeout",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "pulse",
        "vt": "str"
      }
    ],
    "checkall": "true",
    "outputs": 3,
    "x": 732,
    "y": 334,
    "wires": [
      [
        "5f841481.a07bec"
      ],
      [
        "cacd30da.3532d"
      ],
      [
        "c38f6812.3c7098"
      ]
    ]
  },
  {
    "id": "5f841481.a07bec",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "fadein",
    "func": "var max=parseInt(msg.payload.max) || 0; //0-100\nvar min=parseInt(msg.payload.min) || 0;  //0-100\nvar period=parseInt(msg.payload.period) ||0; //in secondsdd\nvar delay=parseInt(msg.payload.step_time) || 5; //in seconds\nvar timeout_adjust=0;\ngen_msg=function(winkName,type,level){\n    var WinkCMDmsg = context.global.executeWinkCMD(winkName,type,(level > 0 ? 'on' : 'off'),level);\n    node.send(WinkCMDmsg);\n};\nfunction doWithTimeout(i,delay){\n    setTimeout(function(){gen_msg(msg.payload.winkName,msg.payload.type,i);},delay);\n}\nif (max>min && ((msg.payload.type=='light' && msg.payload.winkName in context.global.winkState.light_bulbs) || msg.payload.type=='group')){\n    var step=Math.round((max-min)/period*delay)-1;\n    if (step<1) step=1;\n    var i=1;\n    var curr_br=min;\n    do {\n    \ttimeout_adjust++;\n    \tcurr_br=min+i;\n        doWithTimeout(curr_br,timeout_adjust*delay*1000);\n        i+=step;\n    } while(min+i<max);\n    timeout_adjust++;\n    if (curr_br<max) doWithTimeout(max,timeout_adjust*delay*1000);\n}\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 882,
    "y": 297,
    "wires": [
      [
        "374cb1ec.c8b34e"
      ]
    ]
  },
  {
    "id": "cacd30da.3532d",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "fadeout",
    "func": "var max=parseInt(msg.payload.max) || 0 //0-100\nvar min=parseInt(msg.payload.min) || 0  //0-100\nvar period=parseInt(msg.payload.period) ||0 //in secondsdd\nvar delay=parseInt(msg.payload.step_time) || 5; //in seconds\nvar timeout_adjust=0;\nnode.warn(msg.payload);\ngen_msg=function(winkName,type,level){\n    var WinkCMDmsg = context.global.executeWinkCMD(winkName,type,(level > 0 ? 'on' : 'off'),level);\n    node.send(WinkCMDmsg);\n};\nfunction doWithTimeout(i,delay){\n    setTimeout(function(){gen_msg(msg.payload.winkName,msg.payload.type,i);},delay)\n}\nif (max>min && ((msg.payload.type=='light' && msg.payload.winkName in context.global.winkState.light_bulbs) || msg.payload.type=='group')){\n    var step=Math.round((max-min)/period*delay)-1;\n    if (step<1) step=1;\n    var i=0;\n    var curr_br;\n    do {\n    \ttimeout_adjust++;\n    \tcurr_br=max-i;\n        doWithTimeout(curr_br,timeout_adjust*delay*1000);\n        i+=step;\n    } while(max-i>=min);\n    timeout_adjust++;\n    if (curr_br>min) doWithTimeout(min,timeout_adjust*delay*1000);\n}\nreturn;\n",
    "outputs": 1,
    "noerr": 0,
    "x": 893,
    "y": 335,
    "wires": [
      [
        "374cb1ec.c8b34e"
      ]
    ]
  },
  {
    "id": "c38f6812.3c7098",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "pulse",
    "func": "var max=parseInt(msg.payload.max) || 0 //0-100\nvar min=parseInt(msg.payload.min) || 0  //0-100\nvar repeat=parseInt(msg.payload.repeat) ||0 //in secondsdd\nvar delay=parseInt(msg.payload.step_time) || 5; //in seconds\nvar timeout_adjust=0;\nnode.warn(msg.payload);\ngen_msg=function(winkName,type,level){\n    var WinkCMDmsg = context.global.executeWinkCMD(winkName,type,(level > 0 ? 'on' : 'off'),level);\n    node.send(WinkCMDmsg);\n};\nfunction doWithTimeout(i,delay){\n    setTimeout(function(){gen_msg(msg.payload.winkName,msg.payload.type,i);},delay)\n}\nif (msg.payload.winkName in context.global.winkState.binary_switches){\n    min=0;\n    max=100;\n}\n    var i=0;\n    var curr_br;\n    do {\n    \ttimeout_adjust++;\n    \tcurr_br=min;\n        doWithTimeout(curr_br,timeout_adjust*delay*1000);\n        timeout_adjust++;\n    \tcurr_br=max;\n        doWithTimeout(curr_br,timeout_adjust*delay*1000);\n        i++;\n    } while(i<repeat);\nreturn;\n",
    "outputs": 1,
    "noerr": 0,
    "x": 882,
    "y": 375,
    "wires": [
      [
        "374cb1ec.c8b34e"
      ]
    ]
  },
  {
    "id": "374cb1ec.c8b34e",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 1117,
    "y": 334,
    "wires": [
      []
    ]
  }
]