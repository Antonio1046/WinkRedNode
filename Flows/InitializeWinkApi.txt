[{"id":"8ffa6a9a.700598","type":"http request","name":"","method":"use","ret":"obj","url":"","x":516,"y":101,"z":"254ec046.dab14","wires":[["3323390d.ccdcc6"]]},{"id":"43afc5a0.bc503c","type":"inject","name":"","topic":"","payload":"","payloadType":"none","repeat":"86400","crontab":"","once":false,"x":109,"y":100,"z":"254ec046.dab14","wires":[["16ce4ac2.e931b5","140c80ef.ebf37f"]]},{"id":"16ce4ac2.e931b5","type":"function","name":"Get OAuth Tocken","func":"var uid=\"your id\";\nvar pwd=\"your pwd\";\nvar newMsg ={\n    \"url\":\"https://winkapi.quirky.com/oauth2/token\",\n    \"method\": \"POST\",\n    headers: {\n        \"Content-Type\":\"application/json\"\n    },\n    payload: {\n        \"client_id\": \"your cliend id\",\n        \"client_secret\": \"your secret\",\n        \"username\": uid,\n        \"password\": pwd,\n        \"grant_type\": \"password\"\n    }\n}\nreturn newMsg;","outputs":1,"valid":true,"x":303,"y":100,"z":"254ec046.dab14","wires":[["8ffa6a9a.700598"]]},{"id":"3323390d.ccdcc6","type":"function","name":"DefineGlobalTocken","func":"// sample function that stores wink token in a global variable so other api calls\n//can use that\ncontext.global.WinkToken=msg.payload.data.access_token;\nnode.log(context.global.WinkToken);\nvar msg ={ \"payload\":\"Done\"}\nreturn msg;","outputs":1,"valid":true,"x":753,"y":101,"z":"254ec046.dab14","wires":[["9150e081.6eaf2"]]},{"id":"9150e081.6eaf2","type":"function","name":"Prepare HTTPS requests by device type","func":"var newMsg1 ={\n    \"url\":\"https://winkapi.quirky.com/users/me/light_bulbs\",\n    \"method\": \"GET\",\n    headers: {\n        \"Authorization\":\"Bearer \"+context.global.WinkToken\n    }\n}\nvar newMsg2 ={\n    \"url\":\"https://winkapi.quirky.com/users/me/binary_switches\",\n    \"method\": \"GET\",\n    headers: {\n        \"Authorization\":\"Bearer \"+context.global.WinkToken\n    }\n}\n\nvar newMsg3 ={\n    \"url\":\"https://winkapi.quirky.com/users/me/locks\",\n    \"method\": \"GET\",\n    headers: {\n        \"Authorization\":\"Bearer \"+context.global.WinkToken\n    }\n}\n\nvar newMsg4 ={\n    \"url\":\"https://winkapi.quirky.com/users/me/groups\",\n    \"method\": \"GET\",\n    headers: {\n        \"Authorization\":\"Bearer \"+context.global.WinkToken\n    }\n}\nvar newMsg5 ={\n    \"url\":\"https://winkapi.quirky.com/users/me/sensor_pods\",\n    \"method\": \"GET\",\n    headers: {\n        \"Authorization\":\"Bearer \"+context.global.WinkToken\n    }\n}\nvar newMsg6 ={\n    \"url\":\"https://winkapi.quirky.com/users/me/scenes\",\n    \"method\": \"GET\",\n    headers: {\n        \"Authorization\":\"Bearer \"+context.global.WinkToken\n    }\n}\n\nvar newMsg7 ={\n    \"url\":\"https://winkapi.quirky.com/users/me/thermostats\",\n    \"method\": \"GET\",\n    headers: {\n        \"Authorization\":\"Bearer \"+context.global.WinkToken\n    }\n}\nreturn [newMsg1,newMsg2,newMsg3,newMsg4,newMsg5,newMsg6,newMsg7];","outputs":"7","valid":true,"x":1056,"y":99,"z":"254ec046.dab14","wires":[["5e71c517.a18e3c"],["5cb1c818.a34e38"],["42f9d343.bd062c"],["1b0ac7a.fe4f538"],["61c6a3eb.9e395c"],["6b78e626.948718"],["e445c929.1bba38"]]},{"id":"5e71c517.a18e3c","type":"http request","name":"GetLightBulbs","method":"use","ret":"obj","url":"","x":795,"y":511,"z":"254ec046.dab14","wires":[["a2884513.5d77b8"]]},{"id":"a2884513.5d77b8","type":"function","name":"SetGlobalLightBulbList","func":"//sample function to cache list of Wink Light bulbs and initialize their state\ncontext.global.WinkLightBulbsStatus =new Object();\nfor(i = 0; i<msg.payload.data.length; i++) \n    {                   \n        context.global.WinkLightBulbsStatus[msg.payload.data[i].name]={\n            \"id\": msg.payload.data[i].light_bulb_id,\n            \"brightness\": (msg.payload.data[i].last_reading.powered ? msg.payload.data[i].last_reading.brightness : 0)\n        };\n        \n    }\n\nreturn;","outputs":1,"valid":true,"x":1124,"y":517,"z":"254ec046.dab14","wires":[[]]},{"id":"206b73f9.df948c","type":"function","name":"SetGlobalBinarySwitches","func":"//sample function to cache list of Wink Binary Switches and initialize their state\ncontext.global.WinkSwitchesStatus =new Object();\nfor(i = 0; i<msg.payload.data.length; i++) \n    {                   \n        context.global.WinkSwitchesStatus[msg.payload.data[i].name]= {\n            \"id\":msg.payload.data[i].binary_switch_id,\n            \"powered\":msg.payload.data[i].last_reading.powered\n        };\n    }\n\nreturn;","outputs":1,"valid":true,"x":1134,"y":557,"z":"254ec046.dab14","wires":[[]]},{"id":"5cb1c818.a34e38","type":"http request","name":"GetBinarySwitches","method":"use","ret":"obj","url":"","x":810,"y":553,"z":"254ec046.dab14","wires":[["206b73f9.df948c"]]},{"id":"42f9d343.bd062c","type":"http request","name":"GetLocks","method":"use","ret":"obj","url":"","x":784,"y":596,"z":"254ec046.dab14","wires":[["f67ec75a.098138"]]},{"id":"f67ec75a.098138","type":"function","name":"SetGlobalLocks","func":"//sample function to cache list of Wink Locks and initialize their state\n//I am fetching only Locked state for this example\ncontext.global.WinkLocks =new Object();\nfor(i = 0; i<msg.payload.data.length; i++) \n    {                   \n        context.global.WinkLocks[msg.payload.data[i].name]= {\n            \"id\":msg.payload.data[i].lock_id,\n            \"locked\":msg.payload.data[i].last_reading.locked\n        }\n    }\n\nreturn;","outputs":1,"valid":true,"x":1103,"y":600,"z":"254ec046.dab14","wires":[[]]},{"id":"7090db16.8f6f24","type":"function","name":"SetGlobalGroups","func":"//sample function to cache list of Wink Groups\ncontext.global.WinkGroups =new Object();\nfor(i = 0; i<msg.payload.data.length; i++) \n    {                   \n        if (msg.payload.data[i].members.length >0)\n        {\n            context.global.WinkGroups[msg.payload.data[i].name]= msg.payload.data[i].group_id;\n        }\n    }\n\nreturn;","outputs":1,"valid":true,"x":1109,"y":645,"z":"254ec046.dab14","wires":[[]]},{"id":"1b0ac7a.fe4f538","type":"http request","name":"GetGroups","method":"use","ret":"obj","url":"","x":793,"y":639,"z":"254ec046.dab14","wires":[["7090db16.8f6f24"]]},{"id":"f898d9a0.076728","type":"function","name":"SetGlobalSensors","func":"//sample function to cache list of Wink Motion Sensors and Trippers and initialize their state\ncontext.global.WinkMSensors =new Object();\ncontext.global.WinkTrippers =new Object();\nfor(i = 0; i<msg.payload.data.length; i++) \n    {                   \n        if (msg.payload.data[i].model_name==\"Motion Sensor\")\n        {\n            context.global.WinkMSensors[msg.payload.data[i].sensor_pod_id] = {\n                \"id\":msg.payload.data[i].sensor_pod_id,\n                \"name\":msg.payload.data[i].name,\n                \"motion\":msg.payload.data[i].last_reading.motion,\n                \"type\": msg.payload.data[i].model_name\n\n            };\n        }\n         if (msg.payload.data[i].model_name==\"Tripper\")\n         {\n            context.global.WinkTrippers[msg.payload.data[i].sensor_pod_id] = {\n                \"id\":msg.payload.data[i].sensor_pod_id,\n                \"name\":msg.payload.data[i].name,\n                \"opened\":msg.payload.data[i].last_reading.opened,\n                \"type\": msg.payload.data[i].model_name,\n\n            };\n        }\n    }\nreturn;","outputs":1,"valid":true,"x":1105,"y":687,"z":"254ec046.dab14","wires":[[]]},{"id":"61c6a3eb.9e395c","type":"http request","name":"GetSensors","method":"use","ret":"obj","url":"","x":798,"y":683,"z":"254ec046.dab14","wires":[["f898d9a0.076728"]]},{"id":"6b78e626.948718","type":"http request","name":"GetShortcuts","method":"use","ret":"obj","url":"","x":792,"y":728,"z":"254ec046.dab14","wires":[["1876220d.e789de"]]},{"id":"1876220d.e789de","type":"function","name":"SetGlobalShortcuts","func":"//sample function to cache list of Wink Shortcuts\ncontext.global.WinkScenes =new Object();\nfor(i = 0; i<msg.payload.data.length; i++) \n    {                   \n        if (msg.payload.data[i].members.length >0)\n        {\n            context.global.WinkScenes[msg.payload.data[i].name]= msg.payload.data[i].scene_id;\n        }\n    }\n\nreturn;","outputs":1,"valid":true,"x":1126,"y":727,"z":"254ec046.dab14","wires":[[]]},{"id":"e445c929.1bba38","type":"http request","name":"GetThermostats","method":"use","ret":"obj","url":"","x":795,"y":777,"z":"254ec046.dab14","wires":[["fa60a506.059f58"]]},{"id":"fa60a506.059f58","type":"function","name":"SetGlobalThermostats","func":"//sample function to cache list of Wink Thermostats and initialize their state\n//Since I only have NEST termostat i tried to fetch only common items. Various thermostats\n//can have additional data available.\ncontext.global.WinkThermostats =new Object();\nfor(i = 0; i<msg.payload.data.length; i++) \n    {                   \n            context.global.WinkThermostats[msg.payload.data[i].name]= {\n            \"id\": msg.payload.data[i].thermostat_id,\n            \"name\": msg.payload.data[i].name,\n            \"mode\": msg.payload.data[i].last_reading.mode,\n            \"away\": msg.payload.data[i].last_reading.user_away,\n            \"temperature\":msg.payload.data[i].last_reading.temperature,\n            \"units\":msg.payload.data[i].last_reading.units\n            }\n            \n    }\n\nreturn;","outputs":1,"valid":true,"x":1129,"y":776,"z":"254ec046.dab14","wires":[[]]},{"id":"140c80ef.ebf37f","type":"function","name":"DefineGlobalObjects","func":"//use this function to initialize global variables that can be used in any flow or function\n//and will keep their values while application is running\n\nif (typeof context.global.ignoreMotion === 'undefined')\n{\n    context.global.ignoreMotion=false;\n}\n\nreturn;","outputs":1,"valid":true,"x":304,"y":149,"z":"254ec046.dab14","wires":[[]]}]