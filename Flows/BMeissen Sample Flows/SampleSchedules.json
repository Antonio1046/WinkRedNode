[
  {
    "id": "96a37e7f.695c8",
    "type": "function",
    "z": "47c504f6.b83afc",
    "name": "ScheduleLogic",
    "func": "// You shouldn't have to edit anything in this section, scroll down to line 33 for instructions on setting up your schedule logic.\nfunction send_ui_note(n_type,n_timeout,n_message,obj_id){\n    var obj=obj_id||null;\n    var newMsg={\n        url:context.global.BlueMixUrlBase+'/red/notifications',\n        \"method\": \"POST\",\n        headers: {\n            \"Authorization\":\"Bearer \"+context.global.FREEBOARD_TOKEN\n        },\n        payload:{\n            \"id\":obj,\n            \"type\":n_type,\n            \"message\":n_message,\n            \"timeout\":n_timeout\n            }\n        };\n        node.send(newMsg);\n}\nvar date = new Date(msg.payload);\nvar hours = date.getHours();\nvar minutes =date.getMinutes();\nvar intday = date.getDay();\nhours = hours + context.global.Weather.Offset;\nif (hours<0) { hours = 24+hours }\ncontext.global.timestamp=new Date(msg.payload);\nvar device = \"\";\nvar type = \"\";\nvar powered = \"\";\nvar brightness = \"\";\nvar WinkCMDmsg = \"\";\n// You shouldn't need to edit anything above. \n\n// Start of Scheduling Logic Instructions\n// The schedule logic can handle turning on/off Bulbs, Groups, and Switches based on specific time of day or based on sunset/sunrise.\n// To help illustrate the flexibility of the schedule logic, three schedules are included first -- one for updating a group, one for\n// updating a specific light bulb, and one for updating a binary switch. I've included a lot of example schedules as well, so you can\n// peruse the examples below to come up with your own schedules.\n//\n// **Note - check out the example on line 169 for an example of a schedule which is only triggered on weekdays. \n// \n// If you want to have any of your schedules be triggered by Sunset or Sunrise, use the following variables --\n// Sunrise: if(hours==context.global.Weather.SunriseHour && minutes==context.global.Weather.SunriseMin){ actions }\n// Sunset: if(hours==context.global.Weather.SunsetHour && minutes==context.global.Weather.SunsetMin){ actions }\n// Note: You can also offset Sunset/Sunrise by simply adding or subtracting from the value as seen below.\n\n\n// For this schedule, our trigger is 1 hour prior to sunset.\nif(hours==(context.global.Weather.SunsetHour-1) && minutes==context.global.Weather.SunsetMin) // Indoor Lights at Dusk\n{\n    device=\"Great Room\"; // In this case, we're triggering a group. Put in your group's name here.\n    powered=\"on\"; // on or off.\n    brightness=100; // Bulb brightness is from 0 (dim) to 100 (full brightness)\n    type=\"group\"; // This is used in the next step of the flow. Your options are either \"light\", \"lock\", \"group\" or \"scene\"\n    WinkCMDmsg = context.global.executeWinkCMD(device,type,powered,brightness);\n    node.send(WinkCMDmsg);\n    WinkCMDmsg = send_ui_note('warning',30000,'Schedule: '+device+' '+type+' '+' turned '+powered,'123456');\n\n    // I want two different groups to turn on 1 hour before sunset, so here's another group. \n    // You can have one schedule trigger multiple actions, just copy lines 50 through 56 and paste in this schedule.\n    device=\"Kitchen\"; // In this case, we're triggering a group. Put in your group's name here.\n    powered=\"on\"; // on or off\n    brightness=100; // Bulb brightness is from 0 (dim) to 100 (full brightness)\n    type=\"group\"; // This is used in the next step of the flow. Your options are either \"light\", \"lock\", \"group\" or \"scene\"\n    WinkCMDmsg = context.global.executeWinkCMD(device,type,powered,brightness);\n    node.send(WinkCMDmsg);\n    WinkCMDmsg = send_ui_note('warning',30000,'Schedule: '+device+' '+type+' '+' turned '+powered,'123456');\n}\n\n// In this case, the schedule is triggered every day at 8pm.\nif(hours==20 && minutes==00) //Dim Great Room and Kitchen to 50% @ 8pm\n{\n    device=\"Great Room\";\n    powered=\"on\";\n    brightness=50;\n    type=\"group\";\n    WinkCMDmsg = context.global.executeWinkCMD(device,type,powered,brightness);\n    node.send(WinkCMDmsg);\n    WinkCMDmsg = send_ui_note('warning',30000,'Schedule: '+device+' '+type+' '+' turned '+powered,'123456');\n\n    device=\"Kitchen\";\n    powered=\"on\";\n    brightness=50;\n    type=\"group\";\n    WinkCMDmsg = context.global.executeWinkCMD(device,type,powered,brightness);\n    node.send(WinkCMDmsg);\n    WinkCMDmsg = send_ui_note('warning',30000,'Schedule: '+device+' '+type+' '+' turned '+powered,'123456');\n}\n\n// I dim the lights a little more at 8:30...\nif(hours==20 && minutes==30) //Dim Great Room and Kitchen to 35% @ 8:30pm\n{\n    device=\"Great Room\";\n    powered=\"on\";\n    brightness=35;\n    type=\"group\";\n    WinkCMDmsg = context.global.executeWinkCMD(device,type,powered,brightness);\n    node.send(WinkCMDmsg);\n    WinkCMDmsg = send_ui_note('warning',30000,'Schedule: '+device+' '+type+' '+' turned '+powered,'123456');\n\n    device=\"Kitchen\";\n    powered=\"on\";\n    brightness=35;\n    type=\"group\";\n    WinkCMDmsg = context.global.executeWinkCMD(device,type,powered,brightness);\n    node.send(WinkCMDmsg);\n    WinkCMDmsg = send_ui_note('warning',30000,'Schedule: '+device+' '+type+' '+' turned '+powered,'123456');\n}\n\n// And a little more at 9pm... Simulating a sunset inside my house...\nif(hours==21 && minutes==00) //Great Room and Kitchen to 10% brightness at 9:00pm\n{\n    device=\"Great Room\";\n    powered=\"on\";\n    brightness=10;\n    type=\"group\";\n    WinkCMDmsg = context.global.executeWinkCMD(device,type,powered,brightness);\n    node.send(WinkCMDmsg);\n    WinkCMDmsg = send_ui_note('warning',30000,'Schedule: '+device+' '+type+' '+' turned '+powered,'123456');\n\n    device=\"Kitchen\";\n    powered=\"on\";\n    brightness=10;\n    type=\"group\";\n    WinkCMDmsg = context.global.executeWinkCMD(device,type,powered,brightness);\n    node.send(WinkCMDmsg);\n    WinkCMDmsg = send_ui_note('warning',30000,'Schedule: '+device+' '+type+' '+' turned '+powered,'123456');\n}\n\n// And down to 1% at 9:30pm...\nif(hours==21 && minutes==30) //Great Room and Kitchen to 1% brightness at 9:30pm\n{\n    device=\"Great Room\";\n    powered=\"on\";\n    brightness=1;\n    type=\"group\";\n    WinkCMDmsg = context.global.executeWinkCMD(device,type,powered,brightness);\n    node.send(WinkCMDmsg);\n    WinkCMDmsg = send_ui_note('warning',30000,'Schedule: '+device+' '+type+' '+' turned '+powered,'123456');\n\n    device=\"Kitchen\";\n    powered=\"on\";\n    brightness=1;\n    type=\"group\";\n    WinkCMDmsg = context.global.executeWinkCMD(device,type,powered,brightness);\n    node.send(WinkCMDmsg);\n    WinkCMDmsg = send_ui_note('warning',30000,'Schedule: '+device+' '+type+' '+' turned '+powered,'123456');\n}\n\n// And completely off at 10pm.\nif(hours==22 && minutes==00) //Great Room and Kitchen off @ 10:00pm\n{\n    device=\"Great Room\";\n    powered=\"off\";\n    brightness=0;\n    type=\"group\";\n    WinkCMDmsg = context.global.executeWinkCMD(device,type,powered,brightness);\n    node.send(WinkCMDmsg);\n    WinkCMDmsg = send_ui_note('warning',30000,'Schedule: '+device+' '+type+' '+' turned '+powered,'123456');\n\n    device=\"Kitchen\";\n    powered=\"off\";\n    brightness=0;\n    type=\"group\";\n    WinkCMDmsg = context.global.executeWinkCMD(device,type,powered,brightness);\n    node.send(WinkCMDmsg);\n    WinkCMDmsg = send_ui_note('warning',30000,'Schedule: '+device+' '+type+' '+' turned '+powered,'123456');\n}\n\n// Here is a little more complex example -- I have a group which is only turned on during the week days.\n// intday is a value 0 through 6. 0 is Sunday, 1 is Monday, 2 is Tuesday, etc.\nif(hours==5 && minutes==30 && intday!==0 && intday!=6) //Only certain lights on 10% @ 5:30am Weekdays\n{\n    device=\"Angie Family Room\";\n    powered=\"on\";\n    brightness=10;\n    type=\"light\"; // We're triggering an individual light in this case, not a group\n    WinkCMDmsg = context.global.executeWinkCMD(device,type,powered,brightness);\n    node.send(WinkCMDmsg);\n    WinkCMDmsg = send_ui_note('warning',30000,'Schedule: '+device+' '+type+' '+' turned '+powered,'123456');\n\n    device=\"Kitchen Globe\";\n    powered=\"on\";\n    brightness=10;\n    type=\"light\"; // Another individual light\n    WinkCMDmsg = context.global.executeWinkCMD(device,type,powered,brightness);\n    node.send(WinkCMDmsg);\n    WinkCMDmsg = send_ui_note('warning',30000,'Schedule: '+device+' '+type+' '+' turned '+powered,'123456');\t\n}\n\n// Here we turn on the lights only Monday through Friday at 7am.\nif(hours==7 && minutes==00 && intday!==0 && intday!=6) //Great Room and Kitchen on 50% @ 7am Weekdays\n{\n    device=\"Great Room\";\n    powered=\"on\";\n    brightness=50;\n    type=\"group\";\n    WinkCMDmsg = context.global.executeWinkCMD(device,type,powered,brightness);\n    node.send(WinkCMDmsg);\n    WinkCMDmsg = send_ui_note('warning',30000,'Schedule: '+device+' '+type+' '+' turned '+powered,'123456');\n\n    device=\"Kitchen\";\n    powered=\"on\";\n    brightness=50;\n    type=\"group\";\n    WinkCMDmsg = context.global.executeWinkCMD(device,type,powered,brightness);\n    node.send(WinkCMDmsg);\n    WinkCMDmsg = send_ui_note('warning',30000,'Schedule: '+device+' '+type+' '+' turned '+powered,'123456');\n}\n\n// And turn them off Monday through Friday at 8am.\nif(hours==8 && minutes==00 && intday!==0 && intday!=6) //Great Room and Kitchen off @ 8am Weekdays\n{\n    device=\"Great Room\";\n    powered=\"off\";\n    brightness=0;\n    type=\"group\";\n    WinkCMDmsg = context.global.executeWinkCMD(device,type,powered,brightness);\n    node.send(WinkCMDmsg);\n    WinkCMDmsg = send_ui_note('warning',30000,'Schedule: '+device+' '+type+' '+' turned '+powered,'123456');\n\n    device=\"Kitchen\";\n    powered=\"off\";\n    brightness=0;\n    type=\"group\";\n    WinkCMDmsg = context.global.executeWinkCMD(device,type,powered,brightness);\n    node.send(WinkCMDmsg);\n    WinkCMDmsg = send_ui_note('warning',30000,'Schedule: '+device+' '+type+' '+' turned '+powered,'123456');\n}\n\n// Turn the binary switch on at a specific time.\nif(hours==5 && minutes==25) //Aquarium Light On\n{\n    device=\"Aquarium Light\";\n    powered=\"on\";\n    type=\"light\";\n    brightness=\"\";\n    WinkCMDmsg = context.global.executeWinkCMD(device,type,powered,brightness);\n    node.send(WinkCMDmsg);\n    WinkCMDmsg = send_ui_note('warning',30000,'Schedule: '+device+' '+type+' '+' turned '+powered,'123456');\n}\n\n// Turn the binary switch off at a specific time.\nif(hours==22 && minutes==30) //Aquarium Light Off\n{\n    device=\"Aquarium Light\";\n    powered=\"off\";\n    type=\"light\";\n    brightness=\"\";\n    WinkCMDmsg = context.global.executeWinkCMD(device,type,powered,brightness);\n    node.send(WinkCMDmsg);\n    WinkCMDmsg = send_ui_note('warning',30000,'Schedule: '+device+' '+type+' '+' turned '+powered,'123456');\n}\n\n// This is my test schedule for groups. If I ever want to test a group, I can come to this if statement and change it to 1==1.\n// Obviously, changing it back to 1!==1 stops it from triggering.\nif(1!==1) // Test Group Change\n{\n    device=\"Kitchen\";\n    powered=\"off\";\n    brightness=0;\n    type=\"group\";\n    WinkCMDmsg = context.global.executeWinkCMD(device,type,powered,brightness);\n    node.send(WinkCMDmsg);\n    WinkCMDmsg = send_ui_note('warning',30000,'Schedule: '+device+' '+type+' '+' turned '+powered,'123456');\n}\n\n// This is another test schedule for individual lightbulbs.\nif(1!==1) // Test Light Bulb Change\n{\n    device=\"Brian family room\";\n    powered=\"on\";\n    brightness=10;\n    type=\"light\";\n    WinkCMDmsg = context.global.executeWinkCMD(device,type,powered,brightness);\n    node.send(WinkCMDmsg);\n    WinkCMDmsg = send_ui_note('warning',30000,'Schedule: '+device+' '+type+' '+' turned '+powered,'123456');\n}\n\n// Lastly, my test schedule for switches.\nif(1!==1) // Test Switch Change\n{\n    device=\"Aquarium Light\";\n    powered=\"on\";\n    type=\"light\";\n    brightness=0;\n    WinkCMDmsg = context.global.executeWinkCMD(device,type,powered,brightness);\n    node.send(WinkCMDmsg);\n    WinkCMDmsg = send_ui_note('warning',30000,'Schedule: '+device+' '+type+' '+' turned '+powered,'123456');\n}\n\n// *KEEP THESE LINES BELOW*\nreturn WinkCMDmsg;",
    "outputs": "1",
    "noerr": 0,
    "x": 261.1666564941406,
    "y": 80,
    "wires": [
      [
        "7360009d.8ca",
        "108d06f7.ef72f9"
      ]
    ]
  },
  {
    "id": "4717f112.b8e81",
    "type": "inject",
    "z": "47c504f6.b83afc",
    "name": "",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "repeat": "60",
    "crontab": "",
    "once": true,
    "x": 89.5,
    "y": 80,
    "wires": [
      [
        "96a37e7f.695c8"
      ]
    ]
  },
  {
    "id": "d8ab1953.2754e8",
    "type": "comment",
    "z": "47c504f6.b83afc",
    "name": "Schedule: Uses if statements to match various time-driven profiles",
    "info": "",
    "x": 250.5,
    "y": 39,
    "wires": []
  },
  {
    "id": "eb9e2a8b.1461d8",
    "type": "comment",
    "z": "47c504f6.b83afc",
    "name": "Click the \"button\" on the right of the debug node if you want to turn this debug on. --^",
    "info": "",
    "x": 330.5,
    "y": 150,
    "wires": []
  },
  {
    "id": "183978f0.e7c687",
    "type": "comment",
    "z": "47c504f6.b83afc",
    "name": "Double click to edit --^",
    "info": "",
    "x": 210,
    "y": 116,
    "wires": []
  },
  {
    "id": "7360009d.8ca",
    "type": "http request",
    "z": "47c504f6.b83afc",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 516,
    "y": 80,
    "wires": [
      []
    ]
  },
  {
    "id": "108d06f7.ef72f9",
    "type": "debug",
    "z": "47c504f6.b83afc",
    "name": "",
    "active": true,
    "console": "false",
    "complete": "payload",
    "x": 518,
    "y": 117,
    "wires": []
  }
]
