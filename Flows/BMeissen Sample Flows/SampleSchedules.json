[
  {
    "id": "514b630a.aeb49c",
    "type": "function",
    "z": "47c504f6.b83afc",
    "name": "ScheduleLogic",
    "func": "// You shouldn't have to edit anything in this section, scroll down to line 33 for instructions on setting up your schedule logic.\nfunction send_ui_note(n_type,n_timeout,n_message,obj_id){\n    var obj=obj_id||null;\n    var newMsg={\n        url:context.global.BlueMixUrlBase+'/red/notifications',\n        \"method\": \"POST\",\n        headers: {\n            \"Authorization\":\"Bearer \"+context.global.FREEBOARD_TOKEN\n        },\n        payload:{\n            \"id\":obj,\n            \"type\":n_type,\n            \"message\":n_message,\n            \"timeout\":n_timeout\n            }\n        };\n        node.send(newMsg);\n}\nvar date = new Date(msg.payload);\nvar hours = date.getHours();\nvar minutes =date.getMinutes();\nvar intday = date.getDay();\nhours = hours + context.global.Weather.Offset;\nif (hours<0) { hours = 24+hours }\ncontext.global.timestamp=new Date(msg.payload);\nvar device = \"\";\nvar type = \"\";\nvar powered = \"\";\nvar brightness = \"\";\nvar WinkCMDmsg = \"\";\nif (typeof context.global.Schedules!=='undefined')\n{\nif(context.global.Schedules==\"on\")\n{\n// You shouldn't need to edit anything above. \n\n// Start of Scheduling Logic Instructions\n// The schedule logic can handle turning on/off Bulbs, Groups, and Switches based on specific time of day or based on sunset/sunrise.\n// To help illustrate the flexibility of the schedule logic, three schedules are included first -- one for updating a group, one for\n// updating a specific light bulb, and one for updating a binary switch. I've included a lot of example schedules as well, so you can\n// peruse the examples below to come up with your own schedules.\n//\n// **Note - check out the example on line 169 for an example of a schedule which is only triggered on weekdays. \n// \n// If you want to have any of your schedules be triggered by Sunset or Sunrise, use the following variables --\n// Sunrise: if(hours==context.global.Weather.SunriseHour && minutes==context.global.Weather.SunriseMin){ actions }\n// Sunset: if(hours==context.global.Weather.SunsetHour && minutes==context.global.Weather.SunsetMin){ actions }\n// Note: You can also offset Sunset/Sunrise by simply adding or subtracting from the value as seen below.\n\n\n// For this schedule, our trigger is 1 hour prior to sunset.\nif(hours==(context.global.Weather.SunsetHour-1) && minutes==context.global.Weather.SunsetMin) // Indoor Lights at Dusk\n{\n    device=\"Great Room\"; // In this case, we're triggering a group. Put in your group's name here.\n    powered=\"on\"; // on or off.\n    brightness=100; // Bulb brightness is from 0 (dim) to 100 (full brightness)\n    type=\"group\"; // This is used in the next step of the flow. Your options are either \"light\", \"lock\", \"group\" or \"scene\"\n    WinkCMDmsg = context.global.executeWinkCMD(device,type,powered,brightness);\n    node.send(WinkCMDmsg);\n    send_ui_note('warning',30000,'Schedule: '+device+' '+type+' '+' turned '+powered,'123456');\n\n    // I want two different groups to turn on 1 hour before sunset, so here's another group. \n    // You can have one schedule trigger multiple actions, just copy lines 50 through 56 and paste in this schedule.\n    device=\"Kitchen\"; // In this case, we're triggering a group. Put in your group's name here.\n    powered=\"on\"; // on or off\n    brightness=100; // Bulb brightness is from 0 (dim) to 100 (full brightness)\n    type=\"group\"; // This is used in the next step of the flow. Your options are either \"light\", \"lock\", \"group\" or \"scene\"\n    WinkCMDmsg = context.global.executeWinkCMD(device,type,powered,brightness);\n    node.send(WinkCMDmsg);\n    send_ui_note('warning',30000,'Schedule: '+device+' '+type+' '+' turned '+powered,'123456');\n}\n\nif(hours==(context.global.Weather.SunsetHour-1) && minutes==context.global.Weather.SunsetMin) // Front door light on at Dusk\n{\n    device=\"Front Door\"; // In this case, we're triggering a group. Put in your group's name here.\n    powered=\"on\"; // on or off.\n    brightness=10; // Bulb brightness is from 0 (dim) to 100 (full brightness)\n    type=\"light\"; // This is used in the next step of the flow. Your options are either \"light\", \"lock\", \"group\" or \"scene\"\n    WinkCMDmsg = context.global.executeWinkCMD(device,type,powered,brightness);\n    node.send(WinkCMDmsg);\n    send_ui_note('warning',30000,'Schedule: '+device+' '+type+' '+' turned '+powered,'123456');\n}\n\nif(hours==(context.global.Weather.SunriseHour+1) && minutes==context.global.Weather.SunriseMin) // Front door light off in the morning\n{\n    device=\"Front Door\"; // In this case, we're triggering a group. Put in your group's name here.\n    powered=\"off\"; // on or off.\n    brightness=100; // Bulb brightness is from 0 (dim) to 100 (full brightness)\n    type=\"light\"; // This is used in the next step of the flow. Your options are either \"light\", \"lock\", \"group\" or \"scene\"\n    WinkCMDmsg = context.global.executeWinkCMD(device,type,powered,brightness);\n    node.send(WinkCMDmsg);\n    send_ui_note('warning',30000,'Schedule: '+device+' '+type+' '+' turned '+powered,'123456');\n}\n\n// In this case, the schedule is triggered every day at 8pm.\nif(hours==20 && minutes==00) //Dim Great Room and Kitchen to 50% @ 8pm\n{\n    device=\"Great Room\";\n    powered=\"on\";\n    brightness=50;\n    type=\"group\";\n    WinkCMDmsg = context.global.executeWinkCMD(device,type,powered,brightness);\n    node.send(WinkCMDmsg);\n    send_ui_note('warning',30000,'Schedule: '+device+' '+type+' '+' turned '+powered,'123456');\n\n    device=\"Kitchen\";\n    powered=\"on\";\n    brightness=50;\n    type=\"group\";\n    WinkCMDmsg = context.global.executeWinkCMD(device,type,powered,brightness);\n    node.send(WinkCMDmsg);\n    send_ui_note('warning',30000,'Schedule: '+device+' '+type+' '+' turned '+powered,'123456');\n}\n\n// Turn on our cabinet string lights at 6pm...\nif(hours==18 && minutes==00) //Kitchen Cabinet Ambiance at 6pm\n{\n    device=\"Kitchen Cabinet Ambiance\";\n    powered=\"on\";\n    brightness=100;\n    type=\"light\";\n    WinkCMDmsg = context.global.executeWinkCMD(device,type,powered,brightness);\n    node.send(WinkCMDmsg);\n    send_ui_note('warning',30000,'Schedule: '+device+' '+type+' '+' turned '+powered,'123456');\n}\n\n// I dim the lights a little more at 8:30...\nif(hours==20 && minutes==30) //Dim Great Room and Kitchen to 35% @ 8:30pm\n{\n    device=\"Great Room\";\n    powered=\"on\";\n    brightness=35;\n    type=\"group\";\n    WinkCMDmsg = context.global.executeWinkCMD(device,type,powered,brightness);\n    node.send(WinkCMDmsg);\n    send_ui_note('warning',30000,'Schedule: '+device+' '+type+' '+' turned '+powered,'123456');\n\n    device=\"Kitchen\";\n    powered=\"on\";\n    brightness=35;\n    type=\"group\";\n    WinkCMDmsg = context.global.executeWinkCMD(device,type,powered,brightness);\n    node.send(WinkCMDmsg);\n    send_ui_note('warning',30000,'Schedule: '+device+' '+type+' '+' turned '+powered,'123456');\n}\n\n// And a little more at 9pm... Simulating a sunset inside my house...\nif(hours==21 && minutes==00) //Great Room and Kitchen to 10% brightness at 9:00pm\n{\n    device=\"Great Room\";\n    powered=\"on\";\n    brightness=10;\n    type=\"group\";\n    WinkCMDmsg = context.global.executeWinkCMD(device,type,powered,brightness);\n    node.send(WinkCMDmsg);\n    send_ui_note('warning',30000,'Schedule: '+device+' '+type+' '+' turned '+powered,'123456');\n\n    device=\"Kitchen\";\n    powered=\"on\";\n    brightness=10;\n    type=\"group\";\n    WinkCMDmsg = context.global.executeWinkCMD(device,type,powered,brightness);\n    node.send(WinkCMDmsg);\n    send_ui_note('warning',30000,'Schedule: '+device+' '+type+' '+' turned '+powered,'123456');\n}\n\n// And down to 1% at 9:30pm...\nif(hours==21 && minutes==30) //Great Room and Kitchen to 1% brightness at 9:30pm\n{\n    device=\"Great Room\";\n    powered=\"on\";\n    brightness=1;\n    type=\"group\";\n    WinkCMDmsg = context.global.executeWinkCMD(device,type,powered,brightness);\n    node.send(WinkCMDmsg);\n    send_ui_note('warning',30000,'Schedule: '+device+' '+type+' '+' turned '+powered,'123456');\n\n    device=\"Kitchen\";\n    powered=\"on\";\n    brightness=1;\n    type=\"group\";\n    WinkCMDmsg = context.global.executeWinkCMD(device,type,powered,brightness);\n    node.send(WinkCMDmsg);\n    send_ui_note('warning',30000,'Schedule: '+device+' '+type+' '+' turned '+powered,'123456');\n}\n\n// And completely off at 10pm.\nif(hours==22 && minutes==00) //Great Room and Kitchen off @ 10:00pm\n{\n    device=\"Great Room\";\n    powered=\"off\";\n    brightness=0;\n    type=\"group\";\n    WinkCMDmsg = context.global.executeWinkCMD(device,type,powered,brightness);\n    node.send(WinkCMDmsg);\n    send_ui_note('warning',30000,'Schedule: '+device+' '+type+' '+' turned '+powered,'123456');\n\n    device=\"Kitchen\";\n    powered=\"off\";\n    brightness=0;\n    type=\"group\";\n    WinkCMDmsg = context.global.executeWinkCMD(device,type,powered,brightness);\n    node.send(WinkCMDmsg);\n    send_ui_note('warning',30000,'Schedule: '+device+' '+type+' '+' turned '+powered,'123456');\n    \n    device=\"Kitchen Cabinet Ambiance\";\n    powered=\"off\";\n    brightness=0;\n    type=\"light\";\n    WinkCMDmsg = context.global.executeWinkCMD(device,type,powered,brightness);\n    node.send(WinkCMDmsg);\n    send_ui_note('warning',30000,'Schedule: '+device+' '+type+' '+' turned '+powered,'123456');\n}\n\n// Here is a little more complex example -- I have a group which is only turned on during the week days.\n// intday is a value 0 through 6. 0 is Sunday, 1 is Monday, 2 is Tuesday, etc.\nif(hours==5 && minutes==30 && intday!==0 && intday!=6) //Only certain lights on 10% @ 5:30am Weekdays\n{\n    device=\"Angie Family Room\";\n    powered=\"on\";\n    brightness=10;\n    type=\"light\"; // We're triggering an individual light in this case, not a group\n    WinkCMDmsg = context.global.executeWinkCMD(device,type,powered,brightness);\n    node.send(WinkCMDmsg);\n    send_ui_note('warning',30000,'Schedule: '+device+' '+type+' '+' turned '+powered,'123456');\n\n    device=\"Kitchen Globe\";\n    powered=\"on\";\n    brightness=10;\n    type=\"light\"; // Another individual light\n    WinkCMDmsg = context.global.executeWinkCMD(device,type,powered,brightness);\n    node.send(WinkCMDmsg);\n    send_ui_note('warning',30000,'Schedule: '+device+' '+type+' '+' turned '+powered,'123456');\t\n}\n\n// Here we turn on the lights only Monday through Friday at 7am.\nif(hours==7 && minutes==00 && intday!==0 && intday!=6) //Great Room and Kitchen on 50% @ 7am Weekdays\n{\n    device=\"Great Room\";\n    powered=\"on\";\n    brightness=50;\n    type=\"group\";\n    WinkCMDmsg = context.global.executeWinkCMD(device,type,powered,brightness);\n    node.send(WinkCMDmsg);\n    send_ui_note('warning',30000,'Schedule: '+device+' '+type+' '+' turned '+powered,'123456');\n\n    device=\"Kitchen\";\n    powered=\"on\";\n    brightness=50;\n    type=\"group\";\n    WinkCMDmsg = context.global.executeWinkCMD(device,type,powered,brightness);\n    node.send(WinkCMDmsg);\n    send_ui_note('warning',30000,'Schedule: '+device+' '+type+' '+' turned '+powered,'123456');\n}\n\n// And turn them off Monday through Friday at 8am.\nif(hours==8 && minutes==00 && intday!==0 && intday!=6) //Great Room and Kitchen off @ 8am Weekdays\n{\n    device=\"Great Room\";\n    powered=\"off\";\n    brightness=0;\n    type=\"group\";\n    WinkCMDmsg = context.global.executeWinkCMD(device,type,powered,brightness);\n    node.send(WinkCMDmsg);\n    send_ui_note('warning',30000,'Schedule: '+device+' '+type+' '+' turned '+powered,'123456');\n\n    device=\"Kitchen\";\n    powered=\"off\";\n    brightness=0;\n    type=\"group\";\n    WinkCMDmsg = context.global.executeWinkCMD(device,type,powered,brightness);\n    node.send(WinkCMDmsg);\n    send_ui_note('warning',30000,'Schedule: '+device+' '+type+' '+' turned '+powered,'123456');\n}\n\n// Turn the binary switch on at a specific time.\nif(hours==5 && minutes==25) //Aquarium Light On\n{\n    device=\"Aquarium Light\";\n    powered=\"on\";\n    type=\"light\";\n    brightness=\"\";\n    WinkCMDmsg = context.global.executeWinkCMD(device,type,powered,brightness);\n    node.send(WinkCMDmsg);\n    send_ui_note('warning',30000,'Schedule: '+device+' '+type+' '+' turned '+powered,'123456');\n}\n\n// Turn the binary switch off at a specific time.\nif(hours==22 && minutes==30) //Aquarium Light Off\n{\n    device=\"Aquarium Light\";\n    powered=\"off\";\n    type=\"light\";\n    brightness=\"\";\n    WinkCMDmsg = context.global.executeWinkCMD(device,type,powered,brightness);\n    node.send(WinkCMDmsg);\n    send_ui_note('warning',30000,'Schedule: '+device+' '+type+' '+' turned '+powered,'123456');\n}\n\n// This schedule will only fire off if the precipType is Rain and if the hours are between Sunrise and Sunset.\n// Since we only want this to fire once when it's raining and not every minute, first we have the below if statement as a flag.\n// If it's not rainy outside, set RainSchedule=0.\nif (context.global.Weather.currently.precipType!==\"rain\")\n{\n    context.global.RainSchedule=0\n}\n\n// Next we have the actual schedule -- this only triggers if it's rainy outside and it's between Sunrise and Sunset hours.\nif (context.global.Weather.currently.precipType==\"rain\" && hours > context.global.Weather.SunriseHour-1 && hours < context.global.Weather.SunsetHour+1)\n{\n    if(typeof context.global.RainSchedule==='undefined')\n    { \n        context.global.RainSchedule=0\n    }\n    \n    if (context.global.RainSchedule===0)\n    {\n        // Put your code here\n        node.warn(\"Rain Schedule Triggered\");\n        context.global.RainSchedule=1;\n        \n        device=\"Brian Family Room\";\n        powered=\"on\";\n        brightness=10;\n        type=\"light\";\n        WinkCMDmsg = context.global.executeWinkCMD(device,type,powered,brightness);\n        node.send(WinkCMDmsg);\n        send_ui_note('warning',30000,'Schedule: '+device+' '+type+' '+' turned '+powered,'123456');\n\n    }\n}\n\n// This is my test schedule for groups. If I ever want to test a group, I can come to this if statement and change it to 1==1.\n// Obviously, changing it back to 1!==1 stops it from triggering.\nif(1!==1) // Test Group Change\n{\n    device=\"Kitchen\";\n    powered=\"off\";\n    brightness=0;\n    type=\"group\";\n    WinkCMDmsg = context.global.executeWinkCMD(device,type,powered,brightness);\n    node.send(WinkCMDmsg);\n    send_ui_note('warning',30000,'Schedule: '+device+' '+type+' '+' turned '+powered,'123456');\n}\n\n// This is another test schedule for individual lightbulbs.\nif(1!==1) // Test Light Bulb Change\n{\n    device=\"Brian Family Room\";\n    powered=\"off\";\n    brightness=100;\n    type=\"light\";\n    WinkCMDmsg = context.global.executeWinkCMD(device,type,powered,brightness);\n    node.send(WinkCMDmsg);\n    send_ui_note('warning',30000,'Schedule: '+device+' '+type+' '+' turned '+powered,'123456');\n}\n\n// Lastly, my test schedule for switches.\nif(1!==1) // Test Switch Change\n{\n    device=\"Aquarium Light\";\n    powered=\"on\";\n    type=\"light\";\n    brightness=0;\n    WinkCMDmsg = context.global.executeWinkCMD(device,type,powered,brightness);\n    node.send(WinkCMDmsg);\n    send_ui_note('warning',30000,'Schedule: '+device+' '+type+' '+' turned '+powered,'123456');\n}\n// *KEEP THESE LINES BELOW*\n}\n}\nreturn;",
    "outputs": "1",
    "noerr": 0,
    "x": 237.16665649414062,
    "y": 59,
    "wires": [
      [
        "8b86d038.74793"
      ]
    ]
  },
  {
    "id": "2bd998c8.d42668",
    "type": "inject",
    "z": "47c504f6.b83afc",
    "name": "Inject",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "repeat": "60",
    "crontab": "",
    "once": true,
    "x": 79.5,
    "y": 59,
    "wires": [
      [
        "514b630a.aeb49c"
      ]
    ]
  },
  {
    "id": "9537022f.6ac9",
    "type": "comment",
    "z": "47c504f6.b83afc",
    "name": "Schedule: Uses if statements to match various time-driven profiles",
    "info": "",
    "x": 245,
    "y": 24,
    "wires": []
  },
  {
    "id": "4ae49382.b51b6c",
    "type": "comment",
    "z": "47c504f6.b83afc",
    "name": "Click the \"button\" on the right of the debug node if you want to turn this debug on. --^",
    "info": "",
    "x": 405.5,
    "y": 128,
    "wires": []
  },
  {
    "id": "2f05279f.d0fad8",
    "type": "comment",
    "z": "47c504f6.b83afc",
    "name": "Double click \"ScheduleLogic\" to edit ---^",
    "info": "",
    "x": 165,
    "y": 93,
    "wires": []
  },
  {
    "id": "ddf2e6e0.220d18",
    "type": "http request",
    "z": "47c504f6.b83afc",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 594,
    "y": 59,
    "wires": [
      []
    ]
  },
  {
    "id": "6bbe1798.9441e8",
    "type": "debug",
    "z": "47c504f6.b83afc",
    "name": "",
    "active": true,
    "console": "false",
    "complete": "payload",
    "x": 594,
    "y": 93,
    "wires": []
  },
  {
    "id": "7e14286.f81ebd8",
    "type": "inject",
    "z": "47c504f6.b83afc",
    "name": "Inject",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "repeat": "",
    "crontab": "",
    "once": true,
    "x": 109,
    "y": 241,
    "wires": [
      [
        "c19f4e2.f3e60b"
      ]
    ]
  },
  {
    "id": "fd848084.027b8",
    "type": "comment",
    "z": "47c504f6.b83afc",
    "name": "v--- Inject this flow to turn Schedules on",
    "info": "",
    "x": 155,
    "y": 207,
    "wires": []
  },
  {
    "id": "c19f4e2.f3e60b",
    "type": "function",
    "z": "47c504f6.b83afc",
    "name": "Turn Schedules on",
    "func": "context.global.Schedules=\"on\";\nnode.warn(\"Schedules turned on\");\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 271,
    "y": 241,
    "wires": [
      []
    ]
  },
  {
    "id": "4e7d20dc.b182e",
    "type": "comment",
    "z": "47c504f6.b83afc",
    "name": "v--- Inject this node to turn Schedules off",
    "info": "",
    "x": 165,
    "y": 301,
    "wires": []
  },
  {
    "id": "73d80245.8c27fc",
    "type": "inject",
    "z": "47c504f6.b83afc",
    "name": "Inject",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "repeat": "",
    "crontab": "",
    "once": false,
    "x": 108,
    "y": 334,
    "wires": [
      [
        "bacc7549.453388"
      ]
    ]
  },
  {
    "id": "bacc7549.453388",
    "type": "function",
    "z": "47c504f6.b83afc",
    "name": "Turn Schedules off",
    "func": "context.global.Schedules=\"off\";\nnode.warn(\"Schedules turned off\");\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 270,
    "y": 334,
    "wires": [
      []
    ]
  },
  {
    "id": "8b86d038.74793",
    "type": "function",
    "z": "47c504f6.b83afc",
    "name": "Blank",
    "func": "// This function is purposely blank.\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 400,
    "y": 59,
    "wires": [
      [
        "6bbe1798.9441e8",
        "51b8d019.ae473"
      ]
    ]
  },
  {
    "id": "d3c5e75f.2c3a18",
    "type": "inject",
    "z": "47c504f6.b83afc",
    "name": "",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "repeat": "",
    "crontab": "",
    "once": false,
    "x": 116,
    "y": 462,
    "wires": [
      [
        "bd7216a5.428de8"
      ]
    ]
  },
  {
    "id": "bd7216a5.428de8",
    "type": "function",
    "z": "47c504f6.b83afc",
    "name": "",
    "func": "msg.payload=context.global.Schedules;\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 249,
    "y": 461,
    "wires": [
      [
        "f86c96ff.079368"
      ]
    ]
  },
  {
    "id": "f86c96ff.079368",
    "type": "debug",
    "z": "47c504f6.b83afc",
    "name": "",
    "active": true,
    "console": "false",
    "complete": "false",
    "x": 400,
    "y": 467,
    "wires": []
  },
  {
    "id": "51b8d019.ae473",
    "type": "delay",
    "z": "47c504f6.b83afc",
    "name": "",
    "pauseType": "rate",
    "timeout": "5",
    "timeoutUnits": "seconds",
    "rate": "1",
    "rateUnits": "second",
    "randomFirst": "1",
    "randomLast": "5",
    "randomUnits": "seconds",
    "drop": false,
    "x": 500,
    "y": 206,
    "wires": [
      [
        "ddf2e6e0.220d18"
      ]
    ]
  }
]
