[
  {
    "id": "489ab0b4.b7655",
    "type": "http in",
    "z": "f17c0cb2.0e83f",
    "name": "",
    "url": "/red/robots",
    "method": "post",
    "swaggerDoc": "",
    "x": 85,
    "y": 20,
    "wires": [
      [
        "ea1236e2.15edc8"
      ]
    ]
  },
  {
    "id": "ff10e5d2.00ef18",
    "type": "comment",
    "z": "f17c0cb2.0e83f",
    "name": "^---- Update the \"Robots\" node to program your robots.",
    "info": "",
    "x": 544,
    "y": 100,
    "wires": []
  },
  {
    "id": "18de37a7.e721c8",
    "type": "http request",
    "z": "f17c0cb2.0e83f",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 602,
    "y": 61,
    "wires": [
      [
        "94bdb82e.6b4248"
      ]
    ]
  },
  {
    "id": "94bdb82e.6b4248",
    "type": "debug",
    "z": "f17c0cb2.0e83f",
    "name": "",
    "active": false,
    "console": "false",
    "complete": "false",
    "x": 777,
    "y": 61,
    "wires": []
  },
  {
    "id": "ea1236e2.15edc8",
    "type": "function",
    "z": "f17c0cb2.0e83f",
    "name": "",
    "func": "if(msg.req.headers.authorization && msg.req.headers.authorization==\"Bearer \"+context.global.FREEBOARD_TOKEN){\nmsg.StatusCode=\"200\";\n//if ('camera_name' in msg.payload && msg.payload.camera_name!=='undefined') msg.payload.camera_name=msg.req.body.camera_name\n} else {\nmsg.StatusCode=\"403\";\n}\n\nif (msg.StatusCode==\"200\")\n{\n    return [msg, msg];\n}\nelse { \n    return [msg];\n}",
    "outputs": "2",
    "noerr": 0,
    "x": 247,
    "y": 20,
    "wires": [
      [
        "4e3e80f7.b1c18"
      ],
      [
        "38a0418b.c75fbe",
        "8a46b55d.75b948"
      ]
    ]
  },
  {
    "id": "4e3e80f7.b1c18",
    "type": "http response",
    "z": "f17c0cb2.0e83f",
    "name": "",
    "x": 385,
    "y": 20,
    "wires": []
  },
  {
    "id": "38a0418b.c75fbe",
    "type": "debug",
    "z": "f17c0cb2.0e83f",
    "name": "",
    "active": false,
    "console": "false",
    "complete": "payload",
    "x": 179,
    "y": 135,
    "wires": []
  },
  {
    "id": "8a46b55d.75b948",
    "type": "function",
    "z": "f17c0cb2.0e83f",
    "name": "Robots",
    "func": "// ------------------------------------------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------------------------------------------\n// Scheduling Logic by Brian Meissen --------------------------------------------------------------------------------------------\n//         Version 3/22/2015            -----------------------------------------------------------------------------------------\n// Do not edit the code below until you get to line 25 \"Start of Robot Logic Instructions\" ---------------------------------\n// ------------------------------------------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------------------------------------------\n\n// Variable definitions\nvar device=\"\";\nvar type=\"\";\nvar brightness=\"\";\ndate=new Date();\nif (typeof context.global.schedulesRunning=='undefined'){context.global.schedulesRunning=false;}\n \nif ('useRobots' in context.global && context.global.useRobots) {\n    var WinkCMDmsg = \"\";\n    // Import changed data into a local variable for ease of use\n    changed = msg.payload;\n    // All robots are \"if statements\"\n    // Use the examples below to create your own robots -- you can have multiple conditions as seen below.\n\n// ------------------------------------------------------------------------------------------------------------------------------\n// Start of Robot Logic Instructions --------------------------------------------------------------------------------------------\n// If you know what you're doing, you can delete everything after this for your custom robots. ----------------------------------\n// Additionally, if you're updating the Robots flow, you can paste your robots between this section and the \"Do Not Edit\" section\n// that's at the bottom. --------------------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------------------------------------------\n\n    // Intro:\n    // Robots have 3 default conditions:\n    // changed.name -- This is the name of the device which changed. **THIS IS CASE SENSITIVE**\n    // changed.new_state -- obviously, this is the new state. **THIS IS CASE SENSITIVE**\n    // changed.old_state -- obviously as well, this is the device's old state. **THIS IS CASE SENSITIVE**\n    // A 'basic' conditional statement will look like this:\n    // if (changed.name == \"My Device\" && changed.old_state==\"Opened\" && changed.new_state==\"Closed\")\n    // This is saying if \"My Device\" changes from Opened to Closed. e.g. My Device is a tripper and the door/window closed.\n    // It's important to always include both old_state and new_state -- this ensures that you're only triggering when the device\n    // changes state. Next let's look at some of my example flows so you can see more complex examples.\n\n    // Scenario #1: Let's start with an 'easy' robot. In this case, I want to turn on some lights when a tripper opens.\n    // Note we have the name, old_state, and new_state in our condition statement. These are the 3 basic conditions.\n    // In subsequent scenarios we'll see more complex conditions and we'll really see how Wink Node Red shines!!\n    if (changed.name==\"Basement Door\" && changed.old_state!==\"Opened\" && changed.new_state==\"Opened\" )\n    {\n        // So here is your basic structure for the action of your robots.\n        // When creating new robots, copy the format below. You always want to \"try\" then \"catch any errors\"\n        // Refer to other examples below where there's not as many comments which will be easier to copy and paste.\n        // My three actions are to turn on Basement Stairs, turn on Basement Lights, and then send the note to the Event Log in Tablet UI.\n        try {\n            node.send(context.global.executeWinkCMD(\"Basement Stairs\",\"light\",\"on\",\"100\"));\n            node.send(context.global.executeWinkCMD(\"Basement Lights\",\"light\",\"on\",\"100\"));\n            node.send(context.global.send_ui_note('information',60000,'Robot Triggered - Basement Lights on when Door Opened',Math.floor(Math.random()*1000)));\n        }\n        catch(error){\n            node.warn(error.message);\n        }\n    }\n\n    // Scenario #2: Now let's get more complicated!!!!\n    // I have motion sensors which I only want to trigger when it's night time. I'm going to use a global variable\n    // which is available under context.global.Weather (you can toss that variable into my ExposeVariables flow to see all the\n    // variables under context.global.Weather). So our first if statement is if timeframe == \"NIGHT\" ...\n    // If timeframe doesn't equal \"NIGHT\" then we'll skip this if statement.\n    if (context.global.Weather.timeframe==\"NIGHT\"){\n        \n        // Next, I'm creating a switch statement based on changed.name. If you're not familiar\n        // with switch statements, do a google search for javascript switch case.\n        switch(changed.name){\n            \n            // case is used for each possible match. e.g. if changed.name == \"Foyer Motion Sensor\"\n            // So if the devices IS \"Foyer Motion Sensor\" then I'm putting the device I want to change\n            // into the device variable, that it's a group into the type variable, and the brightness\n            // for the bulb into the brightness variable. The \"break;\" command escapes from the switch\n            // statement.\n            case \"Foyer Motion Sensor\":\n                device=\"Foyer Light\";\n                type=\"group\";\n                brightness=\"50\";\n                break;\n                \n            case \"Hallway Sensor\":\n                device=\"Hallway\";\n                type=\"light\";\n                brightness=\"50\";\n                break;\n        }\n        \n        // So now that we're done with the Switch statement, we're checking if device and type are filled in.\n        // If device and type doesn't equal blank, that means that our changed.name was Foyer Motion Sensor or\n        // the Hallway Sensor. Otherwise, if device or type is still blank then we'll skip this chunk of code.\n        if(device!==\"\" && type!==\"\")\n        {\n            // So device and type were not blank, that means Foyer or Hallway motion sensors were triggered!!!\n            // Next we want to know whether the motion sensor was false (no motion) or true (motion detected).\n            // I will point out that you can also just use \"if (changed.new_state){\" without the \"===true\" as\n            // the true would be implied in that case. Personal opinion, I just wanted to make sure ===true was in there.\n            if (changed.new_state===true){\n                try {\n                    // In my personal case, when my motion sensors no longer detect motion I have them use the \"fadeout\" effect. It's\n                    // just a nice way to have the lights gradually dim before turning off. Because of this, I have a \"clearAllIntervals()\"\n                    // command when motion is detected so that my lights will stop dimming.\n                    context.global.clearAllIntervals();\n                    \n                    // These two lines are usually going to be the default lines in every robot.\n                    // Line 1 sends the command to Wink's API to update the device specified in the above Switch statement.\n                    // Line 2 sends an event to the Tablet UI event log that the robot was triggered.\n                    node.send(context.global.executeWinkCMD(device,type,\"on\",brightness));\n                    node.send(context.global.send_ui_note('information',60000,'Robot Triggered - '+changed.name+' on when Motion Detected',Math.floor(Math.random()*1000)));\n                }\n                // This statement below basically says if there's any errors then put a warning message in the Debug pane of Wink Node Red application.\n                catch(error){\n                    node.warn(message);\n                }    \n            }\n            // This else statement means if changed.new_state doesn't equal true (which would mean then that it's false...)\n            // The structure below is the same as above. We try two commands first, else catch errors.\n            else {\n                try {\n                    node.send(context.global.executeWinkCMD(device,type,\"off\",0));\n                    node.send(context.global.send_ui_note('information',60000,'Robot Triggered - '+changed.name+' off no motion detected',Math.floor(Math.random()*1000)));\n                }\n                catch(error){\n                    node.warn(message);\n                }\n            }\n        }\n    }\n    \n    // Scenario #3: Very similar to above, BUT this condition also relies on a global variable I'm using in my schedules.\n    // Starting at dusk, I have all of the lights in the general living areas turn on. Through the evening the lights dim\n    // until they completely turn off around 11pm. (See my \"Schedules\" sample flow for more info)\n    // Because these lights are gradually dimming on their own, I don't want the motion sensors in these rooms to trigger until\n    // the schedules have turned off - i.e. after 11pm. Otherwise, I won't comment as much through here because it's the same\n    // structure as the if statement above.\n    if (context.global.Weather.timeframe==\"NIGHT\" && context.global.schedulesRunning===false){\n        switch(changed.name){\n            case \"Kitchen Motion Sensor\":\n                device=\"Kitchen\";\n                type=\"group\";\n                brightness=\"50\";\n                break;\n\n            case \"Great Room Sensor\":\n                device=\"Ambiance\";\n                type=\"group\";\n                brightness=\"100\";\n                break;\n        }\n        \n        if(device!==\"\" && type!==\"\")\n        {\n            if (changed.new_state===true){\n                try {\n                    node.send(context.global.executeWinkCMD(device,type,\"on\",brightness));\n                    node.send(context.global.send_ui_note('information',60000,'Robot Triggered - '+changed.name+' on when Motion Detected',Math.floor(Math.random()*1000)));\n                }\n                catch(error){\n                    node.warn(message);\n                }    \n            }\n            else {\n                try {\n                    node.send(context.global.executeWinkCMD(device,type,\"off\",0));\n                    node.send(context.global.send_ui_note('information',60000,'Robot Triggered - '+changed.name+' on when no motion detected',Math.floor(Math.random()*1000)));\n                }\n                catch(error){\n                    node.warn(message);\n                }\n            }\n        }\n    }\n    \n    // Scenario #4: So remember when we turned on the basement lights in Scenario #1? Thanks to my 13 month old, I always have to close the door behind me\n    // but I don't want the lights to turn off just because I closed the door. Instead, I want motion sensors down in the basement to dictate when to turn\n    // the lights off. In this example, I don't want the lights to turn off until about 30 minutes after motion is no longer detected.\n    if (changed.name==\"Basement Motion Sensor\" && changed.old_state!==false && changed.new_state===false)\n    {\n        var timerBasementMotion = setTimeout(function()\n            {\n                if(context.global.winkState.sensor_pods['Basement Motion Sensor'].motion===false && context.global.winkState.sensor_pods['Workshop Motion Sensor'].motion===false)\n                {\n                    try {\n                        node.send(context.global.executeWinkCMD(\"Basement Stairs\",\"light\",\"off\",\"0\"));\n                        node.send(context.global.executeWinkCMD(\"Basement Lights\",\"light\",\"off\",\"0\"));\n                        node.send(context.global.send_ui_note('information',60000,'Robot Triggered - Basement Lights off after 10 minutes no motion',Math.floor(Math.random()*1000)));\n                    }\n                    catch(error){\n                        node.warn(error.message);\n                    }\n                }\n            },1800000);\n    }\n    \n    // Scenario #5: So for whatever reason, let's assume motion wasn't detected for 30 minutes but I'm still downstairs. Now I want the lights back on!\n    if (changed.name==\"Basement Motion Sensor\" && changed.old_state!==true && changed.new_state===true)\n    {\n        try {\n            node.send(context.global.executeWinkCMD(\"Basement Stairs\",\"light\",\"on\",\"100\"));\n            node.send(context.global.executeWinkCMD(\"Basement Lights\",\"light\",\"on\",\"100\"));\n            node.send(context.global.send_ui_note('information',60000,'Robot Triggered - Basement on when Motiong Detected',Math.floor(Math.random()*1000)));\n        }\n        catch(error){\n            node.warn(error.message);\n        }\n    }\n\n    // Scenario #6: Same situation as the basement motion sensor -- but we'll only leave the workshop lights on for 10 minutes after motion\n    // since I make a lot of quick runs down to the workshop to grab something and then run back upstairs.\n    if (changed.name==\"Workshop Motion Sensor\" && changed.old_state!==false && changed.new_state===false)\n    {\n        var timerWorkshopMotion = setTimeout(function()\n        {\n            if(context.global.winkState.sensor_pods['Workshop Motion Sensor'].motion===false){\n                try {\n                    node.send(context.global.executeWinkCMD(\"Workshop\",\"light\",\"off\",\"0\"));\n                    node.send(context.global.send_ui_note('information',60000,'Robot Triggered - Workshop Lights off when No Motion',Math.floor(Math.random()*1000)));\n                }\n                catch(error){\n                    node.warn(error.message);\n                }\n            }\n        },600000);\n    }\n\n    // Scenario #7: If motion, turn on light.\n    if (changed.name==\"Workshop Motion Sensor\" && changed.old_state!==true && changed.new_state===true)\n    {\n        try {\n            node.send(context.global.executeWinkCMD(\"Workshop\",\"light\",\"on\",\"100\"));\n            node.send(context.global.send_ui_note('information',60000,'Robot Triggered - Workshop Lights on when Motion Detected',Math.floor(Math.random()*1000)));\n        }\n        catch(error){\n            node.warn(error.message);\n        }\n    }\n    \n    // Scenario #8: Alright I think you guys are getting the idea by now. But here's a tripper robot!!\n    // Note that trippers use Opened and Closed (case sensitive!)\n    if (changed.name==\"Office Doors\" && changed.old_state!==\"Opened\" && changed.new_state==\"Opened\" )\n    {\n        try {\n            node.send(context.global.executeWinkCMD(\"Office Light\",\"light\",\"on\",\"100\"));\n            node.send(context.global.send_ui_note('information',60000,'Robot Triggered - Office Lights on when Door Opened',Math.floor(Math.random()*1000)));\n        }\n        catch(error){\n            node.warn(error.message);\n        }\n    }\n    \n    // Scenario #9: Same as the basement door, I typically close the door behind me when I'm sitting in the office. This is my safety catch\n    // robot which triggers in case I close the door and motion wasn't detected.\n    if (changed.name==\"Office Doors\" && changed.old_state!==\"closed\" && changed.new_state==\"Closed\" && context.global.winkState.sensor_pods['Office Motion Sensor'].motion===false)\n    {\n        try {\n            node.send(context.global.executeWinkCMD(\"Office Light\",\"light\",\"off\",\"0\"));\n            node.send(context.global.send_ui_note('information',60000,'Robot Triggered - Office Lights off when Door Closed and No Motion',Math.floor(Math.random()*1000)));\n        }\n        catch(error){\n            node.warn(error.message);\n        }\n    }\n\n    // Scenario #10: Turn lights on when motion detected.\n    if (changed.name==\"Office Motion Sensor\" && changed.old_state===false && changed.new_state===true)\n    {\n        try {\n            node.send(context.global.executeWinkCMD(\"Office Light\",\"light\",\"on\",\"100\"));\n            node.send(context.global.send_ui_note('information',60000,'Robot Triggered - Office Lights on when Motion detected',Math.floor(Math.random()*1000)));\n        }\n        catch(error){\n            node.warn(error.message);\n        }\n    }    \n\n    // Scenario #11: I think we get the point by now, right? Ah well, if not - here's another scenario! Like the basement door, I have\n    // to keep this shut because of my 13 month old. I don't want the lights to turn off until 30 minutes after motion is no longer detected.\n    // I also don't want this to trigger if the door was left open -- that would mean I'm going in and out of the room!\n    if (changed.name==\"Office Motion Sensor\" && changed.old_state===true && changed.new_state===false && context.global.winkState.sensor_pods['Office Doors'].opened===false)\n    {\n        var timerOfficeMotion = setTimeout(function()\n            {\n                if(context.global.winkState.sensor_pods['Office Motion Sensor'].motion===false)\n                {\n                    try {\n                        node.send(context.global.executeWinkCMD(\"Office Light\",\"light\",\"off\",\"0\"));\n                        node.send(context.global.send_ui_note('information',60000,'Robot Triggered - Office Lights off when No Motion and Door Closed',Math.floor(Math.random()*1000)));\n                    }\n                    catch(error){\n                        node.warn(error.message);\n                    }\n                }\n            },1800000);\n    }\n\n// ------------------------------------------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------------------------------------------\n// Do not edit code below this section! -----------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------------------------------------------\n\n}\nreturn;",
    "outputs": "1",
    "noerr": 0,
    "x": 386,
    "y": 61,
    "wires": [
      [
        "574d2831.a8b2d8",
        "3d6e1895.c291e8"
      ]
    ]
  },
  {
    "id": "c0df289a.3f20d8",
    "type": "catch",
    "z": "f17c0cb2.0e83f",
    "name": "",
    "scope": null,
    "x": 65,
    "y": 207,
    "wires": [
      [
        "65738293.9a8c7c"
      ]
    ]
  },
  {
    "id": "65738293.9a8c7c",
    "type": "debug",
    "z": "f17c0cb2.0e83f",
    "name": "",
    "active": true,
    "console": "false",
    "complete": "false",
    "x": 254,
    "y": 205,
    "wires": []
  },
  {
    "id": "574d2831.a8b2d8",
    "type": "delay",
    "z": "f17c0cb2.0e83f",
    "name": "",
    "pauseType": "rate",
    "timeout": "5",
    "timeoutUnits": "seconds",
    "rate": "1",
    "rateUnits": "second",
    "randomFirst": "1",
    "randomLast": "5",
    "randomUnits": "seconds",
    "drop": false,
    "x": 518,
    "y": 314,
    "wires": [
      [
        "18de37a7.e721c8"
      ]
    ]
  },
  {
    "id": "3d6e1895.c291e8",
    "type": "debug",
    "z": "f17c0cb2.0e83f",
    "name": "",
    "active": false,
    "console": "false",
    "complete": "payload",
    "x": 634,
    "y": 234,
    "wires": []
  }
]
