[
  {
    "id": "8a46b55d.75b948",
    "type": "function",
    "z": "f17c0cb2.0e83f",
    "name": "Robots",
    "func": "date=new Date();\n\nif ('useRobots' in context.global && context.global.useRobots) {\n    var WinkCMDmsg = \"\";\n    // Import changed data into a local variable for ease of use\n    changed = msg.payload;\n    // All robots are \"if statements\"\n    // Use the examples below to create your own robots -- you can have multiple conditions as seen below.\n\n    // Example #1: If my Hallway Sensor (motion sensor) changes to motion detected, turn on my hallway light.\n    // Note best practice is to have old_state== && new_state== as these two conditions means that the old_state\n    // was something else and CHANGED to the new_state. You might get falsely triggered events if you do not\n    // put old_state into the condition.\n    if (changed.name==\"Hallway Sensor\" && changed.old_state!==true && changed.new_state==true )\n    {\n        try {\n            // This command turns my Hallway light on to 100%\n            WinkCMDmsg = context.global.executeWinkCMD(\"Hallway\",\"light\",\"on\",\"50\");\n            node.send(WinkCMDmsg);\n        }\n        catch(error){\n            node.warn(error.message);\n        }\n    }\n    \n    if (changed.name==\"Hallway Sensor\" && changed.old_state!==false && changed.new_state==false )\n    {\n        try {\n            // This command turns my Hallway light off\n            WinkCMDmsg = context.global.executeWinkCMD(\"Hallway\",\"light\",\"off\",\"0\");\n            node.send(WinkCMDmsg);\n        }\n        catch(error){\n            node.warn(error.message);\n        }\n    }\n    \n    if (changed.name==\"Basement Door\" && changed.old_state!==\"opened\" && changed.new_state==\"opened\" )\n    {\n        try {\n            // This command turns my Hallway light on to 100%\n            WinkCMDmsg = context.global.executeWinkCMD(\"Basement\",\"group\",\"on\",\"100\");\n            node.send(WinkCMDmsg);\n        }\n        catch(error){\n            node.warn(error.message);\n        }\n    }\n    \n    if (changed.name==\"Office Doors\" && changed.old_state!==\"opened\" && changed.new_state==\"opened\" )\n    {\n        try {\n            // This command turns my Hallway light on to 100%\n            WinkCMDmsg = context.global.executeWinkCMD(\"Office Light\",\"light\",\"on\",\"100\");\n            node.send(WinkCMDmsg);\n        }\n        catch(error){\n            node.warn(error.message);\n        }\n    }\n\n    if (changed.name==\"Office Doors\" && changed.old_state!==\"closed\" && changed.new_state==\"closed\" )\n    {\n        try {\n            // This command turns my Hallway light on to 100%\n            WinkCMDmsg = context.global.executeWinkCMD(\"Office Light\",\"light\",\"off\",\"0\");\n            node.send(WinkCMDmsg);\n        }\n        catch(error){\n            node.warn(error.message);\n        }\n    }\n\n    \n    // Example #2 - Another motion sensor example.\n    if (changed.name==\"Great Room Sensor\" && changed.old_state!==true && changed.new_state==true )\n    {\n        try {\n            // This command sets my Ambiance group on at 100%\n            WinkCMDmsg = context.global.executeWinkCMD(\"Ambiance\",\"group\",\"on\",\"100\");\n            node.send(WinkCMDmsg);\n            // This command just shows a message in the debug tab.\n            node.warn(\"Great Room Sensor motion detected - turn on Ambiance.\")\n        }\n        catch(error){\n            node.warn(error.message);\n        }\n    }\n    \n    // Example #3 turns the group off when Motion is no longer detected.\n    // Note in this example, I'm specifically saying when old_state==true and new_state==false because \n    // I only want this to trigger when the motion sensor CHANGES to false FROM true. In the above\n    // examples where old_state!==true, old_state could be undefined and new_state could equal true\n    // and the robots would still fire. In this case, if old_state is undefined and new_state is false\n    // then the robot could trigger erroneously.\n    if (changed.name==\"Great Room Sensor\" && changed.old_state==\"nevertrue\" && changed.new_state==false )\n    {\n        try {\n            // This command turns my Ambiance group off when motion is no longer detected.\n            WinkCMDmsg = context.global.executeWinkCMD(\"Ambiance\",\"group\",\"off\",\"0\");\n            node.send(WinkCMDmsg);\n            node.warn(\"Great Room Sensor motion no longer detected - turn off Ambiance.\")\n        }\n        catch(error){\n            node.warn(error.message);\n        }\n    } \n}    \n    \n// You shouldn't have to edit anything below this line.\nreturn;",
    "outputs": "1",
    "noerr": 0,
    "x": 386,
    "y": 61,
    "wires": [
      [
        "574d2831.a8b2d8",
        "3d6e1895.c291e8"
      ]
    ]
  },
  {
    "id": "489ab0b4.b7655",
    "type": "http in",
    "z": "f17c0cb2.0e83f",
    "name": "",
    "url": "/red/robots",
    "method": "post",
    "swaggerDoc": "",
    "x": 85,
    "y": 20,
    "wires": [
      [
        "ea1236e2.15edc8"
      ]
    ]
  },
  {
    "id": "ff10e5d2.00ef18",
    "type": "comment",
    "z": "f17c0cb2.0e83f",
    "name": "^---- Update the \"Robots\" node to program your robots.",
    "info": "",
    "x": 544,
    "y": 100,
    "wires": []
  },
  {
    "id": "18de37a7.e721c8",
    "type": "http request",
    "z": "f17c0cb2.0e83f",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 602,
    "y": 61,
    "wires": [
      [
        "94bdb82e.6b4248"
      ]
    ]
  },
  {
    "id": "94bdb82e.6b4248",
    "type": "debug",
    "z": "f17c0cb2.0e83f",
    "name": "",
    "active": true,
    "console": "false",
    "complete": "false",
    "x": 777,
    "y": 61,
    "wires": []
  },
  {
    "id": "ea1236e2.15edc8",
    "type": "function",
    "z": "f17c0cb2.0e83f",
    "name": "",
    "func": "if(msg.req.headers.authorization && msg.req.headers.authorization==\"Bearer \"+context.global.FREEBOARD_TOKEN){\nmsg.StatusCode=\"200\";\n//if ('camera_name' in msg.payload && msg.payload.camera_name!=='undefined') msg.payload.camera_name=msg.req.body.camera_name\n} else {\nmsg.StatusCode=\"403\";\n}\n\nif (msg.StatusCode==\"200\")\n{\n    return [msg, msg];\n}\nelse { \n    return [msg];\n}",
    "outputs": "2",
    "noerr": 0,
    "x": 247,
    "y": 20,
    "wires": [
      [
        "4e3e80f7.b1c18"
      ],
      [
        "38a0418b.c75fbe",
        "8a46b55d.75b948"
      ]
    ]
  },
  {
    "id": "4e3e80f7.b1c18",
    "type": "http response",
    "z": "f17c0cb2.0e83f",
    "name": "",
    "x": 385,
    "y": 20,
    "wires": []
  },
  {
    "id": "38a0418b.c75fbe",
    "type": "debug",
    "z": "f17c0cb2.0e83f",
    "name": "",
    "active": true,
    "console": "false",
    "complete": "false",
    "x": 403,
    "y": 136,
    "wires": []
  },
  {
    "id": "c0df289a.3f20d8",
    "type": "catch",
    "z": "f17c0cb2.0e83f",
    "name": "",
    "scope": null,
    "x": 65,
    "y": 207,
    "wires": [
      [
        "65738293.9a8c7c"
      ]
    ]
  },
  {
    "id": "65738293.9a8c7c",
    "type": "debug",
    "z": "f17c0cb2.0e83f",
    "name": "",
    "active": true,
    "console": "false",
    "complete": "false",
    "x": 254,
    "y": 205,
    "wires": []
  },
  {
    "id": "ecde67cb.132198",
    "type": "function",
    "z": "f17c0cb2.0e83f",
    "name": "Robots",
    "func": "date=new Date();\n\nif ('useRobots' in context.global && context.global.useRobots) {\n    var WinkCMDmsg = \"\";\n    // Import changed data into a local variable for ease of use\n    changed = msg.payload;\n    // All robots are \"if statements\"\n    // Use the examples below to create your own robots -- you can have multiple conditions as seen below.\n\n    // Example #1: If my Hallway Sensor (motion sensor) changes to motion detected, turn on my hallway light.\n    // Note best practice is to have old_state== && new_state== as these two conditions means that the old_state\n    // was something else and CHANGED to the new_state. You might get falsely triggered events if you do not\n    // put old_state into the condition.\n    if (changed.name==\"Hallway Sensor\" && changed.old_state!==true && changed.new_state===true )\n    {\n        // This command turns my Hallway light on to 100%\n        try {\n            WinkCMDmsg = context.global.executeWinkCMD(\"Hallway\",\"light\",\"on\",\"100\");\n            node.send(WinkCMDmsg);\n        }\n        catch(error){\n            node.warn(error.message);\n        }\n    }\n    \n    // Example #2 - Another motion sensor example.\n    if (changed.name==\"Great Room Sensor\" && changed.old_state!==true && changed.new_state===true )\n    {\n        // This command sets my Ambiance group on at 100%\n         try {\n            WinkCMDmsg = context.global.executeWinkCMD(\"Ambiance\",\"group\",\"on\",\"100\");\n            node.send(WinkCMDmsg);\n            // This command just shows a message in the debug tab.\n            node.warn(\"Great Room Sensor motion detected - turn on Ambiance.\");\n         }\n        catch(error){\n            node.warn(error.message);\n        }\n    }\n    \n    // Example #3 turns the group off when Motion is no longer detected.\n    // Note in this example, I'm specifically saying when old_state==true and new_state==false because \n    // I only want this to trigger when the motion sensor CHANGES to false FROM true. In the above\n    // examples where old_state!==true, old_state could be undefined and new_state could equal true\n    // and the robots would still fire. In this case, if old_state is undefined and new_state is false\n    // then the robot could trigger erroneously.\n    if (changed.name==\"Great Room Sensor\" && changed.old_state===true && changed.new_state===false )\n    {\n        // This command turns my Ambiance group off when motion is no longer detected.\n        try {\n            WinkCMDmsg = context.global.executeWinkCMD(\"Ambiance\",\"group\",\"off\",\"0\");\n            node.send(WinkCMDmsg);\n            node.warn(\"Great Room Sensor motion no longer detected - turn off Ambiance.\")\n        }\n        catch(error){\n            node.warn(error.message);\n        }\n    }\n    \n    // Example #4: If the front door opens (and was previously not open) and my wife isn't home, then do something.\n    if (changed.name==\"Front Door\" && changed.old_state==\"Closed\" && changed.new_state==\"Opened\" && context.global.Presence[Angie].home===false)\n    {\n        // Command shows a message in the debug tab when it's triggered:\n        node.warn(\"Front door opened!\");\n        try {\n            // This command sends an HTTP command to the URL specified.\n            // In this case, it sends a message through IFTTT which then notifies my wife the front door opened whiles he was gone.\n            WinkCMDmsg ={\n                \"url\":\"https://maker.ifttt.com/trigger/front_door_opened/with/key/\",\n                \"method\": \"PUT\",\n                payload:{}\n            }\n            node.send(WinkCMDmsg);\n        }\n        catch(error){\n            node.warn(error.message);\n        }\n    }\n    \n    // Example 5: When the garage door opens (and was previously not open), do something.\n    if (changed.name==\"GarageDoor\" && changed.old_state==\"Closed\" && changed.new_state==\"Opened\")\n    {\n        // Say something in the debug window.\n        node.warn(\"Garage door opened!\");\n        try {\n            // Send a wink Command to turn the Garage Interior group on at 100% brightness.\n            // If I wanted to change a bulb on/off, then I would use:\n            // WinkCMDmsg = context.global.executeWinkCMD(\"Light Bulb\",\"light\",\"on\",\"1\");\n            // The command above would turn a light bulb on at 1%. Obviously change on to off, 1 to a number 1 through 100.\n            WinkCMDmsg = context.global.executeWinkCMD(\"Garage Interior\",\"group\",\"on\",\"100\");\n            node.send(WinkCMDmsg);\n        }\n        catch(error){\n            node.warn(error.message);\n        }    \n    }\n\n    \n}    \n    \n// You shouldn't have to edit anything below this line.\nreturn;",
    "outputs": "1",
    "noerr": 0,
    "x": 610,
    "y": 159,
    "wires": [
      []
    ]
  },
  {
    "id": "574d2831.a8b2d8",
    "type": "delay",
    "z": "f17c0cb2.0e83f",
    "name": "",
    "pauseType": "rate",
    "timeout": "5",
    "timeoutUnits": "seconds",
    "rate": "1",
    "rateUnits": "second",
    "randomFirst": "1",
    "randomLast": "5",
    "randomUnits": "seconds",
    "drop": false,
    "x": 518,
    "y": 314,
    "wires": [
      [
        "18de37a7.e721c8"
      ]
    ]
  },
  {
    "id": "3d6e1895.c291e8",
    "type": "debug",
    "z": "f17c0cb2.0e83f",
    "name": "",
    "active": true,
    "console": "false",
    "complete": "false",
    "x": 701,
    "y": 248,
    "wires": []
  }
]
